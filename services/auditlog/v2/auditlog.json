{
  "components": {
    "parameters": {
      "cursor": {
        "description": "A pagination cursor to load further audit log entries for. May be included in the response of previous calls of the API.",
        "in": "query",
        "name": "cursor",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "description": "The maximum number of entries to return. If the value exceeds the allowed maximum, the maximum value will be used instead.",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 50,
          "maximum": 100,
          "minimum": 1,
          "type": "number"
        }
      },
      "mandatory-end-time-range": {
        "description": "An ISO timestamp to specify the end of the time range up until which entries should be returned, based on the eventTimeStamp. If not given, defaults to the time this request was received.",
        "example": "2022-03-21T08:10:14.422Z",
        "in": "query",
        "name": "end-time-range",
        "required": true,
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      },
      "mandatory-start-time-range": {
        "description": "An ISO timestamp to specify the beginning of the time range from which entries should be returned, based on the eventTimeStamp. If not given, defaults to the beginning of time.",
        "example": "2022-03-21T08:10:14.422Z",
        "in": "query",
        "name": "start-time-range",
        "required": true,
        "schema": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "Bad Request Example": {
                "value": {
                  "message": "Invalid value SCHWARZ for field visibility. Allowed values are PUBLIC, PRIVATE",
                  "path": "/v2/entries",
                  "status": "Bad Request",
                  "timestamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Bad Request"
      },
      "DownloadAuditLogEntries": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "cursor": {
                  "description": "Optional cursor if more entries are available",
                  "type": "string"
                },
                "items": {
                  "items": {
                    "$ref": "#/components/schemas/auditLogEntry"
                  },
                  "type": "array"
                },
                "limit": {
                  "default": 50,
                  "description": "Maximum amount of entries requested.",
                  "type": "number"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "Contains an array of all matched audit log entries and a pagination cursor."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "Not Found Example": {
                "value": {
                  "message": "{resourceId} not found.",
                  "path": "v2/requested/{resourceId}/entries",
                  "status": "Not Found",
                  "timestamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Resource was not found"
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "examples": {
              "Unauthorized Example": {
                "value": {
                  "message": "The request could not be authorized",
                  "path": "/v2/requested/path/entries",
                  "status": "Unauthorized",
                  "timestamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "description": "Request could not be authorized"
      }
    },
    "schemas": {
      "auditLogEntry": {
        "properties": {
          "context": {
            "$ref": "#/components/schemas/context"
          },
          "correlationId": {
            "description": "Unique ID which identifies the request from the sender point of view.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "details": {
            "$ref": "#/components/schemas/details"
          },
          "eventName": {
            "description": "Name of the operation this event represents.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "eventSource": {
            "description": "The service in which the causing event was handled.",
            "type": "string"
          },
          "eventTimeStamp": {
            "description": "Timestamp at which the event was triggered.",
            "format": "date-time",
            "type": "string"
          },
          "eventType": {
            "description": "Type that can be assigned to the event. For example, an event \"Organization created\" can be assigned to the type ADMIN_EVENT",
            "enum": [
              "ADMIN_ACTIVITY",
              "SYSTEM_EVENT",
              "POLICY_DENIED"
            ],
            "type": "string"
          },
          "eventVersion": {
            "description": "Version of the log event format.",
            "type": "string"
          },
          "id": {
            "description": "Unique ID generated by the audit log.",
            "type": "string"
          },
          "initiator": {
            "$ref": "#/components/schemas/initiator"
          },
          "receivedTimeStamp": {
            "description": "Timestamp at which the event was received by the audit log.",
            "format": "date-time",
            "type": "string"
          },
          "region": {
            "description": "Region from which the event has been emitted.",
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/request"
          },
          "resourceId": {
            "description": "Unique id of the resource that is target of the operation",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "resourceName": {
            "description": "Name of the resource that is target of the operation",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/result"
          },
          "serviceAccountDelegationInfo": {
            "$ref": "#/components/schemas/serviceAccountDelegationInfo"
          },
          "severity": {
            "description": "The severity of this request.",
            "enum": [
              "INFO",
              "ERROR"
            ],
            "type": "string"
          },
          "sourceIpAddress": {
            "description": "IP address that the request was made from",
            "format": "ipv4 | ipv6",
            "type": "string"
          },
          "userAgent": {
            "description": "Agent through which the request was made from (e.g. Portal, CLI, SDK, ...) ",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "visibility": {
            "description": "PUBLIC for entries that are intended for end users, while PRIVATE entries can only be viewed with system privileges.",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "receivedTimeStamp",
          "eventVersion",
          "eventSource",
          "region",
          "severity",
          "visibility",
          "eventType",
          "eventTimeStamp",
          "eventName",
          "sourceIpAddress",
          "userAgent",
          "initiator",
          "request"
        ],
        "title": "auditLogEntry",
        "type": "object"
      },
      "context": {
        "description": "Request context",
        "properties": {
          "folderId": {
            "description": "Folder id",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "description": "Organization id",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "projectId": {
            "description": "Project id",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "delegationPrincipal": {
        "description": "Principal in delegation chain of a service account",
        "properties": {
          "email": {
            "description": "E-Mail of the subject",
            "format": "email",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the subject",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "details": {
        "description": "Additional information about the event that is not part of the request or response. May contain arbitrary data.",
        "type": "object"
      },
      "error": {
        "properties": {
          "message": {
            "description": "Message describing the error that occured",
            "type": "string"
          },
          "path": {
            "description": "Path that was called and where the error occurred",
            "type": "string"
          },
          "status": {
            "description": "Status Code in which the call resulted",
            "type": "string"
          },
          "timestamp": {
            "description": "Timestamp at which the error occurred",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "error",
        "type": "object"
      },
      "initiator": {
        "description": "Information about who made the request.",
        "properties": {
          "email": {
            "description": "E-Mail of the user or service account who triggered the request",
            "format": "email",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the user",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "request": {
        "description": "Request, which mirrors the action of the user and the resulting changes within the system",
        "properties": {
          "body": {
            "description": "Body used to make the request.",
            "type": "object"
          },
          "endpoint": {
            "description": "Endpoint which received the request.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "headers": {
            "description": "Headers used to make the request. May only contain (string -\u003e string) key-value pairs.",
            "type": "object"
          },
          "parameters": {
            "description": "Parameters used to make the request.",
            "type": "object"
          }
        },
        "required": [
          "endpoint"
        ],
        "title": "request",
        "type": "object"
      },
      "result": {
        "description": "Object representing the change resulting from this event. May be omitted if no change has been applied. May contain arbitrary data.",
        "type": "object"
      },
      "serviceAccountDelegationInfo": {
        "description": "Information about service account delegation",
        "properties": {
          "principals": {
            "description": "Delegation chain for the service account",
            "items": {
              "$ref": "#/components/schemas/delegationPrincipal"
            },
            "type": "array"
          }
        },
        "required": [
          "principals"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "name": "STACKIT Core Platform",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "API Endpoints to retrieve recorded actions and resulting changes in the system.\n\n### Documentation\nThe user documentation with explanations how to use the api can be found \n[here](https://docs.stackit.cloud/stackit/en/retrieve-audit-log-per-api-request-134415907.html).\n\n### Audit Logging\nChanges on organizations, folders and projects and respective cloud resources are logged and collected in the audit \nlog.\n\n### API Constraints\nThe audit log API allows to download messages from the last 90 days. The maximum duration that can be queried at \nonce is 24 hours. Requests are rate limited - the current maximum is 1 request per second.",
    "termsOfService": "https://www.stackit.de/en/general-terms-and-conditions/terms-of-use/",
    "title": "Audit Log API",
    "version": "2.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v2/folders/{folderId}": {
      "get": {
        "description": "Returns all audit log entries of the folder for the specified period. \\\nPeriod must not be longer than 24 hours within the last 90 days.\n",
        "operationId": "download-folder-audit-entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/mandatory-start-time-range"
          },
          {
            "$ref": "#/components/parameters/mandatory-end-time-range"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadAuditLogEntries"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Folder - Download audit log entries",
        "x-stackit-authorization": {
          "actions": [
            "audit-log.entry.get"
          ],
          "resource-id": "folderId",
          "resource-id-type": "dynamic",
          "resource-type": "folder"
        }
      },
      "parameters": [
        {
          "description": "ID of the folder for which entries should be returned.",
          "in": "path",
          "name": "folderId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ]
    },
    "/v2/organizations/{organizationId}": {
      "get": {
        "description": "Returns all audit log entries of the organization for the specified period. \\\nPeriod must not be longer than 24 hours within the last 90 days.\n",
        "operationId": "download-organization-audit-entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/mandatory-start-time-range"
          },
          {
            "$ref": "#/components/parameters/mandatory-end-time-range"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadAuditLogEntries"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Organization - Download audit log entries",
        "x-stackit-authorization": {
          "actions": [
            "audit-log.entry.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "description": "ID of the organization for which entries should be returned.",
          "in": "path",
          "name": "organizationId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ]
    },
    "/v2/projects/{projectId}": {
      "get": {
        "description": "Returns all audit log entries of the project for the specified period. \\\nPeriod must not be longer than 24 hours within the last 90 days.\n",
        "operationId": "download-project-audit-entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/mandatory-start-time-range"
          },
          {
            "$ref": "#/components/parameters/mandatory-end-time-range"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadAuditLogEntries"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Project - Download audit log entries",
        "x-stackit-authorization": {
          "actions": [
            "audit-log.entry.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "description": "ID of the project for which entries should be returned.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "format": "uuid",
            "type": "string"
          }
        }
      ]
    }
  },
  "servers": [
    {
      "url": "https://auditlog.api.stackit.cloud",
      "variables": {
        "region": {
          "default": "global"
        }
      }
    }
  ]
}