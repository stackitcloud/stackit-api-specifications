{
  "components": {
    "schemas": {
      "ErrorResponse": {
        "example": {
          "error": "Bad Request",
          "message": "Some information about what caused the Error",
          "path": "/v1/path/which/returned/error",
          "status": 400,
          "timeStamp": "2019-08-24T14:15:22Z"
        },
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "timeStamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timeStamp",
          "path",
          "status",
          "error",
          "message"
        ],
        "type": "object"
      },
      "ExistingPermission": {
        "properties": {
          "description": {
            "example": "Can create projects in an organization",
            "maxLength": 255,
            "title": "A human readable description of the permission",
            "type": "string"
          },
          "name": {
            "example": "iam.member.read",
            "maxLength": 255,
            "pattern": "^[a-z](?:-?\\.?[a-z]){1,63}$",
            "title": "Permission of the subject",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description"
        ],
        "type": "object"
      },
      "Member": {
        "properties": {
          "role": {
            "example": "owner",
            "pattern": "^[a-z](?:-?\\.?[a-z]){1,63}$",
            "title": "A valid role defined for the resource.",
            "type": "string"
          },
          "subject": {
            "example": "user@mail.schwarz",
            "maxLength": 255,
            "minLength": 1,
            "title": "Identifier of user, service account or client. Usually email address or name in case of clients.",
            "type": "string"
          }
        },
        "required": [
          "subject",
          "role"
        ],
        "type": "object"
      },
      "Permission": {
        "properties": {
          "description": {
            "example": "Can create projects in an organization",
            "maxLength": 255,
            "minLength": 1,
            "title": "A human readable description of the permission",
            "type": "string"
          },
          "name": {
            "example": "iam.member.read",
            "maxLength": 255,
            "pattern": "^[a-z](?:-?\\.?[a-z]){1,63}$",
            "title": "Permission name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description"
        ],
        "type": "object"
      },
      "RemoveMembersPayload": {
        "properties": {
          "forceRemove": {
            "title": "When true, removes other memberships of the subject that would stop the removal of the requested membership",
            "type": "boolean"
          },
          "members": {
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "title": "The list of members",
            "type": "array"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          }
        },
        "required": [
          "resourceType",
          "members"
        ],
        "type": "object"
      },
      "Role": {
        "properties": {
          "description": {
            "example": "An owner of the project",
            "maxLength": 255,
            "title": "A human readable description of the role",
            "type": "string"
          },
          "id": {
            "example": "029527b4-a8c0-4f0b-8a70-516a24cd23001",
            "pattern": "^([a-zA-Z0-9/_|\\-=+]{1,})$",
            "title": "The ID of the role.",
            "type": "string"
          },
          "name": {
            "example": "my-owner",
            "pattern": "^[a-z](?:-?\\.?[a-z]){1,63}$",
            "title": "Name and identifier of the role.",
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "title": "Permissions for the role",
            "type": "array"
          }
        },
        "required": [
          "name",
          "description",
          "permissions"
        ],
        "type": "object"
      },
      "RolesResponse": {
        "properties": {
          "resourceId": {
            "example": "schwarz-it-kg-WJACUK1",
            "pattern": "^([a-zA-Z0-9/_|\\-=+@.]{1,})$",
            "title": "The ID of the resource, where the members should be updated",
            "type": "string"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          },
          "roles": {
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "title": "Roles",
            "type": "array"
          }
        },
        "required": [
          "resourceId",
          "resourceType",
          "roles"
        ],
        "type": "object"
      },
      "UserMembership": {
        "properties": {
          "resourceId": {
            "example": "schwarz-it-kg-WJACUK1",
            "pattern": "^([a-zA-Z0-9/_|\\-=+@.]{1,})$",
            "title": "The ID of the resource",
            "type": "string"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          },
          "role": {
            "example": "my-owner",
            "pattern": "^[a-z](?:-?\\.?[a-z]){1,63}$",
            "title": "A valid role defined for the resource.",
            "type": "string"
          },
          "subject": {
            "maxLength": 255,
            "title": "Identifier of user, service account or client. Usually email address or name in case of clients.",
            "type": "string"
          }
        },
        "required": [
          "resourceId",
          "resourceType",
          "subject",
          "role"
        ],
        "type": "object"
      },
      "UserPermission": {
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ExistingPermission"
            },
            "type": "array"
          },
          "resourceId": {
            "example": "schwarz-it-kg-WJACUK1",
            "pattern": "^([a-zA-Z0-9/_|\\-=+@.]{1,})$",
            "title": "The ID of the resource",
            "type": "string"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          }
        },
        "required": [
          "resourceId",
          "resourceType",
          "permissions"
        ],
        "type": "object"
      },
      "Zookie": {
        "properties": {
          "zookie": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddMembersPayload": {
        "properties": {
          "members": {
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "title": "The list of members",
            "type": "array"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          }
        },
        "required": [
          "resourceType",
          "members"
        ],
        "type": "object"
      },
      "MembersResponse": {
        "properties": {
          "members": {
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "title": "The list of members who should be added to this resource",
            "type": "array"
          },
          "resourceId": {
            "example": "schwarz-it-kg-WJACUK1",
            "pattern": "^([a-zA-Z0-9/_|\\-=+@.]{1,})$",
            "title": "The ID of the resource, where the members should be updated",
            "type": "string"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          },
          "writtenAt": {
            "$ref": "#/components/schemas/Zookie"
          }
        },
        "required": [
          "resourceId",
          "resourceType",
          "members"
        ],
        "type": "object"
      },
      "ListPermissionsResponse": {
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "title": "List of permissions",
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "ListMembersResponse": {
        "properties": {
          "members": {
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "title": "The list of members who should be added to this resource",
            "type": "array"
          },
          "resourceId": {
            "example": "schwarz-it-kg-WJACUK1",
            "pattern": "^([a-zA-Z0-9/_|\\-=+@.]{1,})$",
            "title": "The ID of the resource, where the members should be updated",
            "type": "string"
          },
          "resourceType": {
            "example": "organization",
            "pattern": "^[a-z](?:-?[a-z]){1,63}$",
            "title": "Resource type",
            "type": "string"
          }
        },
        "required": [
          "resourceId",
          "resourceType",
          "members"
        ],
        "type": "object"
      },
      "ListUserMembershipsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserMembership"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ListUserPermissionsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "description": "The Membership API is used to manage memberships, roles and permissions of STACKIT resources, like projects, folders, organizations and other resources.",
    "title": "STACKIT Membership API",
    "version": "2.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v2/permissions": {
      "get": {
        "description": "Get available permissions",
        "operationId": "ListPermissions",
        "parameters": [
          {
            "in": "query",
            "name": "resourceType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPermissionsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get available permissions"
      }
    },
    "/v2/users/{email}/memberships": {
      "get": {
        "description": "List memberships of a user. An administrative access is needed to list any user's memberships, while the user can do it on his/her own email. You can use filters to scope the request to a project/folder/organization. In this case -if caller is not the subject-, owner permissions are required. Because of hierarchical role bindings, the user might have permissions on more resources.",
        "operationId": "ListUserMemberships",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resourceType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resourceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parentResourceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUserMembershipsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "List memberships of a user"
      }
    },
    "/v2/{resourceId}/members": {
      "patch": {
        "description": "Add members to the given resource with specified roles.",
        "operationId": "AddMembers",
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMembersPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembersResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Add members to a resource"
      }
    },
    "/v2/{resourceId}/members/remove": {
      "post": {
        "description": "Remove members from the given resource with specified roles.",
        "operationId": "RemoveMembers",
        "parameters": [
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMembersPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembersResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Remove members from a resource"
      }
    },
    "/v2/{resourceType}/{resourceId}/members": {
      "get": {
        "description": "List members of the given resource.",
        "operationId": "ListMembers",
        "parameters": [
          {
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "subject",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMembersResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get members to a resource"
      }
    },
    "/v2/{resourceType}/{resourceId}/roles": {
      "get": {
        "description": "Get roles and permissions of a resource",
        "operationId": "ListRoles",
        "parameters": [
          {
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolesResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Malformed input"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get roles and permissions of a resource"
      }
    }
  },
  "servers": [
    {
      "url": "https://authorization.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": ""
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Membership"
    }
  ]
}