{
  "components": {
    "schemas": {
      "CreateCertificatePayload": {
        "description": "Uploads a PEM encoded X509 public/private key pair",
        "properties": {
          "name": {
            "description": "TLS certificate name",
            "example": "my-tls-certificate",
            "pattern": "^[0-9a-z](?:(?:[0-9a-z]|-){0,61}[0-9a-z])?$",
            "type": "string"
          },
          "privateKey": {
            "description": "The PEM encoded private key part",
            "example": "-----BEGIN EC PRIVATE KEY----- MYPriV4TE+Tls/CER71fICATE...-----END EC PRIVATE KEY-----",
            "type": "string"
          },
          "projectId": {
            "description": "Project identifier",
            "example": "2438ac3c-37eb-4902-adef-ed16b4431030",
            "format": "uuid",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
            "readOnly": true,
            "type": "string"
          },
          "publicKey": {
            "description": "The PEM encoded public key part",
            "example": "-----BEGIN CERTIFICATE----- MYPUbLiC+Tls/CER71fICATE...-----END CERTIFICATE-----",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateCertificateResponse": {
        "description": "CreateCertificateResponse returns unique resource id",
        "properties": {
          "id": {
            "description": "The certificates resource id",
            "example": "my-tls-certificate-v1-123456",
            "pattern": "^[0-9a-z](?:(?:[0-9a-z]|-){0,251}[0-9a-z])?$",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteCertificateResponse": {
        "description": "DeleteCertificateResponse returns has empty body if successful.",
        "type": "object"
      },
      "GetCertificateResponse": {
        "description": "GetCertificateResponse returns name, id and public key",
        "properties": {
          "id": {
            "description": "The certificates resource id",
            "example": "my-tls-certificate-v1-123456",
            "pattern": "^[0-9a-z](?:(?:[0-9a-z]|-){0,251}[0-9a-z])?$",
            "type": "string"
          },
          "name": {
            "description": "TLS certificate name",
            "example": "my-tls-certificate",
            "pattern": "^[0-9a-z](?:(?:[0-9a-z]|-){0,251}[0-9a-z])?$",
            "type": "string"
          },
          "publicKey": {
            "description": "The PEM encoded public key part",
            "example": "-----BEGIN CERTIFICATE----- MYPUbLiC+Tls/CER71fICATE...-----END CERTIFICATE-----",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleProtobufAny": {
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.",
        "properties": {
          "@type": {
            "description": "The type of the serialized message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListCertificatesResponse": {
        "description": "ListCertificateResponse returns a list of certificate responses",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/GetCertificateResponse"
            },
            "type": "array"
          },
          "nextPageId": {
            "description": "Continue token from the ListCertificatesResponse with Limit option",
            "example": "eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6NTQ1Njk3ODA2LCJzdGFydCI6Im15LWFsYi1uZXdcdTAwMDAifQ",
            "format": "string",
            "pattern": "^[0-9a-z](?:(?:[0-9a-z]|-){0,61}[0-9a-z])?$",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
            "format": "int32"
          },
          "details": {
            "description": "A list of messages that carry the error details.  There is a common set of message types for APIs to use.",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "description": "This API offers the ability to store TLS certificates, which can be used by load balancing servers in STACKIT. They can be between consumer and load balancing server and/or between load balancing server and endpoint server.",
    "title": "Load Balancer Certificates API",
    "version": "1alpha.2.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v1alpha/projects/{projectId}/certificates": {
      "get": {
        "description": "ListCertificates will return the list of TLS certificates in a project.",
        "operationId": "ListCertificates",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "page_size specifies how many certificates should be returned on this page. Must be a positive number \u003c= 1000",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "page_id is a page identifier returned by the previous response and is used to request the next page",
            "in": "query",
            "name": "pageId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCertificatesResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "One or more fields are invalid."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "description": "this project_id is not allowed to try this API"
          },
          "410": {
            "description": "page_id is expired"
          },
          "500": {
            "description": "internal error - please retry again later or contact support if the issue persists"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieve the list of TLS certificate stored in a project."
      },
      "post": {
        "description": "CreateCertificate will store a TLS certificate in a project.",
        "operationId": "CreateCertificate",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCertificatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCertificateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "One or more fields are invalid."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "description": "this project_id is not allowed to try this API"
          },
          "500": {
            "description": "internal error - please retry again later or contact support if the issue persists"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Store a TLS certificate in a project."
      }
    },
    "/v1alpha/projects/{projectId}/certificates/{id}": {
      "delete": {
        "description": "DeleteCertificate will delete the stored TLS certificate.",
        "operationId": "DeleteCertificate",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCertificateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "certificate is used by a load balancer"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "description": "this project_id is not allowed to try this API"
          },
          "500": {
            "description": "internal error - please retry again later or contact support if the issue persists"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Delete a stored TLS certificate in a project."
      },
      "get": {
        "description": "GetCertificate will return the public parts of a stored TLS certificate.",
        "operationId": "GetCertificate",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCertificateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "One or more fields are invalid."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "description": "this project_id is not allowed to try this API"
          },
          "404": {
            "description": "certificate not found"
          },
          "500": {
            "description": "internal error - please retry again later or contact support if the issue persists"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "Default error response"
          }
        },
        "summary": "Retrieve the public parts of a stored TLS certificate."
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://certificates.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": "eu01.",
          "enum": [
            "eu01."
          ]
        }
      }
    }
  ]
}