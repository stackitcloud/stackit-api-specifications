{
  "components": {
    "parameters": {
      "v1BackupID": {
        "description": "The identifier (ID) of a STACKIT Backup.",
        "in": "path",
        "name": "backupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1DryRun": {
        "description": "Test run without applying changes.",
        "in": "query",
        "name": "dryrun",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1Force": {
        "description": "Force action.",
        "in": "query",
        "name": "force",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1ImageID": {
        "description": "The identifier (ID) of a STACKIT Image.",
        "in": "path",
        "name": "imageId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1KeypairName": {
        "description": "The name of a key pair.",
        "example": "keypair-123",
        "in": "path",
        "name": "keypairName",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GenericName"
        }
      },
      "v1MachineTypeName": {
        "description": "STACKIT machine type Name.",
        "example": "t1.1",
        "in": "path",
        "name": "machineType",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GenericName"
        }
      },
      "v1NICID": {
        "description": "The identifier (ID) of a network interface.",
        "in": "path",
        "name": "nicId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkAreaID": {
        "description": "The identifier (ID) of a STACKIT Network Area.",
        "in": "path",
        "name": "areaId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkID": {
        "description": "The identifier (ID) of a STACKIT Network.",
        "in": "path",
        "name": "networkId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkRangeID": {
        "description": "The identifier (ID) of a STACKIT Network Range.",
        "in": "path",
        "name": "networkRangeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1OpenStackProjectId": {
        "description": "The identifier (ID) of an OpenStack Project.",
        "in": "path",
        "name": "openStackProjectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/OpenStackProjectId"
        }
      },
      "v1OrganizationID": {
        "description": "The identifier (ID) of a STACKIT Organization.",
        "in": "path",
        "name": "organizationId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ProjectID": {
        "description": "The identifier (ID) of a STACKIT Project.",
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1PublicIPID": {
        "description": "The identifier (ID) of a Public IP.",
        "in": "path",
        "name": "publicIpId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1RequestID": {
        "description": "The identifier (ID) of a STACKIT Request.",
        "in": "path",
        "name": "requestId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ReqId"
        }
      },
      "v1RouteID": {
        "description": "The identifier (ID) of a STACKIT Route.",
        "in": "path",
        "name": "routeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1SecurityGroupID": {
        "description": "The identifier (ID) of a STACKIT Security Group.",
        "in": "path",
        "name": "securityGroupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1SecurityGroupRuleID": {
        "description": "The identifier (ID) of a STACKIT Security Group Rule.",
        "in": "path",
        "name": "securityGroupRuleId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ServerDetail": {
        "description": "Show detailed information about server.",
        "in": "query",
        "name": "details",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1ServerGroupID": {
        "description": "The identifier (ID) of a STACKIT Server Group.",
        "in": "path",
        "name": "serverGroupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ServerID": {
        "description": "The identifier (ID) of a STACKIT Server.",
        "in": "path",
        "name": "serverId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ServiceAccountMail": {
        "description": "The e-mail address of a service account.",
        "in": "path",
        "name": "serviceAccountMail",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ServiceAccountMail"
        }
      },
      "v1SnapshotID": {
        "description": "The identifier (ID) of a STACKIT Snapshot.",
        "in": "path",
        "name": "snapshotId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1VirtualIPID": {
        "description": "The identifier (ID) of a Virtual IP.",
        "in": "path",
        "name": "virtualIpId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1VolumeID": {
        "description": "The identifier (ID) of a STACKIT Volume.",
        "in": "path",
        "name": "volumeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1VolumePerformanceClassName": {
        "description": "The name of a STACKIT Volume performance class.",
        "example": "storage_premium_perf6",
        "in": "path",
        "name": "volumePerformanceClass",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GenericName"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "InvalidAffinityPolicy": {
                "value": {
                  "code": 400,
                  "msg": "The server group policy is not supported"
                }
              },
              "InvalidBootDeviceSize": {
                "value": {
                  "code": 400,
                  "msg": "boot device size is not valid or missing"
                }
              },
              "InvalidMachineType": {
                "value": {
                  "code": 400,
                  "msg": "machine type is not valid"
                }
              },
              "InvalidParameter": {
                "value": {
                  "code": 400,
                  "msg": "request body has an error: doesn't match schema: Error at \"/name\": value must be a string"
                }
              },
              "InvalidPublicKey": {
                "value": {
                  "code": 400,
                  "msg": "invalid pubkey"
                }
              },
              "InvalidUUID": {
                "value": {
                  "code": 400,
                  "msg": "invalid uuid"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A bad request."
      },
      "Conflict": {
        "content": {
          "application/json": {
            "example": {
              "code": 409,
              "msg": "Conflict"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A conflict has occurred."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "code": 403,
              "msg": "Forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A request which was forbidden."
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "code": 500,
              "msg": "internal server error"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error, returns a 500 if something is broken on IaaS API Side."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "AreaNotFound": {
                "value": {
                  "code": 404,
                  "msg": "area not found"
                }
              },
              "KeyPairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "KeypairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "NetworkNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network not found"
                }
              },
              "NetworkRangeNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network range not found"
                }
              },
              "OrganizationNotFound": {
                "value": {
                  "code": 404,
                  "msg": "organization not found"
                }
              },
              "ProjectNotFound": {
                "value": {
                  "code": 404,
                  "msg": "project not found"
                }
              },
              "RequestNotFound": {
                "value": {
                  "code": 404,
                  "msg": "request not found"
                }
              },
              "RouteNotFound": {
                "value": {
                  "code": 404,
                  "msg": "route not found"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The object was not found."
      },
      "ServerOrPublicIPNotFound": {
        "content": {
          "application/json": {
            "example": {
              "code": 404,
              "msg": "ServerOrPublicIPNotFound"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The server or public IP was not found."
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Too Many Requests."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "code": 401,
              "msg": "Unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A request which was not authorized."
      },
      "UpdateAccepted": {
        "description": "An update was accepted."
      }
    },
    "schemas": {
      "AddVolumeToServerPayload": {
        "description": "Object that represents a Volume attachment to a server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "AllowedAddresses": {
        "description": "A list of IPs or CIDR notations.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/IP"
            },
            {
              "$ref": "#/components/schemas/CIDR"
            }
          ]
        },
        "type": "array"
      },
      "Area": {
        "description": "The basic properties of a network area.",
        "properties": {
          "defaultNameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/NetworkRangeList"
          },
          "routes": {
            "$ref": "#/components/schemas/RouteList"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "type": "object"
      },
      "AreaConfig": {
        "description": "The basic network area object.",
        "properties": {
          "defaultNameservers": {
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "maxItems": 3,
            "type": "array"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/NetworkRangeList"
          },
          "routes": {
            "$ref": "#/components/schemas/RouteList"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "transferNetwork",
          "networkRanges"
        ],
        "type": "object"
      },
      "AreaDefaultPrefixLengthIPv4": {
        "description": "The default prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "AreaId": {
        "description": "The identifier (ID) of an area.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/UUID"
          },
          {
            "$ref": "#/components/schemas/StaticAreaID"
          }
        ]
      },
      "AreaMaxPrefixLengthIPv4": {
        "description": "The maximal prefix length for networks in the network area.",
        "example": 29,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "AreaMinPrefixLengthIPv4": {
        "description": "The minimal prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 22,
        "type": "integer"
      },
      "AreaPrefixConfigIPv4": {
        "description": "The IPv4 prefix config for a network area.",
        "properties": {
          "defaultPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaDefaultPrefixLengthIPv4"
              }
            ],
            "default": 25
          },
          "maxPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaMaxPrefixLengthIPv4"
              }
            ],
            "default": 29
          },
          "minPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaMinPrefixLengthIPv4"
              }
            ],
            "default": 24
          }
        },
        "type": "object"
      },
      "AvailabilityZone": {
        "description": "Object that represents an availability zone.",
        "example": "eu01-1",
        "type": "string"
      },
      "AvailabilityZoneList": {
        "description": "A list of availability zones.",
        "items": {
          "$ref": "#/components/schemas/AvailabilityZone"
        },
        "type": "array"
      },
      "AvailabilityZoneListResponse": {
        "description": "Availability Zone list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/AvailabilityZoneList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "BootVolume": {
        "description": "The boot device for the server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "performanceClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "writeOnly": true
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "writeOnly": true
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VolumeSourceImage"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceVolume"
              }
            ],
            "writeOnly": true
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "CIDR": {
        "description": "Classless Inter-Domain Routing (CIDR).",
        "example": "192.168.0.0/24",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(3[0-2]|2[0-9]|1[0-9]|[0-9]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "CIDRv6": {
        "description": "Classless Inter-Domain Routing (CIDR) for IPv6.",
        "example": "2001:0db8:85a3:0800::/56",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "CreateAreaAddressFamily": {
        "description": "The addressFamily object for a area create request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/CreateAreaIPv4"
          }
        },
        "type": "object"
      },
      "CreateAreaIPv4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AreaConfig"
          },
          {
            "$ref": "#/components/schemas/AreaPrefixConfigIPv4"
          }
        ],
        "description": "The config object for a IPv4 network area."
      },
      "CreateImagePayload": {
        "description": "Object that represents an Image and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "diskFormat": {
            "$ref": "#/components/schemas/v1DiskFormat"
          },
          "extraSpecs": {
            "$ref": "#/components/schemas/ExtraSpecs"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "minDiskSize": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "minRam": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "protected": {
            "example": false,
            "type": "boolean"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageStatus"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "name",
          "diskFormat"
        ],
        "type": "object"
      },
      "CreateKeyPairPayload": {
        "description": "Object that represents the public key of a SSH key pair and its name.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "publicKey": {
            "$ref": "#/components/schemas/SSHPublicKey"
          }
        },
        "required": [
          "publicKey"
        ],
        "type": "object"
      },
      "CreateNICPayload": {
        "description": "Object that represents a network interface.",
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "device": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "mac": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MAC"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "nicSecurity": {
            "default": true,
            "description": "If this is set to false, then no security groups will apply to this network interface.",
            "type": "boolean"
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "status": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "active",
              "down"
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "server",
              "metadata",
              "gateway"
            ]
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "CreateNetworkAddressFamily": {
        "description": "The addressFamily object for a network create request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/CreateNetworkIPv4Body"
          },
          "ipv6": {
            "$ref": "#/components/schemas/CreateNetworkIPv6Body"
          }
        },
        "type": "object"
      },
      "CreateNetworkAreaPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/CreateAreaAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "name",
          "addressFamily"
        ],
        "type": "object"
      },
      "CreateNetworkAreaRangePayload": {
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/NetworkRangeList"
          }
        },
        "type": "object"
      },
      "CreateNetworkAreaRoutePayload": {
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/RouteList"
          }
        },
        "type": "object"
      },
      "CreateNetworkIPv4Body": {
        "description": "The config object for an IPv4 network.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/v1NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          },
          "prefixLength": {
            "example": 24,
            "maximum": 29,
            "minimum": 22,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateNetworkIPv6Body": {
        "description": "The config object for an IPv6 network.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/v1NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserverv6"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDRv6"
          },
          "prefixLength": {
            "example": 64,
            "maximum": 128,
            "minimum": 56,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateNetworkPayload": {
        "description": "Object that represents the request body for a network create.",
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/CreateNetworkAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "routed": {
            "$ref": "#/components/schemas/v1Routed"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreatePublicIPPayload": {
        "description": "Object that represents a public IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IP"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "networkInterface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "Associate the public IP with a network interface or a virtual IP (ID)."
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "CreateSecurityGroupPayload": {
        "description": "Object that represents a security group.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "rules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityGroupRuleList"
              }
            ],
            "readOnly": true
          },
          "stateful": {
            "$ref": "#/components/schemas/Stateful"
          }
        },
        "required": [
          "id",
          "name",
          "rules"
        ],
        "type": "object"
      },
      "CreateSecurityGroupRulePayload": {
        "description": "Object that represents a security group rule.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "direction": {
            "description": "The direction of the traffic which the rule should match.",
            "type": "string",
            "x-extensible-enum": [
              "ingress",
              "egress"
            ]
          },
          "ethertype": {
            "default": "IPv4",
            "description": "The ethertype which the rule should match.",
            "type": "string",
            "x-extensible-enum": [
              "IPv4",
              "IPv6"
            ]
          },
          "icmpParameters": {
            "$ref": "#/components/schemas/ICMPParameters"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CIDR"
              }
            ],
            "description": "The remote IP range which the rule should match."
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "portRange": {
            "$ref": "#/components/schemas/PortRange"
          },
          "protocol": {
            "description": "The internet protocol which the rule should match.",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/ProtocolName"
              },
              "protocol": {
                "$ref": "#/components/schemas/Protocol"
              }
            },
            "type": "object"
          },
          "remoteSecurityGroupId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The remote security group which the rule should match."
          },
          "securityGroupId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "direction"
        ],
        "type": "object"
      },
      "CreateServerGroupPayload": {
        "description": "Definition of a server group.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "description": "The servers that are part of the server group.",
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "policy": {
            "$ref": "#/components/schemas/ServerGroupPolicy"
          }
        },
        "required": [
          "name",
          "policy"
        ],
        "type": "object"
      },
      "CreateServerPayload": {
        "description": "Representation of a single server object.",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "bootVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BootVolume"
              }
            ],
            "writeOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "keypair": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "description": "The key pair used during the server creation."
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "launchedAt": {
            "example": "2023-09-22T11:39:48.205Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "machineType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "description": "Name of the machine-type the server shall belong to.",
            "example": "t1.1"
          },
          "maintenanceWindow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerMaintenance"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The initial network for the server creation.",
            "writeOnly": true
          },
          "nics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerNICList"
              }
            ],
            "description": "The list of network interfaces (NICs) attached to the server.",
            "readOnly": true
          },
          "powerStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerPowerStatus"
              }
            ],
            "readOnly": true
          },
          "securityGroups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericNameList"
              }
            ],
            "description": "The list of security groups the server has."
          },
          "serverGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The server group the server is assigned to."
          },
          "serviceAccountMails": {
            "$ref": "#/components/schemas/ServiceAccountMailList"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerStatus"
              }
            ],
            "readOnly": true
          },
          "userData": {
            "$ref": "#/components/schemas/ServerUserData"
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUIDList"
              }
            ],
            "description": "The list of volumes attached to the server."
          }
        },
        "required": [
          "name",
          "network",
          "machineType"
        ],
        "type": "object"
      },
      "CreateVirtualIPPayload": {
        "description": "Object that represents a virtual ip.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "network"
        ],
        "type": "object"
      },
      "CreateVolumePayload": {
        "description": "Object that represents a volume and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "bootable": {
            "default": false,
            "example": true,
            "readOnly": true,
            "type": "boolean"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "encrypted": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "performanceClass": {
            "$ref": "#/components/schemas/GenericName"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "size": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VolumeSourceImage"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceVolume"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceSnapshot"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceBackup"
              }
            ],
            "writeOnly": true
          },
          "sourceRef": {
            "$ref": "#/components/schemas/VolumeSourceRef"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeStatus"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "availabilityZone"
        ],
        "type": "object"
      },
      "DeleteOnTermination": {
        "default": false,
        "description": "Delete the volume during the termination of the server. Defaults to false.",
        "type": "boolean"
      },
      "Description": {
        "description": "Description Object. Allows string up to 127 Characters.",
        "example": "cool description dude. Wanna play some Snakeybus?",
        "maxLength": 127,
        "type": "string"
      },
      "Error": {
        "description": "Error with HTTP error code and an error message.",
        "properties": {
          "code": {
            "example": 404,
            "type": "integer"
          },
          "msg": {
            "example": "Project not found",
            "type": "string"
          }
        },
        "required": [
          "code",
          "msg"
        ],
        "type": "object"
      },
      "ExtraSpecs": {
        "description": "Properties to control certain aspects or scheduling behavior for an object.",
        "example": {
          "os_distro": "arch"
        },
        "format": "json",
        "type": "object"
      },
      "GenericName": {
        "description": "The name for a General Object. Matches Names and also UUIDs.",
        "example": "objectName26",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|_|\\s|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "GenericNameList": {
        "description": "A list of General Objects.",
        "items": {
          "$ref": "#/components/schemas/GenericName"
        },
        "type": "array"
      },
      "ICMPParameters": {
        "description": "Object that represents ICMP parameters.",
        "properties": {
          "code": {
            "description": "ICMP code. Can be set if the protocol is ICMP.",
            "example": 0,
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "description": "ICMP type. Can be set if the protocol is ICMP.",
            "example": 8,
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "type",
          "code"
        ],
        "type": "object"
      },
      "IP": {
        "description": "Object that represents an IP address.",
        "example": "10.1.2.10",
        "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
        "type": "string"
      },
      "IPv6": {
        "description": "Object that represents an IPv6 address.",
        "example": "2001:db8:0:8d3:0:8a2e:70:7344",
        "pattern": "^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$",
        "type": "string"
      },
      "Image": {
        "description": "Object that represents an Image and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "diskFormat": {
            "$ref": "#/components/schemas/v1DiskFormat"
          },
          "extraSpecs": {
            "$ref": "#/components/schemas/ExtraSpecs"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "minDiskSize": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "minRam": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "protected": {
            "example": false,
            "type": "boolean"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageStatus"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "name",
          "diskFormat"
        ],
        "type": "object"
      },
      "ImageCreateResponse": {
        "description": "Image creation response.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "uploadUrl": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "uploadUrl",
          "id"
        ],
        "type": "object"
      },
      "ImageList": {
        "description": "A list containing image objects.",
        "items": {
          "$ref": "#/components/schemas/Image"
        },
        "type": "array"
      },
      "ImageListResponse": {
        "description": "Image list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ImageList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ImageStatus": {
        "description": "The status of an image object.",
        "example": "AVAILABLE",
        "type": "string"
      },
      "KeyPairList": {
        "description": "A list of key pairs.",
        "items": {
          "$ref": "#/components/schemas/Keypair"
        },
        "type": "array"
      },
      "KeyPairListResponse": {
        "description": "Key pair list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/KeyPairList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Keypair": {
        "description": "Object that represents the public key of a SSH key pair and its name.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "publicKey": {
            "$ref": "#/components/schemas/SSHPublicKey"
          }
        },
        "required": [
          "publicKey"
        ],
        "type": "object"
      },
      "Labels": {
        "description": "Object that represents the labels of an object.",
        "example": {
          "foo": "Foo Value"
        },
        "format": "json",
        "type": "object"
      },
      "MAC": {
        "description": "Object that represents an MAC address.",
        "example": "00:80:41:ae:fd:7e",
        "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
        "type": "string"
      },
      "MachineType": {
        "description": "Machine Type.",
        "example": {
          "description": "small, specific instances with cpu-overcommit. Runs on various Intel CPUs.",
          "disk": 1,
          "extraSpecs": {
            "cpu": "intel-ivybridge-generic",
            "overcommit": "4"
          },
          "id": "25129382-dbe8-43eb-b71b-72253dd69452",
          "name": "t1.1",
          "ram": 512,
          "vcpus": 1
        },
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "disk": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "extraSpecs": {
            "$ref": "#/components/schemas/ExtraSpecs"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "ram": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "vcpus": {
            "$ref": "#/components/schemas/VCPUs"
          }
        },
        "required": [
          "name",
          "ram",
          "disk",
          "vcpus"
        ],
        "type": "object"
      },
      "MachineTypeList": {
        "description": "Machine type list.",
        "items": {
          "$ref": "#/components/schemas/MachineType"
        },
        "type": "array"
      },
      "MachineTypeListResponse": {
        "description": "Machine type list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/MachineTypeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NIC": {
        "description": "Object that represents a network interface.",
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "device": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "mac": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MAC"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "nicSecurity": {
            "default": true,
            "description": "If this is set to false, then no security groups will apply to this network interface.",
            "type": "boolean"
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "status": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "active",
              "down"
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "server",
              "metadata",
              "gateway"
            ]
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "NICList": {
        "description": "A list of network interfaces.",
        "items": {
          "$ref": "#/components/schemas/NIC"
        },
        "type": "array"
      },
      "NICListResponse": {
        "description": "NIC list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NICList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Nameserver": {
        "description": "A list containing DNS Servers/Nameservers for IPv4.",
        "example": [
          "10.20.30.40",
          "50.60.70.80"
        ],
        "items": {
          "$ref": "#/components/schemas/IP"
        },
        "maxItems": 3,
        "type": "array"
      },
      "Nameserverv6": {
        "description": "A list containing DNS Servers/Nameservers for IPv6.",
        "example": [
          "2001:4860:4860::8888",
          "2001:4860:4860::8844"
        ],
        "items": {
          "$ref": "#/components/schemas/IPv6"
        },
        "maxItems": 3,
        "type": "array"
      },
      "Network": {
        "description": "Object that represents a network.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/v1NetworkGateway"
          },
          "name": {
            "example": "My network",
            "type": "string"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "nameserversV6": {
            "$ref": "#/components/schemas/Nameserverv6"
          },
          "networkId": {
            "$ref": "#/components/schemas/UUID"
          },
          "prefixes": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/CIDR"
            },
            "type": "array"
          },
          "prefixesV6": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/CIDR"
            },
            "type": "array"
          },
          "publicIp": {
            "$ref": "#/components/schemas/IP"
          },
          "routed": {
            "$ref": "#/components/schemas/v1Routed"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "networkId",
          "name",
          "state"
        ],
        "type": "object"
      },
      "NetworkArea": {
        "description": "Object that represents a network area.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/UUID"
          },
          "ipv4": {
            "$ref": "#/components/schemas/NetworkAreaIPv4"
          },
          "name": {
            "example": "My network area",
            "type": "string"
          },
          "projectCount": {
            "$ref": "#/components/schemas/ProjectCount"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "areaId",
          "name",
          "projectCount",
          "state"
        ],
        "type": "object"
      },
      "NetworkAreaIPv4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Area"
          },
          {
            "$ref": "#/components/schemas/AreaPrefixConfigIPv4"
          }
        ],
        "description": "The IPv4 properties of a network area."
      },
      "NetworkAreaList": {
        "description": "A list of network areas.",
        "items": {
          "$ref": "#/components/schemas/NetworkArea"
        },
        "type": "array"
      },
      "NetworkAreaListResponse": {
        "description": "Network area list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkAreaList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NetworkList": {
        "description": "A list of networks.",
        "items": {
          "$ref": "#/components/schemas/Network"
        },
        "type": "array"
      },
      "NetworkListResponse": {
        "description": "Network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NetworkRange": {
        "description": "Object that represents a network range.",
        "properties": {
          "networkRangeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "prefix"
        ],
        "type": "object"
      },
      "NetworkRangeList": {
        "description": "A list of network ranges.",
        "items": {
          "$ref": "#/components/schemas/NetworkRange"
        },
        "maxItems": 64,
        "minItems": 1,
        "type": "array"
      },
      "NetworkRangeListResponse": {
        "description": "Network Range list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkRangeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "OpenStackNetwork": {
        "description": "Object that represents a network in OpenStack.",
        "properties": {
          "cidr": {
            "$ref": "#/components/schemas/CIDR"
          },
          "openstackNetworkID": {
            "$ref": "#/components/schemas/UUID"
          },
          "openstackRouterID": {
            "$ref": "#/components/schemas/UUID"
          },
          "openstackSubnetID": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "openstackRouterID",
          "openstackNetworkID",
          "openstackSubnetID",
          "cidr"
        ],
        "type": "object"
      },
      "OpenStackProjectId": {
        "description": "The identifier (ID) of an OpenStack project.",
        "example": "d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 32,
        "minLength": 32,
        "pattern": "^[0-9a-f]{32}$",
        "type": "string"
      },
      "PartialUpdateNetworkAreaPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/UpdateAreaAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "PartialUpdateNetworkPayload": {
        "description": "Object that represents the request body for a network update.",
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/UpdateNetworkAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "routed": {
            "$ref": "#/components/schemas/v1Routed"
          }
        },
        "type": "object"
      },
      "PortRange": {
        "description": "Object that represents a range of ports.",
        "properties": {
          "max": {
            "description": "The maximum port number. Should be greater or equal to the minimum.",
            "example": 22,
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          },
          "min": {
            "description": "The minimum port number. Should be less or equal to the minimum.",
            "example": 22,
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "min",
          "max"
        ],
        "type": "object"
      },
      "Project": {
        "description": "Object that represents a STACKIT project.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/AreaId"
          },
          "internetAccess": {
            "example": false,
            "type": "boolean"
          },
          "openstackProjectId": {
            "$ref": "#/components/schemas/OpenStackProjectId"
          },
          "projectId": {
            "$ref": "#/components/schemas/UUID"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "projectId",
          "areaId",
          "state"
        ],
        "type": "object"
      },
      "ProjectCount": {
        "description": "The amount of projects currently referencing a specific area.",
        "example": 10,
        "minimum": 0,
        "type": "integer"
      },
      "ProjectList": {
        "description": "A list of STACKIT projects.",
        "items": {
          "$ref": "#/components/schemas/UUID"
        },
        "type": "array"
      },
      "ProjectListResponse": {
        "description": "Project list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ProjectList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ProjectMapping": {
        "description": "Mapping from a STACKIT project to an OpenStack project.",
        "properties": {
          "openstackProjectId": {
            "$ref": "#/components/schemas/OpenStackProjectId"
          },
          "projectId": {
            "$ref": "#/components/schemas/UUID"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "projectId",
          "openstackProjectId",
          "status"
        ],
        "type": "object"
      },
      "Protocol": {
        "description": "The protocol number which the rule should match.",
        "example": 1,
        "maximum": 255,
        "minimum": 0,
        "type": "integer"
      },
      "ProtocolName": {
        "description": "The protocol name which the rule should match.",
        "type": "string"
      },
      "PublicIp": {
        "description": "Object that represents a public IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IP"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "networkInterface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "Associate the public IP with a network interface or a virtual IP (ID)."
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "PublicIpList": {
        "description": "A list of public ips.",
        "items": {
          "$ref": "#/components/schemas/PublicIp"
        },
        "type": "array"
      },
      "PublicIpListResponse": {
        "description": "A list of public ips.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/PublicIpList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "PublicNetworkListResponse": {
        "description": "Public network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1PublicNetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Quota": {
        "description": "Object that represents a single resource quota.",
        "properties": {
          "limit": {
            "example": 1338,
            "type": "integer"
          },
          "usage": {
            "example": 17,
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "usage"
        ],
        "type": "object"
      },
      "QuotaList": {
        "description": "Object that represents the quotas for a project.",
        "example": {
          "backupGigabytes": {
            "limit": 100000000,
            "usage": 0
          },
          "backups": {
            "limit": 1000,
            "usage": 0
          },
          "gigabytes": {
            "limit": 1000000000,
            "usage": 69
          },
          "networks": {
            "limit": 1000,
            "usage": 1
          },
          "nics": {
            "limit": 1000,
            "usage": 5
          },
          "publicIps": {
            "limit": 1000,
            "usage": 3
          },
          "ram": {
            "limit": 1000000000,
            "usage": 196608
          },
          "snapshots": {
            "limit": 1000,
            "usage": 0
          },
          "vcpu": {
            "limit": 10000,
            "usage": 48
          },
          "virtualIps": {
            "limit": 1000,
            "usage": 0
          },
          "volumes": {
            "limit": 1000,
            "usage": 3
          }
        },
        "properties": {
          "backupGigabytes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Total size in GiB of backups."
          },
          "backups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of backups."
          },
          "gigabytes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Total size in GiB of volumes and snapshots."
          },
          "networks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of networks."
          },
          "nics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of network interfaces."
          },
          "publicIps": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of public IP addresses."
          },
          "ram": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Amount of server RAM in MiB."
          },
          "snapshots": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of snapshots."
          },
          "vcpu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of server cores."
          },
          "virtualIps": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of virtual IP addresses."
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of volumes."
          }
        },
        "required": [
          "vcpu",
          "ram",
          "volumes",
          "snapshots",
          "backups",
          "gigabytes",
          "backupGigabytes",
          "publicIps",
          "virtualIps",
          "networks",
          "nics"
        ],
        "type": "object"
      },
      "QuotaListResponse": {
        "description": "Quotas list response.",
        "properties": {
          "quotas": {
            "$ref": "#/components/schemas/QuotaList"
          }
        },
        "required": [
          "quotas"
        ],
        "type": "object"
      },
      "Readiness": {
        "description": "Object that represents a readiness probe.",
        "properties": {
          "cacheReadiness": {
            "example": true,
            "type": "boolean"
          },
          "databaseReadiness": {
            "example": true,
            "type": "boolean"
          },
          "messageQueueReadiness": {
            "example": true,
            "type": "boolean"
          },
          "ready": {
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "ready",
          "databaseReadiness",
          "cacheReadiness",
          "messageQueueReadiness"
        ],
        "type": "object"
      },
      "ReqId": {
        "description": "Identifier (ID) representing a single API request.",
        "example": "req-d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^req-[0-9a-f]{32}$",
        "type": "string"
      },
      "Request": {
        "description": "Object that represents a request.",
        "properties": {
          "details": {
            "example": "This worked!",
            "type": "string"
          },
          "requestAction": {
            "$ref": "#/components/schemas/ResourceAction"
          },
          "requestId": {
            "$ref": "#/components/schemas/ReqId"
          },
          "requestType": {
            "$ref": "#/components/schemas/Resource"
          },
          "resources": {
            "example": [
              {
                "id": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "status": "CREATING",
                "type": "SERVER"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RequestResource"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "requestId",
          "requestType",
          "requestAction",
          "resources",
          "status"
        ],
        "type": "object"
      },
      "RequestResource": {
        "description": "Object that represents a resource as part of a request.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          },
          "type": {
            "$ref": "#/components/schemas/Resource"
          }
        },
        "required": [
          "type",
          "id",
          "status"
        ],
        "type": "object"
      },
      "RescueServerPayload": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "image"
        ],
        "type": "object"
      },
      "ResizeServerPayload": {
        "properties": {
          "machineType": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "machineType"
        ],
        "type": "object"
      },
      "ResizeVolumePayload": {
        "properties": {
          "size": {
            "$ref": "#/components/schemas/SizeInGB"
          }
        },
        "required": [
          "size"
        ],
        "type": "object"
      },
      "Resource": {
        "description": "Object that represents a resource type.",
        "example": "SERVER",
        "type": "string"
      },
      "ResourceAction": {
        "description": "Object that represents a resource action.",
        "example": "CREATE",
        "type": "string"
      },
      "ResourceState": {
        "description": "The state of a resource object.",
        "example": "CREATING",
        "type": "string"
      },
      "Route": {
        "description": "Object represents a network route.",
        "properties": {
          "nexthop": {
            "$ref": "#/components/schemas/IP"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          },
          "routeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "prefix",
          "nexthop"
        ],
        "type": "object"
      },
      "RouteList": {
        "description": "A list of routes.",
        "items": {
          "$ref": "#/components/schemas/Route"
        },
        "type": "array"
      },
      "RouteListResponse": {
        "description": "Route list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/RouteList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SSHPublicKey": {
        "description": "Object that represents a public SSH key.",
        "example": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIDsPd27M449akqCtdFg2+AmRVJz6eWio0oMP9dVg7Xe",
        "pattern": "^(ssh-rsa|ssh-ed25519)\\s+[A-Za-z0-9+/]+[=]{0,3}(\\s+.+)?\\s*$",
        "type": "string"
      },
      "SecurityGroup": {
        "description": "Object that represents a security group.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "rules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityGroupRuleList"
              }
            ],
            "readOnly": true
          },
          "stateful": {
            "$ref": "#/components/schemas/Stateful"
          }
        },
        "required": [
          "id",
          "name",
          "rules"
        ],
        "type": "object"
      },
      "SecurityGroupList": {
        "description": "A list containing security group objects.",
        "items": {
          "$ref": "#/components/schemas/SecurityGroup"
        },
        "type": "array"
      },
      "SecurityGroupListResponse": {
        "description": "Security group list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/SecurityGroupList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SecurityGroupRule": {
        "description": "Object that represents a security group rule.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "direction": {
            "description": "The direction of the traffic which the rule should match.",
            "type": "string",
            "x-extensible-enum": [
              "ingress",
              "egress"
            ]
          },
          "ethertype": {
            "default": "IPv4",
            "description": "The ethertype which the rule should match.",
            "type": "string",
            "x-extensible-enum": [
              "IPv4",
              "IPv6"
            ]
          },
          "icmpParameters": {
            "$ref": "#/components/schemas/ICMPParameters"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CIDR"
              }
            ],
            "description": "The remote IP range which the rule should match."
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "portRange": {
            "$ref": "#/components/schemas/PortRange"
          },
          "protocol": {
            "description": "The internet protocol which the rule should match.",
            "properties": {
              "name": {
                "$ref": "#/components/schemas/ProtocolName"
              },
              "protocol": {
                "$ref": "#/components/schemas/Protocol"
              }
            },
            "type": "object"
          },
          "remoteSecurityGroupId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The remote security group which the rule should match."
          },
          "securityGroupId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "direction"
        ],
        "type": "object"
      },
      "SecurityGroupRuleList": {
        "description": "A list containing security group rule objects.",
        "items": {
          "$ref": "#/components/schemas/SecurityGroupRule"
        },
        "type": "array"
      },
      "SecurityGroupRuleListResponse": {
        "description": "Security group rule list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/SecurityGroupRuleList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Server": {
        "description": "Representation of a single server object.",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "bootVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BootVolume"
              }
            ],
            "writeOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "keypair": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "description": "The key pair used during the server creation."
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "launchedAt": {
            "example": "2023-09-22T11:39:48.205Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "machineType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "description": "Name of the machine-type the server shall belong to.",
            "example": "t1.1"
          },
          "maintenanceWindow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerMaintenance"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The initial network for the server creation.",
            "writeOnly": true
          },
          "nics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerNICList"
              }
            ],
            "description": "The list of network interfaces (NICs) attached to the server.",
            "readOnly": true
          },
          "powerStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerPowerStatus"
              }
            ],
            "readOnly": true
          },
          "securityGroups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericNameList"
              }
            ],
            "description": "The list of security groups the server has."
          },
          "serverGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The server group the server is assigned to."
          },
          "serviceAccountMails": {
            "$ref": "#/components/schemas/ServiceAccountMailList"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerStatus"
              }
            ],
            "readOnly": true
          },
          "userData": {
            "$ref": "#/components/schemas/ServerUserData"
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUIDList"
              }
            ],
            "description": "The list of volumes attached to the server."
          }
        },
        "required": [
          "name",
          "network",
          "machineType"
        ],
        "type": "object"
      },
      "ServerConsoleUrl": {
        "description": "Object that represents a server console URL.",
        "example": {
          "url": "https://foo.bar"
        },
        "properties": {
          "url": {
            "example": "https://foo.bar",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "ServerGroup": {
        "description": "Definition of a server group.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "description": "The servers that are part of the server group.",
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "policy": {
            "$ref": "#/components/schemas/ServerGroupPolicy"
          }
        },
        "required": [
          "name",
          "policy"
        ],
        "type": "object"
      },
      "ServerGroupList": {
        "description": "A list of servers-groups.",
        "items": {
          "$ref": "#/components/schemas/ServerGroup"
        },
        "type": "array"
      },
      "ServerGroupListResponse": {
        "description": "Response object for server-group list request.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ServerGroupList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ServerGroupPolicy": {
        "description": "The server group policy.",
        "example": "anti-affinity",
        "type": "string"
      },
      "ServerList": {
        "description": "A list of servers.",
        "items": {
          "$ref": "#/components/schemas/Server"
        },
        "type": "array"
      },
      "ServerListResponse": {
        "description": "Response object for server list request.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ServerList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ServerMaintenance": {
        "description": "Object that represents the information about the next planned server maintenance window.",
        "properties": {
          "details": {
            "example": "cve-1234-0815",
            "type": "string"
          },
          "endsAt": {
            "description": "End of the maintenance window.",
            "example": "2023-09-23T11:39:48.205Z",
            "format": "date-time",
            "type": "string"
          },
          "startsAt": {
            "description": "Start of the maintenance window.",
            "example": "2023-09-22T11:39:48.205Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string",
            "x-extensible-enum": [
              "planned",
              "ongoing"
            ]
          }
        },
        "required": [
          "endsAt",
          "startsAt",
          "status"
        ],
        "type": "object"
      },
      "ServerNICList": {
        "description": "A list of networks attached to a server.",
        "items": {
          "$ref": "#/components/schemas/ServerNetwork"
        },
        "type": "array"
      },
      "ServerName": {
        "description": "The name for a Server.",
        "example": "server1",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "ServerNetwork": {
        "description": "Describes the object that matches servers to its networks.",
        "example": {
          "ipv4": "10.0.0.1",
          "mac": "f4:43:dd:5a:90:c0",
          "networkId": "997ee3ee-e17e-48dd-bf25-34fe5c0bff18",
          "networkName": "My network",
          "nicId": "0507bb7e-9612-40a5-9d5f-bb6aedbce880",
          "publicIp": "192.0.2.1"
        },
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "mac": {
            "$ref": "#/components/schemas/MAC"
          },
          "networkId": {
            "$ref": "#/components/schemas/UUID"
          },
          "networkName": {
            "$ref": "#/components/schemas/GenericName"
          },
          "nicId": {
            "$ref": "#/components/schemas/UUID"
          },
          "publicIp": {
            "$ref": "#/components/schemas/IP"
          }
        },
        "required": [
          "nicId",
          "networkId",
          "networkName",
          "mac"
        ],
        "type": "object"
      },
      "ServerPowerStatus": {
        "description": "The power status of a server.",
        "example": "RUNNING",
        "type": "string"
      },
      "ServerStatus": {
        "description": "The status of a server object.",
        "example": "ACTIVE",
        "type": "string"
      },
      "ServerUserData": {
        "description": "User Data that is provided to the server. Must be base64 encoded and is passed via cloud-init to the server.",
        "example": "IyEvYmluL2Jhc2gKL2Jpbi9zdQplY2hvICJJIGFtIGluIHlvdSEiCg==",
        "format": "byte",
        "type": "string"
      },
      "ServiceAccountMail": {
        "description": "Object that represents an e-mail address of a service account.",
        "example": "example@compute.sa.stackit.cloud",
        "format": "email",
        "pattern": "[a-z0-9-]+(?:\\.[a-z0-9]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
        "type": "string"
      },
      "ServiceAccountMailList": {
        "description": "A list of service account mails.",
        "items": {
          "$ref": "#/components/schemas/ServiceAccountMail"
        },
        "maxItems": 1,
        "type": "array"
      },
      "ServiceAccountMailListResponse": {
        "description": "Service account mail list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ServiceAccountMailList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SizeInGB": {
        "description": "Size in Gigabyte.",
        "example": 1337,
        "type": "integer"
      },
      "SizeInMB": {
        "description": "Size in Megabyte.",
        "example": 1337,
        "type": "integer"
      },
      "Snapshot": {
        "description": "Object that represents a snapshot.",
        "properties": {
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "volumeId"
        ],
        "type": "object"
      },
      "SnapshotList": {
        "description": "A list containing snapshot objects.",
        "items": {
          "$ref": "#/components/schemas/Snapshot"
        },
        "type": "array"
      },
      "SnapshotListResponse": {
        "description": "Snapshot list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/SnapshotList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SnapshotStatus": {
        "description": "The status of a snapshot object.",
        "example": "AVAILABLE",
        "type": "string"
      },
      "Stateful": {
        "default": true,
        "description": "Shows if a security group is stateful or stateless. You can only have one type of security groups per network interface/server.",
        "type": "boolean"
      },
      "StaticAreaID": {
        "description": "The identifier (ID) of a static area.",
        "enum": [
          "PUBLIC",
          "SCHWARZ"
        ],
        "example": "PUBLIC",
        "type": "string"
      },
      "UUID": {
        "description": "Universally Unique Identifier (UUID).",
        "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
        "format": "uuid",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      },
      "UUIDList": {
        "description": "A list of UUIDs.",
        "items": {
          "$ref": "#/components/schemas/UUID"
        },
        "type": "array"
      },
      "UpdateAreaAddressFamily": {
        "description": "The addressFamily object for a area update request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/UpdateAreaIPv4"
          }
        },
        "type": "object"
      },
      "UpdateAreaIPv4": {
        "description": "The update object for a IPv4 network area.",
        "properties": {
          "defaultNameservers": {
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "maxItems": 3,
            "type": "array"
          },
          "defaultPrefixLen": {
            "$ref": "#/components/schemas/AreaDefaultPrefixLengthIPv4"
          },
          "maxPrefixLen": {
            "$ref": "#/components/schemas/AreaMaxPrefixLengthIPv4"
          },
          "minPrefixLen": {
            "$ref": "#/components/schemas/AreaMinPrefixLengthIPv4"
          }
        },
        "type": "object"
      },
      "UpdateAttachedVolumePayload": {
        "description": "Object that represents a Volume attachment to a server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "UpdateImagePayload": {
        "description": "Object that represents an update request body of an Image.",
        "properties": {
          "diskFormat": {
            "$ref": "#/components/schemas/v1DiskFormat"
          },
          "extraSpecs": {
            "$ref": "#/components/schemas/ExtraSpecs"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "minDiskSize": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "minRam": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "protected": {
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateNICPayload": {
        "description": "Object that represents a network interface.",
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "device": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "mac": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MAC"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "nicSecurity": {
            "default": true,
            "description": "If this is set to false, then no security groups will apply to this network interface.",
            "type": "boolean"
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "status": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "active",
              "down"
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "server",
              "metadata",
              "gateway"
            ]
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UpdateNetworkAddressFamily": {
        "description": "The addressFamily object for a network update request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/UpdateNetworkIPv4Body"
          },
          "ipv6": {
            "$ref": "#/components/schemas/UpdateNetworkIPv6Body"
          }
        },
        "type": "object"
      },
      "UpdateNetworkIPv4Body": {
        "description": "The config object for a IPv4 network update.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/v1NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          }
        },
        "type": "object"
      },
      "UpdateNetworkIPv6Body": {
        "description": "The config object for a IPv6 network update.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/v1NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserverv6"
          }
        },
        "type": "object"
      },
      "UpdatePublicIPPayload": {
        "description": "Object that represents a public IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IP"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "networkInterface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "Associate the public IP with a network interface or a virtual IP (ID)."
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UpdateQuotaPayload": {
        "description": "Object that represents an update the quotas for a project.",
        "properties": {
          "backupGigabytes": {
            "description": "Total size in GiB of backups.",
            "type": "integer"
          },
          "backups": {
            "description": "Number of backups.",
            "type": "integer"
          },
          "gigabytes": {
            "description": "Total size in GiB of volumes and snapshots.",
            "type": "integer"
          },
          "networks": {
            "description": "Number of networks.",
            "type": "integer"
          },
          "nics": {
            "description": "Number of network interfaces.",
            "type": "integer"
          },
          "publicIps": {
            "description": "Number of public IP addresses.",
            "type": "integer"
          },
          "ram": {
            "description": "Amount of server RAM in MiB.",
            "type": "integer"
          },
          "snapshots": {
            "description": "Number of snapshots.",
            "type": "integer"
          },
          "vcpu": {
            "description": "Number of server cores.",
            "type": "integer"
          },
          "virtualIps": {
            "description": "Number of virtual IP addresses."
          },
          "volumes": {
            "description": "Number of volumes.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateVirtualIPPayload": {
        "description": "Object that represents a virtual ip.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "network"
        ],
        "type": "object"
      },
      "UpdateVolumePayload": {
        "description": "Object that represents an update request body of a  volume.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "VCPUs": {
        "description": "The number of virtual CPUs of a server.",
        "example": 4,
        "minimum": 1,
        "type": "integer"
      },
      "VirtualIPAddMemberPayload": {
        "description": "Object that represents a virtual ip member.",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "type": "object"
      },
      "VirtualIPRemoveMemberPayload": {
        "description": "Object that represents a virtual ip member.",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "type": "object"
      },
      "VirtualIp": {
        "description": "Object that represents a virtual ip.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "network"
        ],
        "type": "object"
      },
      "VirtualIpList": {
        "description": "A list of virtual ips.",
        "items": {
          "$ref": "#/components/schemas/VirtualIp"
        },
        "type": "array"
      },
      "VirtualIpListResponse": {
        "description": "Virtual ips list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VirtualIpList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Volume": {
        "description": "Object that represents a volume and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "bootable": {
            "default": false,
            "example": true,
            "readOnly": true,
            "type": "boolean"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "encrypted": {
            "default": false,
            "example": true,
            "type": "boolean"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "performanceClass": {
            "$ref": "#/components/schemas/GenericName"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "size": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VolumeSourceImage"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceVolume"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceSnapshot"
              },
              {
                "$ref": "#/components/schemas/VolumeSourceBackup"
              }
            ],
            "writeOnly": true
          },
          "sourceRef": {
            "$ref": "#/components/schemas/VolumeSourceRef"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeStatus"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "availabilityZone"
        ],
        "type": "object"
      },
      "VolumeAttachment": {
        "description": "Object that represents a Volume attachment to a server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "VolumeList": {
        "description": "A list containing volume objects.",
        "items": {
          "$ref": "#/components/schemas/Volume"
        },
        "type": "array"
      },
      "VolumeListResponse": {
        "description": "Volume list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VolumeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VolumePerformanceClass": {
        "description": "Object that represents a Volume performance class.",
        "example": {
          "description": "Performance Class 6 - 5000 IOPS; 200MB throughput.",
          "extraSpecs": {
            "vendor_name": "NetApp"
          },
          "name": "storage_premium_perf6"
        },
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "extraSpecs": {
            "$ref": "#/components/schemas/ExtraSpecs"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "VolumePerformanceClassList": {
        "description": "A list containing Volume performance classes.",
        "items": {
          "$ref": "#/components/schemas/VolumePerformanceClass"
        },
        "type": "array"
      },
      "VolumePerformanceClassListResponse": {
        "description": "Volume performance class list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VolumePerformanceClassList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VolumeSourceBackup": {
        "description": "The volume source type to generate a new volume based on a existing Backup.",
        "properties": {
          "backupId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "backupId"
        ],
        "type": "object"
      },
      "VolumeSourceImage": {
        "description": "The volume source type to generate a new volume based on an image.",
        "properties": {
          "imageId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "imageId"
        ],
        "type": "object"
      },
      "VolumeSourceRef": {
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "snapshot",
              "backup",
              "image",
              "volume"
            ]
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "VolumeSourceSnapshot": {
        "description": "The volume source type to generate a new volume based on a existing Snapshot.",
        "properties": {
          "snapshotId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "snapshotId"
        ],
        "type": "object"
      },
      "VolumeSourceVolume": {
        "description": "The volume source type to generate a new volume by cloning an existing one.",
        "properties": {
          "volumeId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "volumeId"
        ],
        "type": "object"
      },
      "VolumeStatus": {
        "description": "The status of a volume object.",
        "example": "ATTACHED",
        "type": "string"
      },
      "v1DiskFormat": {
        "type": "string"
      },
      "v1Health": {
        "description": "Object that represents a health probe.",
        "properties": {
          "status": {
            "example": "available",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "v1NetworkGateway": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IP"
          }
        ],
        "description": "The gateway of a network. If not specified the first ip of the network will be assigned as the gateway. If 'null' is sent, then the network doesn't have a gateway.",
        "nullable": true
      },
      "v1PublicNetwork": {
        "description": "Public network.",
        "properties": {
          "cidr": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "cidr"
        ],
        "type": "object"
      },
      "v1PublicNetworkList": {
        "description": "A list of public networks.",
        "items": {
          "$ref": "#/components/schemas/v1PublicNetwork"
        },
        "type": "array"
      },
      "v1Routed": {
        "default": true,
        "description": "Shows if the network is routed and therefore accessible from other networks.",
        "example": true,
        "type": "boolean"
      },
      "v1VolumeAttachmentList": {
        "description": "A list containing Volume attachments of a server.",
        "items": {
          "$ref": "#/components/schemas/VolumeAttachment"
        },
        "type": "array"
      },
      "v1VolumeAttachmentListResponse": {
        "description": "Volume attachment list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1VolumeAttachmentList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1alpha1CreateProjectPayload": {
        "description": "The body of a project creation request.",
        "properties": {
          "labels": {
            "properties": {
              "networkArea": {
                "$ref": "#/components/schemas/UUID"
              },
              "scope": {
                "example": "PUBLIC",
                "type": "string"
              }
            },
            "type": "object"
          },
          "organizationId": {
            "$ref": "#/components/schemas/UUID"
          },
          "projectId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "projectId",
          "labels"
        ],
        "type": "object"
      },
      "v1alpha1CreateSnapshotPayload": {
        "description": "Object that represents a snapshot.",
        "properties": {
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "volumeId"
        ],
        "type": "object"
      },
      "v1alpha1UpdateKeypairPayload": {
        "description": "Object that represents an update request body of a public key of a SSH key pair.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          }
        },
        "type": "object"
      },
      "v1alpha1UpdateSecurityGroupPayload": {
        "description": "Object that represents an update request body of a security group.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          }
        },
        "type": "object"
      },
      "v1alpha1UpdateSecurityGroupRulePayload": {
        "description": "Object that represents an update request body of a security group rule.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          }
        },
        "type": "object"
      },
      "v1alpha1UpdateServerGroupPayload": {
        "description": "Object that represents an update request body of a server group.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          }
        },
        "type": "object"
      },
      "v1alpha1UpdateServerPayload": {
        "description": "Object that represents an update request body of a server.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "v1alpha1UpdateSnapshotPayload": {
        "description": "Object that represents an update request body of a snapshot.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-iaas@mail.schwarz",
      "name": "STACKIT IaaS Teams",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "This API allows you to create and modify IaaS resources.",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "IaaS-API",
    "version": "1alpha1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1alpha1/availability-zones": {
      "get": {
        "description": "Get a list of all availability zones.",
        "operationId": "ListAvailabilityZones",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityZoneListResponse"
                }
              }
            },
            "description": "Get a list of availability zones."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all availability zones."
      }
    },
    "/v1alpha1/healthz": {
      "get": {
        "description": "Get Information about the health of the API.",
        "operationId": "Probes_GetHealth",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "status": "available"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Health"
                }
              }
            },
            "description": "A successful health response."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Health."
      }
    },
    "/v1alpha1/networks/public-ip-ranges": {
      "get": {
        "description": "Get a list of all public ip ranges that STACKIT uses.",
        "operationId": "ListPublicIPRanges",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicNetworkListResponse"
                }
              }
            },
            "description": "List public ip ranges."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all public ip ranges."
      }
    },
    "/v1alpha1/openstack-projects/{openStackProjectId}": {
      "get": {
        "description": "Get STACKIT project ID from a OpenStack project ID.",
        "operationId": "v1alpha1GetProjectIDByOSID",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OpenStackProjectId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "projectId": "0582aba2-5977-4cb6-9ec7-616eb39c3f0d"
                },
                "schema": {
                  "properties": {
                    "projectId": {
                      "$ref": "#/components/schemas/UUID"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Show the STACKIT project ID."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get STACKIT project ID."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas": {
      "get": {
        "description": "Get a list of all visible network areas defined in an organization.",
        "operationId": "ListNetworkAreas",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkAreaListResponse"
                }
              }
            },
            "description": "Get a list of all network areas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network areas in an organization."
      },
      "post": {
        "description": "Create a new network area in an organization.",
        "operationId": "CreateNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "defaultNameservers": [
                      "10.1.2.10"
                    ],
                    "defaultPrefixLen": 24,
                    "maxPrefixLen": 28,
                    "minPrefixLen": 22,
                    "networkRanges": [
                      {
                        "prefix": "10.0.0.0/16"
                      }
                    ],
                    "routes": [
                      {
                        "nexthop": "10.1.2.10",
                        "prefix": "192.168.0.0/24"
                      }
                    ],
                    "transferNetwork": "10.1.2.0/24"
                  }
                },
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaPayload"
              }
            }
          },
          "description": "Request an Area creation.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Area has been successfully created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network area in an organization."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}": {
      "delete": {
        "description": "Delete an existing network area in an organization. This is only possible if no projects are using the area anymore.",
        "operationId": "DeleteNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for area has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network area."
      },
      "get": {
        "description": "Get details about a network area in an organization.",
        "operationId": "GetNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Show network area details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network area."
      },
      "patch": {
        "description": "Update the settings of a network area in an organization.",
        "operationId": "PartialUpdateNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "defaultNameservers": [
                      "10.1.2.10"
                    ],
                    "defaultPrefixLen": 24,
                    "maxPrefixLen": 26,
                    "minPrefixLen": 22
                  }
                },
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateNetworkAreaPayload"
              }
            }
          },
          "description": "Request to update an Area.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Area has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network area settings."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/network-ranges": {
      "get": {
        "description": "Get a list of all network ranges in a network area.",
        "operationId": "ListNetworkAreaRanges",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRangeListResponse"
                }
              }
            },
            "description": "List all network ranges."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network ranges in a network area."
      },
      "post": {
        "description": "Create a new network range in an existing network area.",
        "operationId": "CreateNetworkAreaRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ipv4": [
                  {
                    "prefix": "10.1.2.0/24"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaRangePayload"
              }
            }
          },
          "description": "Request an addition of network ranges to an area.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRangeListResponse"
                }
              }
            },
            "description": "Adding network ranges was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network range in a network area."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/network-ranges/{networkRangeId}": {
      "delete": {
        "description": "Delete a network range of a network area. The deletion will fail if the network range is still used.",
        "operationId": "DeleteNetworkAreaRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkRangeID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network range accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network range."
      },
      "get": {
        "description": "Get details about a network range in a network area.",
        "operationId": "GetNetworkAreaRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkRangeID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRange"
                }
              }
            },
            "description": "Show network range details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network range."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/projects": {
      "get": {
        "description": "Get a list of all projects using a network area.",
        "operationId": "ListNetworkAreaProjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            },
            "description": "List projects for a network area."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all projects using a network area."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/routes": {
      "get": {
        "description": "Get a list of all network routes defined in a network area.",
        "operationId": "ListNetworkAreaRoutes",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteListResponse"
                }
              }
            },
            "description": "List network routes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network routes in a network area."
      },
      "post": {
        "description": "Create one or several new network routes in a network area.",
        "operationId": "CreateNetworkAreaRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ipv4": [
                  {
                    "nexthop": "10.1.2.10",
                    "prefix": "192.168.0.0/24"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaRoutePayload"
              }
            }
          },
          "description": "Request an addition of routes to an area.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteListResponse"
                }
              }
            },
            "description": "Create request for network routes accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network routes."
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}": {
      "delete": {
        "description": "Delete a network route of a network area.",
        "operationId": "DeleteNetworkAreaRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1RouteID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for the network route has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network route."
      },
      "get": {
        "description": "Get details about a network route defined in a network area.",
        "operationId": "GetNetworkAreaRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1RouteID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Show route details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network route."
      }
    },
    "/v1alpha1/organizations/{organizationId}/requests/{requestId}": {
      "get": {
        "description": "Lookup an organization request ID from a previous request. This allows to find resource IDs of resources generated during a organization request.",
        "operationId": "GetOrganizationRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1RequestID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "description": "Show organization request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup an organization request ID."
      }
    },
    "/v1alpha1/projects": {
      "put": {
        "description": "Create a STACKIT project.",
        "operationId": "v1alpha1CreateProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1DryRun"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "labels": {
                  "networkArea": "ede29f66-3cd8-4026-b1ec-1586d6e57af6",
                  "scope": "PUBLIC"
                },
                "organizationId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "projectId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "$ref": "#/components/schemas/v1alpha1CreateProjectPayload"
              }
            }
          },
          "description": "Request for a project creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "A successful create response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "A successful response to a dryrun."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create project."
      }
    },
    "/v1alpha1/projects/{projectId}": {
      "get": {
        "description": "Get details about a STACKIT project.",
        "operationId": "GetProjectDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Show project details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get project details."
      }
    },
    "/v1alpha1/projects/{projectId}/backups/{backupId}": {
      "delete": {
        "description": "Delete a backup that is part of the project.",
        "operationId": "DeleteBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1BackupID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1Force"
          }
        ],
        "responses": {
          "202": {
            "description": "Backup delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a backup."
      }
    },
    "/v1alpha1/projects/{projectId}/backups/{backupId}/restore": {
      "post": {
        "description": "Restores a Backup to the existing Volume it references to. The use of this endpoint is disruptive as the volume needs to be detached. If a new volume is to be created use the volumes endpoint with the option to create from backup.",
        "operationId": "RestoreBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1BackupID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Backup restore request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Restore Backup to the referenced source Volume."
      }
    },
    "/v1alpha1/projects/{projectId}/images": {
      "get": {
        "description": "Get a list of all images inside a project.",
        "operationId": "ListImages",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageListResponse"
                }
              }
            },
            "description": "List project images."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all Images inside a project."
      },
      "post": {
        "description": "Create a new Image in a project. This call, if successful, returns a pre-signed URL for the customer to upload the image.",
        "operationId": "CreateImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "allParams": {
                  "value": {
                    "active": true,
                    "diskFormat": "qcow2",
                    "labels": {
                      "foo": "Foo Value"
                    },
                    "minDiskSize": 10,
                    "minRam": 1,
                    "name": "niceImage",
                    "protected": false
                  }
                },
                "minimumParams": {
                  "value": {
                    "diskFormat": "qcow2",
                    "name": "niceImage"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateImagePayload"
              }
            }
          },
          "description": "Request an image creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageCreateResponse"
                }
              }
            },
            "description": "Create request for an Image has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Image."
      }
    },
    "/v1alpha1/projects/{projectId}/images/{imageId}": {
      "delete": {
        "description": "Delete an image that is part of the project.",
        "operationId": "DeleteImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ImageID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Image delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete an Image."
      },
      "get": {
        "description": "Get details about a specific Image inside a project.",
        "operationId": "GetImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ImageID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "Show Image details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about an image."
      },
      "patch": {
        "description": "Update the properties of an existing Image inside a project.",
        "operationId": "UpdateImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ImageID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "minimumParams": {
                  "value": {
                    "name": "fancyNewName"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateImagePayload"
              }
            }
          },
          "description": "Request an Update of an Image.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "Response to update call. Provide the updated image object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update Image Parameters."
      }
    },
    "/v1alpha1/projects/{projectId}/images/{imageId}/sharing": {
      "delete": {
        "description": "Remove all shares of the Image.",
        "operationId": "DeleteImageSharing",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ImageID"
          }
        ],
        "responses": {
          "200": {
            "description": "Image sharing removed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove all Image shares."
      }
    },
    "/v1alpha1/projects/{projectId}/keypairs": {
      "get": {
        "description": "Get a list of all key pairs in a project.",
        "operationId": "ListKeyPairs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyPairListResponse"
                }
              }
            },
            "description": "List key pairs."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all key pairs in a project."
      },
      "post": {
        "description": "Create a new key pair in a project based on provided public key material. The creation will fail if the key pair already exists.",
        "operationId": "CreateKeyPair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyPairPayload"
              }
            }
          },
          "description": "Request a a key pair creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "Key pair creation was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create a key pair."
      }
    },
    "/v1alpha1/projects/{projectId}/keypairs/{keypairName}": {
      "delete": {
        "description": "Delete a key pair from a project.",
        "operationId": "DeleteKeyPair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1KeypairName"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for key pair was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a keypair."
      },
      "get": {
        "description": "Get details about a key pair.",
        "operationId": "GetKeyPair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1KeypairName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "Show key pair details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get key pair details."
      },
      "patch": {
        "description": "Update labels of the keypair.",
        "operationId": "v1alpha1UpdateKeypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1KeypairName"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateKeypairPayload"
              }
            }
          },
          "description": "Request an update of a keypair.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "Update request for keypair accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a keypair."
      }
    },
    "/v1alpha1/projects/{projectId}/machine-types": {
      "get": {
        "description": "Get a list of all machine type available in a project.",
        "operationId": "ListMachineType",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineTypeListResponse"
                }
              }
            },
            "description": "List machineTypes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all machine types available for a project."
      }
    },
    "/v1alpha1/projects/{projectId}/machine-types/{machineType}": {
      "get": {
        "description": "Get details about a specific machine type.",
        "operationId": "GetMachineType",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1MachineTypeName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineType"
                }
              }
            },
            "description": "Show machine type details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a machine type."
      }
    },
    "/v1alpha1/projects/{projectId}/mapping": {
      "get": {
        "deprecated": true,
        "description": "Get the project mapping (STACKIT Project ID \u003c-\u003e OpenStack Project ID) for any project. This endpoint is only temporary and will be removed (DEPRECATED).",
        "operationId": "v1alpha1GetProjectMapping",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMapping"
                }
              }
            },
            "description": "Show the mappings of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get project mapping (DEPRECATED)."
      }
    },
    "/v1alpha1/projects/{projectId}/networks": {
      "get": {
        "description": "Get a list of all networks inside a project.",
        "operationId": "ListNetworks",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkListResponse"
                }
              }
            },
            "description": "List all networks of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all networks inside a project."
      },
      "post": {
        "description": "Create a new network in a project. `nameservers` will be filled from `defaultNameservers` of the respective area if not specified. If the project has `internetAccess` enabled and this is the first network in the project this might incur cost.",
        "operationId": "CreateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "NetworkWithPrefix": {
                  "value": {
                    "addressFamily": {
                      "ipv4": {
                        "nameservers": [
                          "10.1.2.10"
                        ],
                        "prefix": "10.0.3.0/25"
                      }
                    },
                    "name": "My Network"
                  }
                },
                "NetworkWithPrefixLength": {
                  "value": {
                    "addressFamily": {
                      "ipv4": {
                        "nameservers": [
                          "10.1.2.10"
                        ],
                        "prefixLength": 24
                      }
                    },
                    "name": "My Network"
                  }
                },
                "NetworkWithoutPrefixOrPrefixLength": {
                  "value": {
                    "addressFamily": {
                      "ipv4": {
                        "nameservers": [
                          "10.1.2.10"
                        ]
                      }
                    },
                    "name": "My Network"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkPayload"
              }
            }
          },
          "description": "Request a network creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            },
            "description": "Network create has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}": {
      "delete": {
        "description": "Delete a network. If the network is still in use, the deletion will fail.",
        "operationId": "DeleteNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete network."
      },
      "get": {
        "description": "Get details about a network of a project.",
        "operationId": "GetNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            },
            "description": "Show network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get network details."
      },
      "patch": {
        "description": "Update the settings of a network inside a project.",
        "operationId": "PartialUpdateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "nameservers": [
                      "10.1.2.10"
                    ]
                  }
                },
                "name": "My Network"
              },
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateNetworkPayload"
              }
            }
          },
          "description": "Request an update of a network.",
          "required": true
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/UpdateAccepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network settings."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/nics": {
      "get": {
        "description": "Get a list of all network interfaces inside a network.",
        "operationId": "ListNICs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NICListResponse"
                }
              }
            },
            "description": "List project network interfaces."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network interfaces inside a network."
      },
      "post": {
        "description": "Create a new network interface in a project.",
        "operationId": "CreateNIC",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNICPayload"
              }
            }
          },
          "description": "Request a network interface creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Create request for a network interface has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network interface."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/nics/{nicId}": {
      "delete": {
        "description": "Delete a network interface that is part of the project.",
        "operationId": "DeleteNIC",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1NICID"
          }
        ],
        "responses": {
          "202": {
            "description": "Network interface delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network interface."
      },
      "get": {
        "description": "Get details about a network interface inside a network.",
        "operationId": "GetNIC",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1NICID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Show network interface details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network interface."
      },
      "put": {
        "description": "Update the properties of an existing network interface inside a network.",
        "operationId": "UpdateNIC",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1NICID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNICPayload"
              }
            }
          },
          "description": "Request an Update of a network interface.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Network interface has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a network interface."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips": {
      "get": {
        "description": "Get a list of all virtual ips inside a project.",
        "operationId": "ListVirtualIPs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIpListResponse"
                }
              }
            },
            "description": "List project virtual ips."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all virtual ips inside a project."
      },
      "post": {
        "description": "Create a new virtual ip in a project.",
        "operationId": "CreateVirtualIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualIPPayload"
              }
            }
          },
          "description": "Request a virtual ip creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Create request for a virtual ip has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new virtual ip."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips/{virtualIpId}": {
      "delete": {
        "description": "Delete a virtual ip that is part of the project.",
        "operationId": "DeleteVirtualIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1VirtualIPID"
          }
        ],
        "responses": {
          "202": {
            "description": "Virtual IP delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a virtual ip."
      },
      "get": {
        "description": "Get details about a virtual ip inside a project.",
        "operationId": "GetVirtualIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1VirtualIPID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Show virtual ip details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a virtual ip."
      },
      "put": {
        "description": "Update the properties of an existing virtual ip inside a project.",
        "operationId": "UpdateVirtualIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1VirtualIPID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVirtualIPPayload"
              }
            }
          },
          "description": "Request an Update of a virtual IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Virtual IP has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a virtual ip."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips/{virtualIpId}/add-member": {
      "put": {
        "description": "Atomically add a member to the virtual ip.",
        "operationId": "VirtualIPAddMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1VirtualIPID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualIPAddMemberPayload"
              }
            }
          },
          "description": "Request to add a member to a virtual IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Member has been added to the virtual ip."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add a member to the virtual ip."
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips/{virtualIpId}/remove-member": {
      "put": {
        "description": "Atomically remove a member from the virtual ip.",
        "operationId": "VirtualIPRemoveMember",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1VirtualIPID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualIPRemoveMemberPayload"
              }
            }
          },
          "description": "Request to remove a member from a virtual IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Member has been removed from the virtual ip."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove a member from the virtual ip."
      }
    },
    "/v1alpha1/projects/{projectId}/openstack-networks/{networkId}": {
      "get": {
        "deprecated": true,
        "description": "Get OpenStack details about a network (DEPRECATED).",
        "operationId": "v1alpha1GetOpenStackNetworkDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenStackNetwork"
                }
              }
            },
            "description": "Show OpenStack network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get OpenStack network details (DEPRECATED)."
      }
    },
    "/v1alpha1/projects/{projectId}/public-ips": {
      "get": {
        "description": "Get a list of all public ips inside a project.",
        "operationId": "ListPublicIPs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpListResponse"
                }
              }
            },
            "description": "List project public ips."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all public ips inside a project."
      },
      "post": {
        "description": "Create a new public ip in a project.",
        "operationId": "CreatePublicIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicIPPayload"
              }
            }
          },
          "description": "Request a public ip creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIp"
                }
              }
            },
            "description": "Create request for a public ip has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new public ip."
      }
    },
    "/v1alpha1/projects/{projectId}/public-ips/{publicIpId}": {
      "delete": {
        "description": "Delete a public ip that is part of the project.",
        "operationId": "DeletePublicIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1PublicIPID"
          }
        ],
        "responses": {
          "202": {
            "description": "Public IP delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a public ip."
      },
      "get": {
        "description": "Get details about a public ip inside a project.",
        "operationId": "GetPublicIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1PublicIPID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIp"
                }
              }
            },
            "description": "Show public ip details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a public ip."
      },
      "put": {
        "description": "Update the properties of an existing public ip inside a project.",
        "operationId": "UpdatePublicIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1PublicIPID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePublicIPPayload"
              }
            }
          },
          "description": "Request an Update of a public IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIp"
                }
              }
            },
            "description": "Public IP has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a public ip."
      }
    },
    "/v1alpha1/projects/{projectId}/quotas": {
      "get": {
        "description": "List quota limits and usage for project resources.",
        "operationId": "ListQuota",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotaListResponse"
                }
              }
            },
            "description": "List quotas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List project quotas."
      },
      "put": {
        "description": "Quota quota limits for project resources.",
        "operationId": "UpdateQuota",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ram": 1000000000,
                "vcpu": 10000
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateQuotaPayload"
              }
            }
          },
          "description": "Request an update of resource quotas.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotaListResponse"
                }
              }
            },
            "description": "List updated quotas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update project quotas."
      }
    },
    "/v1alpha1/projects/{projectId}/requests/{requestId}": {
      "get": {
        "description": "Lookup a project request ID from a previous request. This allows to find resource IDs of resources generated during a projects request.",
        "operationId": "GetProjectRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1RequestID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "description": "Show project request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup a project request ID."
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups": {
      "get": {
        "description": "Get a list of all security groups inside a project.",
        "operationId": "ListSecurityGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupListResponse"
                }
              }
            },
            "description": "List all security groups of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all security groups inside a project."
      },
      "post": {
        "description": "Create a new security group in a project.",
        "operationId": "CreateSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityGroupPayload"
              }
            }
          },
          "description": "Request a security group creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup"
                }
              }
            },
            "description": "Security group create has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new security group."
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups/{securityGroupId}": {
      "delete": {
        "description": "Delete a security group.",
        "operationId": "DeleteSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for security group has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete security group."
      },
      "get": {
        "description": "Get details about a security group of a project.",
        "operationId": "GetSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup"
                }
              }
            },
            "description": "Show security group details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get security group details."
      },
      "patch": {
        "description": "Update labels of the security group.",
        "operationId": "v1alpha1UpdateSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateSecurityGroupPayload"
              }
            }
          },
          "description": "Request an update of a security group.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup"
                }
              }
            },
            "description": "Update request for security group accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a security group."
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups/{securityGroupId}/rules": {
      "get": {
        "description": "Get a list of all rules inside a security group.",
        "operationId": "ListSecurityGroupRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRuleListResponse"
                }
              }
            },
            "description": "List all rules of a security group."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all rules for a security group."
      },
      "post": {
        "description": "Create a new security group rule in a project.",
        "operationId": "CreateSecurityGroupRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityGroupRulePayload"
              }
            }
          },
          "description": "Request for a security group rule creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRule"
                }
              }
            },
            "description": "Security group rule create has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new security group rule."
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups/{securityGroupId}/rules/{securityGroupRuleId}": {
      "delete": {
        "description": "Delete a security group rule.",
        "operationId": "DeleteSecurityGroupRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupRuleID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for security group rule has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete security group rule."
      },
      "get": {
        "description": "Get details about a security group rule of a project.",
        "operationId": "GetSecurityGroupRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupRuleID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRule"
                }
              }
            },
            "description": "Show security group rule details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get security group rule details."
      },
      "patch": {
        "description": "Update labels of the security group rule.",
        "operationId": "v1alpha1UpdateSecurityGroupRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupRuleID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateSecurityGroupRulePayload"
              }
            }
          },
          "description": "Request an update of a security group rule.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRule"
                }
              }
            },
            "description": "Update request for security group rule accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a security group rule."
      }
    },
    "/v1alpha1/projects/{projectId}/server-groups": {
      "get": {
        "description": "Get the server groups created in a project. Server groups are an indication of locality of a server relative to another group of servers. They can be either running on the same host (affinity) or on different ones (anti-affinity).",
        "operationId": "ListServerGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerGroupListResponse"
                }
              }
            },
            "description": "List server groups."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get the server groups setup for a project."
      },
      "post": {
        "description": "Create a new server server group in the given project ID.",
        "operationId": "CreateServerGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "MyServerGroup",
                "policy": "anti-affinity"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateServerGroupPayload"
              }
            }
          },
          "description": "Request a server group creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerGroup"
                }
              }
            },
            "description": "Server group was created successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create a new server group in a project."
      }
    },
    "/v1alpha1/projects/{projectId}/server-groups/{serverGroupId}": {
      "delete": {
        "description": "Delete a server group in the given project.",
        "operationId": "DeleteServerGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerGroupID"
          }
        ],
        "responses": {
          "202": {
            "description": "A server deletion job was created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a server group in a project."
      },
      "get": {
        "description": "Get the server group created in a project.",
        "operationId": "GetServerGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerGroupID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerGroup"
                }
              }
            },
            "description": "Show server group details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get the server group."
      },
      "patch": {
        "description": "Update labels of the server group.",
        "operationId": "v1alpha1UpdateServerGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerGroupID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateServerGroupPayload"
              }
            }
          },
          "description": "Request an update of a server group.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerGroup"
                }
              }
            },
            "description": "Update request for server group accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a server group."
      }
    },
    "/v1alpha1/projects/{projectId}/servers": {
      "get": {
        "description": "Get a list of all servers inside a project.",
        "operationId": "ListServers",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerListResponse"
                }
              }
            },
            "description": "List all servers of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all servers inside a project."
      },
      "post": {
        "description": "Create a new server in a project.",
        "operationId": "CreateServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "BootFromExistingVolume": {
                  "value": {
                    "bootVolume": {
                      "source": {
                        "volumeId": "70bb02f3-c11b-4321-bd78-8f8f4460f1b3"
                      }
                    },
                    "machineType": "t1.1",
                    "name": "bootFromExistingVolume",
                    "network": "ef018b02-74e9-4f70-87bb-ce1a9742afb9"
                  }
                },
                "BootFromImage": {
                  "value": {
                    "image": "e24b1440-8d9c-431b-8da4-02916720fab5",
                    "machineType": "t1.1",
                    "name": "bootFromImage",
                    "network": "ef018b02-74e9-4f70-87bb-ce1a9742afb9"
                  }
                },
                "BootImageFromVolume": {
                  "value": {
                    "bootVolume": {
                      "size": 10,
                      "source": {
                        "imageId": "e24b1440-8d9c-431b-8da4-02916720fab5"
                      }
                    },
                    "machineType": "t1.1",
                    "name": "bootImageFromVolume",
                    "network": "ef018b02-74e9-4f70-87bb-ce1a9742afb9"
                  }
                },
                "FullExample": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "bootVolume": {
                      "deleteOnTermination": false,
                      "performanceClass": "storage_premium_perf6",
                      "size": 40,
                      "source": {
                        "imageId": "e24b1440-8d9c-431b-8da4-02916720fab5"
                      }
                    },
                    "keypair": "keypair-517e9448-1cf1-4b36-9f29-6e66d669a6d2",
                    "labels": {
                      "foo": "Foo Value"
                    },
                    "machineType": "t1.1",
                    "name": "server1",
                    "network": "ef018b02-74e9-4f70-87bb-ce1a9742afb9",
                    "securityGroups": [
                      "188de165-5767-4fc2-8710-a4d2017249e7"
                    ],
                    "serverGroup": "6cccce46-8a28-4320-89e7-a7636ef03b75",
                    "serviceAccountMails": [
                      "example@compute.sa.stackit.cloud"
                    ],
                    "userData": "IyEvYmluL2Jhc2gKL2Jpbi9zdQplY2hvICJJIGFtIGluIHlvdSEiCg==",
                    "volumes": [
                      "70bb02f3-c11b-4321-bd78-8f8f4460f1b3"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateServerPayload"
              }
            }
          },
          "description": "Request a server creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Create request for server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}": {
      "delete": {
        "description": "Delete a server. Volumes won't be deleted.",
        "operationId": "DeleteServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a server."
      },
      "get": {
        "description": "Get details about a server by its ID.",
        "operationId": "GetServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ServerDetail"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Show server details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server details."
      },
      "patch": {
        "description": "Update name or labels of the server.",
        "operationId": "v1alpha1UpdateServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "ServerLabel": {
                  "value": {
                    "labels": {
                      "foo": "foobar"
                    }
                  }
                },
                "ServerName": {
                  "value": {
                    "name": "abfahrt"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateServerPayload"
              }
            }
          },
          "description": "Request an update of a server.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Update request for Server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/console": {
      "get": {
        "description": "Get a URL for server remote console.",
        "operationId": "GetServerConsole",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerConsoleUrl"
                }
              }
            },
            "description": "Show server console URL."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server console."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/deallocate": {
      "post": {
        "description": "Deallocate an existing server. The server will be removed from the hypervisor so only the volume will be billed.",
        "operationId": "DeallocateServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "description": "Server deallocation request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Deallocate an existing server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/log": {
      "get": {
        "description": "Get server console log.",
        "operationId": "GetServerLog",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "length": 5000
              },
              "schema": {
                "properties": {
                  "length": {
                    "default": 2000,
                    "description": "Set to 0 to retrieve the complete log.",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Request the server log. By default the length is limited to 2000 lines."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "output": "Server Console log\nwith multiple lines"
                  },
                  "properties": {
                    "output": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Show server console log."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server log."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/networks/{networkId}": {
      "delete": {
        "description": "Detach and delete all network interfaces associated with the specified network from the server.",
        "operationId": "DetachServerNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "202": {
            "description": "Detach and delete network interface was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach and delete all network interfaces associated with the specified network."
      },
      "post": {
        "description": "Create and attach a network interface from the specified network to the server.",
        "operationId": "AttachServerNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "202": {
            "description": "Create and attach network interface was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create and attach a network interface from the specified network."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/nics": {
      "get": {
        "description": "Get all network interfaces attached to the server.",
        "operationId": "ListServerNetworkInterfaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NICListResponse"
                }
              }
            },
            "description": "List network interfaces."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get all network interfaces."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/nics/{nicId}": {
      "delete": {
        "description": "Detach a network interface from a server.",
        "operationId": "RemoveNetworkInterfaceFromServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1NICID"
          }
        ],
        "responses": {
          "202": {
            "description": "Network interface detachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a network interface."
      },
      "put": {
        "description": "Attach an existing network interface to a server.",
        "operationId": "AddNetworkInterfaceToServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1NICID"
          }
        ],
        "responses": {
          "202": {
            "description": "Network interface attachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach an existing network interface."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/public-ips/{publicIpId}": {
      "delete": {
        "description": "Dissociate a public IP on an existing server.",
        "operationId": "RemovePublicIpFromServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1PublicIPID"
          }
        ],
        "responses": {
          "200": {
            "description": "Public IP detached from Server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ServerOrPublicIPNotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Dissociate a public IP from a server."
      },
      "put": {
        "description": "Associate a public IP to a server.",
        "operationId": "AddPublicIpToServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1PublicIPID"
          }
        ],
        "responses": {
          "200": {
            "description": "Public IP attached to Server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Associate a public IP to the server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/reboot": {
      "post": {
        "description": "Reboot the server. A soft reboot will attempt to gracefully shut down the server by passing the command to the operating system. A hard reboot will power cycle the server without waiting for the operating system to shutdown properly.",
        "operationId": "RebootServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "description": "Defines if it is a soft or a hard reboot.",
            "example": "soft",
            "in": "query",
            "name": "action",
            "schema": {
              "default": "soft",
              "type": "string",
              "x-extensible-enum": [
                "soft",
                "hard"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Server reboot request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Reboot the server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/rescue": {
      "post": {
        "description": "Rescue an existing server. It is shutdown and the initial image is attached as the boot volume, while the boot volume is attached as secondary volume and the server is booted.",
        "operationId": "RescueServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "image": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "$ref": "#/components/schemas/RescueServerPayload"
              }
            }
          },
          "description": "Request a server rescue.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Server rescue request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Rescue an existing server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/resize": {
      "post": {
        "description": "Resize the server to the given machine type.",
        "operationId": "ResizeServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "machineType": "t1.1"
              },
              "schema": {
                "$ref": "#/components/schemas/ResizeServerPayload"
              }
            }
          },
          "description": "Request a resize of a server.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Server resize was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Resize a server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/security-groups/{securityGroupId}": {
      "delete": {
        "description": "Remove a server from a attached security group.",
        "operationId": "RemoveServerFromSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "202": {
            "description": "Security group detachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove a server from a security group."
      },
      "put": {
        "description": "Add an existing server to an existing security group.",
        "operationId": "AddServerToSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "202": {
            "description": "Security group attachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add a server to a security group."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/service-accounts": {
      "get": {
        "description": "Get the list of the service accounts of the server.",
        "operationId": "ListServerServiceAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountMailListResponse"
                }
              }
            },
            "description": "List service accounts."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all service accounts of the Server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/service-accounts/{serviceAccountMail}": {
      "delete": {
        "description": "Detach an additional service account from the server.",
        "operationId": "RemoveServiceAccountFromServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServiceAccountMail"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountMailListResponse"
                }
              }
            },
            "description": "Service account detached from the server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a service account from a server."
      },
      "put": {
        "description": "Attach an additional service account to the server.",
        "operationId": "AddServiceAccountToServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServiceAccountMail"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountMailListResponse"
                }
              }
            },
            "description": "Service account attached to the server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach service account to a server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/start": {
      "post": {
        "description": "Start an existing server or allocates the server if deallocated.",
        "operationId": "StartServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Server start request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Boot up a server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/stop": {
      "post": {
        "description": "Stops an existing server. The server will remain on the Hypervisor and will be charged full price for all resources attached to it. The attached resources will remain reserved. Useful particularly for vGPU servers.",
        "operationId": "StopServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "description": "Server stop request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Stop an existing server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/unrescue": {
      "post": {
        "description": "Unrescue an existing server. The original boot volume is attached as boot volume of the server and the server is booted up.",
        "operationId": "UnrescueServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Server unrescue request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Unrescue an existing server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/volume-attachments": {
      "get": {
        "description": "Get a list of all volume attachments of a server.",
        "operationId": "ListAttachedVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1VolumeAttachmentListResponse"
                }
              }
            },
            "description": "List volume attachments."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volume attachments of a server."
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/volume-attachments/{volumeId}": {
      "delete": {
        "description": "Detach an existing volume from an existing server.",
        "operationId": "RemoveVolumeFromServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "responses": {
          "202": {
            "description": "Volume detachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a volume from a server."
      },
      "get": {
        "description": "Get the details of an existing Volume Attachment.",
        "operationId": "GetAttachedVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            },
            "description": "Get details about a volume attachment."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Volume Attachment details."
      },
      "patch": {
        "description": "Update the properties of an existing Volume Attachment.",
        "operationId": "UpdateAttachedVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "deleteOnTermination": true
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateAttachedVolumePayload"
              }
            }
          },
          "description": "Request a volume attachment Update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            },
            "description": "Response to update call. Provide the updated volume attachment object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update Volume Attachment Parameters."
      },
      "put": {
        "description": "Attach an existing volume to an existing server.",
        "operationId": "AddVolumeToServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVolumeToServerPayload"
              }
            }
          },
          "description": "Request a volume attachment creation."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            },
            "description": "Volume attachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach a volume to a server."
      }
    },
    "/v1alpha1/projects/{projectId}/snapshots": {
      "get": {
        "description": "Get a list of all snapshots inside a project.",
        "operationId": "v1alpha1ListSnapshotsInProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotListResponse"
                }
              }
            },
            "description": "List project snapshots."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all snapshots inside a project."
      },
      "post": {
        "description": "Create a new Snapshot from a Volume in a project.",
        "operationId": "v1alpha1CreateSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Snapshot": {
                  "value": {
                    "name": "abfahrt",
                    "volumeId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/v1alpha1CreateSnapshotPayload"
              }
            }
          },
          "description": "Request a snapshot creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Create request for Snapshot accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Snapshot."
      }
    },
    "/v1alpha1/projects/{projectId}/snapshots/{snapshotId}": {
      "delete": {
        "description": "Delete a snapshot that is part of the project.",
        "operationId": "v1alpha1DeleteSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1SnapshotID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Snapshot delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a snapshot."
      },
      "get": {
        "description": "Get details about a block device snapshot.",
        "operationId": "v1alpha1GetSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SnapshotID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Show snapshot details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a snapshot."
      },
      "put": {
        "description": "Update information like name or labels of the snapshot.",
        "operationId": "v1alpha1UpdateSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SnapshotID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "SnapshotLabel": {
                  "value": {
                    "labels": {
                      "foo": "foobar"
                    }
                  }
                },
                "SnapshotName": {
                  "value": {
                    "name": "abfahrt"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateSnapshotPayload"
              }
            }
          },
          "description": "Request an update of a snapshot.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Update request for Snapshot accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of the snapshot."
      }
    },
    "/v1alpha1/projects/{projectId}/volume-performance-classes": {
      "get": {
        "description": "Get a list of all volume performance classes available inside a project.",
        "operationId": "ListVolumePerformanceClasses",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumePerformanceClassListResponse"
                }
              }
            },
            "description": "List volume performance classes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volume performance classes available for a project."
      }
    },
    "/v1alpha1/projects/{projectId}/volume-performance-classes/{volumePerformanceClass}": {
      "get": {
        "description": "Get details about a specific volume performance class.",
        "operationId": "GetVolumePerformanceClass",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1VolumePerformanceClassName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumePerformanceClass"
                }
              }
            },
            "description": "Show volume performance-class details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a volume performance class."
      }
    },
    "/v1alpha1/projects/{projectId}/volumes": {
      "get": {
        "description": "Get a list of all volumes inside a project.",
        "operationId": "ListVolumes",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeListResponse"
                }
              }
            },
            "description": "List project volumes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volumes inside a project."
      },
      "post": {
        "description": "Create a new volume in a project. If a volume source is not provided, an empty volume will be created. The size property is required if no source or an image source is provided.",
        "operationId": "CreateVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "EmptyVolume": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "size": 10
                  }
                },
                "Full": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "description": "A cool Volume description.",
                    "name": "VolumeName",
                    "performanceClass": "storage_premium_perf6",
                    "size": 40,
                    "source": {
                      "imageId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                    }
                  }
                },
                "VolumeFromImage": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "size": 10,
                    "source": {
                      "imageId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                    }
                  }
                },
                "VolumeFromVolume": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "source": {
                      "volumeId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateVolumePayload"
              }
            }
          },
          "description": "Request a volume creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "Create request for volume accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new volume."
      }
    },
    "/v1alpha1/projects/{projectId}/volumes/{volumeId}": {
      "delete": {
        "description": "Delete a volume inside a project. The deletion will fail if the volume is still in use.",
        "operationId": "DeleteVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1VolumeID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Volume delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a volume."
      },
      "get": {
        "description": "Get details about a block device volume.",
        "operationId": "GetVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "Show volume details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a volume."
      },
      "patch": {
        "description": "Update name, description or labels of the volume.",
        "operationId": "UpdateVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVolumePayload"
              }
            }
          },
          "description": "Request an update of a volume.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "Update request for volume accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a volume."
      }
    },
    "/v1alpha1/projects/{projectId}/volumes/{volumeId}/resize": {
      "post": {
        "description": "Update the size of a block device volume. The new volume size must be larger than the current size.",
        "operationId": "ResizeVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResizeVolumePayload"
              }
            }
          },
          "description": "Request a volume resize."
        },
        "responses": {
          "202": {
            "description": "Resize request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update the size of a volume."
      }
    },
    "/v1alpha1/readyz": {
      "get": {
        "description": "Get Information about the readiness of the API.",
        "operationId": "Probes_GetReadiness",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "cacheReadiness": true,
                  "databaseReadiness": true,
                  "messageQueueReadiness": true,
                  "ready": true
                },
                "schema": {
                  "$ref": "#/components/schemas/Readiness"
                }
              }
            },
            "description": "Everything is ready."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "content": {
              "application/json": {
                "example": {
                  "cacheReadiness": true,
                  "databaseReadiness": false,
                  "messageQueueReadiness": true,
                  "ready": false
                },
                "schema": {
                  "$ref": "#/components/schemas/Readiness"
                }
              }
            },
            "description": "One or several components of the API are not ready."
          }
        },
        "summary": "Get Readiness."
      }
    }
  },
  "servers": [
    {
      "url": "https://iaas.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": "eu01.",
          "enum": [
            "eu01.",
            "sx-stoi01."
          ]
        }
      }
    }
  ]
}