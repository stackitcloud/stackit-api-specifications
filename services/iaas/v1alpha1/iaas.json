{
  "components": {
    "parameters": {
      "v1AffinityGroupID": {
        "description": "The identifier (ID) of a STACKIT Affinity Group.",
        "in": "path",
        "name": "affinityGroupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1BackupID": {
        "description": "The identifier (ID) of a STACKIT Backup.",
        "in": "path",
        "name": "backupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ConsumerProjectID": {
        "description": "The identifier (ID) of a STACKIT Project that consumes an image share.",
        "in": "path",
        "name": "consumerProjectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1FieldFilter": {
        "description": "Filter resources by fields. A subset of expr-lang is supported. See https://expr-lang.org/docs/language-definition for usage details.",
        "in": "query",
        "name": "filter",
        "schema": {
          "type": "string"
        }
      },
      "v1Force": {
        "description": "Force action.",
        "in": "query",
        "name": "force",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1ImageID": {
        "description": "The identifier (ID) of a STACKIT Image.",
        "in": "path",
        "name": "imageId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1KeypairName": {
        "description": "The name of an SSH keypair.",
        "example": "keypair-123",
        "in": "path",
        "name": "keypairName",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/KeyPairName"
        }
      },
      "v1LabelSelector": {
        "description": "Filter resources by labels.",
        "in": "query",
        "name": "label_selector",
        "schema": {
          "type": "string"
        }
      },
      "v1ListAllImages": {
        "description": "List all Images.",
        "in": "query",
        "name": "all",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1LogLength": {
        "description": "Request the server log. By default the length is limited to 2000 lines. Set to 0 to retrieve the complete log.",
        "in": "query",
        "name": "length",
        "schema": {
          "default": 2000,
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "v1MachineTypeName": {
        "description": "STACKIT machine type Name.",
        "example": "t1.1",
        "in": "path",
        "name": "machineType",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GenericName"
        }
      },
      "v1NICID": {
        "description": "The identifier (ID) of a network interface.",
        "in": "path",
        "name": "nicId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkAreaID": {
        "description": "The identifier (ID) of a STACKIT Network Area.",
        "in": "path",
        "name": "areaId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkID": {
        "description": "The identifier (ID) of a STACKIT Network.",
        "in": "path",
        "name": "networkId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkRangeID": {
        "description": "The identifier (ID) of a STACKIT Network Range.",
        "in": "path",
        "name": "networkRangeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1OrganizationID": {
        "description": "The identifier (ID) of a STACKIT Organization.",
        "in": "path",
        "name": "organizationId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ProjectID": {
        "description": "The identifier (ID) of a STACKIT Project.",
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1PublicIPID": {
        "description": "The identifier (ID) of a Public IP.",
        "in": "path",
        "name": "publicIpId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1RequestID": {
        "description": "The identifier (ID) of a STACKIT Request.",
        "in": "path",
        "name": "requestId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ReqId"
        }
      },
      "v1RouteID": {
        "description": "The identifier (ID) of a STACKIT Route.",
        "in": "path",
        "name": "routeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1SecurityGroupID": {
        "description": "The identifier (ID) of a STACKIT Security Group.",
        "in": "path",
        "name": "securityGroupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1SecurityGroupRuleID": {
        "description": "The identifier (ID) of a STACKIT Security Group Rule.",
        "in": "path",
        "name": "securityGroupRuleId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ServerDetail": {
        "description": "Show detailed information about server.",
        "in": "query",
        "name": "details",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1ServerID": {
        "description": "The identifier (ID) of a STACKIT Server.",
        "in": "path",
        "name": "serverId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ServiceAccountMail": {
        "description": "The e-mail address of a service account.",
        "in": "path",
        "name": "serviceAccountMail",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ServiceAccountMail"
        }
      },
      "v1SnapshotID": {
        "description": "The identifier (ID) of a STACKIT Snapshot.",
        "in": "path",
        "name": "snapshotId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1VirtualIPID": {
        "description": "The identifier (ID) of a Virtual IP.",
        "in": "path",
        "name": "virtualIpId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1VolumeID": {
        "description": "The identifier (ID) of a STACKIT Volume.",
        "in": "path",
        "name": "volumeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1VolumePerformanceClassName": {
        "description": "The name of a STACKIT Volume performance class.",
        "example": "storage_premium_perf6",
        "in": "path",
        "name": "volumePerformanceClass",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/GenericName"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "InvalidAffinityGroupPolicy": {
                "value": {
                  "code": 400,
                  "msg": "The affinity group policy is not supported"
                }
              },
              "InvalidBootDeviceSize": {
                "value": {
                  "code": 400,
                  "msg": "boot device size is not valid or missing"
                }
              },
              "InvalidMachineType": {
                "value": {
                  "code": 400,
                  "msg": "machine type is not valid"
                }
              },
              "InvalidParameter": {
                "value": {
                  "code": 400,
                  "msg": "request body has an error: doesn't match schema: Error at \"/name\": value must be a string"
                }
              },
              "InvalidPublicKey": {
                "value": {
                  "code": 400,
                  "msg": "invalid pubkey"
                }
              },
              "InvalidUUID": {
                "value": {
                  "code": 400,
                  "msg": "invalid uuid"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A bad request."
      },
      "Conflict": {
        "content": {
          "application/json": {
            "example": {
              "code": 409,
              "msg": "Conflict"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A conflict has occurred."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "code": 403,
              "msg": "Forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A request which was forbidden."
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "code": 500,
              "msg": "internal server error"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error, returns a 500 if something is broken on IaaS API Side."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "AreaNotFound": {
                "value": {
                  "code": 404,
                  "msg": "area not found"
                }
              },
              "KeypairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "NetworkNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network not found"
                }
              },
              "NetworkRangeNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network range not found"
                }
              },
              "OrganizationNotFound": {
                "value": {
                  "code": 404,
                  "msg": "organization not found"
                }
              },
              "ProjectNotFound": {
                "value": {
                  "code": 404,
                  "msg": "project not found"
                }
              },
              "RequestNotFound": {
                "value": {
                  "code": 404,
                  "msg": "request not found"
                }
              },
              "RouteNotFound": {
                "value": {
                  "code": 404,
                  "msg": "route not found"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The object was not found."
      },
      "ServerOrPublicIPNotFound": {
        "content": {
          "application/json": {
            "example": {
              "code": 404,
              "msg": "ServerOrPublicIPNotFound"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The server or public IP was not found."
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Too Many Requests."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "code": 401,
              "msg": "Unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "A request which was not authorized."
      },
      "UpdateAccepted": {
        "description": "An update was accepted."
      }
    },
    "schemas": {
      "AddMemberToVirtualIPPayload": {
        "description": "Object that represents a virtual IP member.",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "member"
        ],
        "type": "object"
      },
      "AddVolumeToServerPayload": {
        "description": "Object that represents a Volume attachment to a server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "AffinityGroup": {
        "description": "Definition of an affinity group.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "members": {
            "description": "The servers that are part of the affinity group.",
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "policy": {
            "$ref": "#/components/schemas/AffinityGroupPolicy"
          }
        },
        "required": [
          "name",
          "policy"
        ],
        "type": "object"
      },
      "AffinityGroupList": {
        "description": "A list of affinity groups.",
        "items": {
          "$ref": "#/components/schemas/AffinityGroup"
        },
        "type": "array"
      },
      "AffinityGroupListResponse": {
        "description": "Response object for affinity group list request.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/AffinityGroupList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "AffinityGroupPolicy": {
        "description": "The affinity group policy.\n`hard-affinity`: All servers in this group will be hosted on the same compute node.\n`soft-affinity`: All servers in this group will be hosted on as few compute nodes as possible.\n`hard-anti-affinity`: All servers in this group will be hosted on different compute nodes.\n`soft-anti-affinity`: All servers in this group will be hosted on as many compute nodes as possible.\nPossible values: `hard-anti-affinity`, `hard-affinity`, `soft-anti-affinity`, `soft-affinity`.",
        "example": "hard-anti-affinity",
        "type": "string"
      },
      "AllowedAddresses": {
        "description": "A list of IPs or CIDR notations.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/IP"
            },
            {
              "$ref": "#/components/schemas/CIDR"
            }
          ]
        },
        "type": "array"
      },
      "Area": {
        "description": "The basic properties of a network area.",
        "properties": {
          "defaultNameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/NetworkRangeList"
          },
          "routes": {
            "$ref": "#/components/schemas/RouteList"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "type": "object"
      },
      "AreaConfig": {
        "description": "The basic network area object.",
        "properties": {
          "defaultNameservers": {
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "maxItems": 3,
            "type": "array"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/NetworkRangeList"
          },
          "routes": {
            "$ref": "#/components/schemas/RouteList"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "transferNetwork",
          "networkRanges"
        ],
        "type": "object"
      },
      "AreaDefaultPrefixLengthIPv4": {
        "description": "The default prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "AreaId": {
        "description": "The identifier (ID) of an area.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/UUID"
          },
          {
            "$ref": "#/components/schemas/StaticAreaID"
          }
        ]
      },
      "AreaMaxPrefixLengthIPv4": {
        "description": "The maximal prefix length for networks in the network area.",
        "example": 29,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "AreaMinPrefixLengthIPv4": {
        "description": "The minimal prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 8,
        "type": "integer"
      },
      "AreaPrefixConfigIPv4": {
        "description": "The IPv4 prefix config for a network area.",
        "properties": {
          "defaultPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaDefaultPrefixLengthIPv4"
              }
            ],
            "default": 25
          },
          "maxPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaMaxPrefixLengthIPv4"
              }
            ],
            "default": 29
          },
          "minPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaMinPrefixLengthIPv4"
              }
            ],
            "default": 24
          }
        },
        "type": "object"
      },
      "AvailabilityZone": {
        "description": "Object that represents an availability zone.",
        "example": "eu01-1",
        "type": "string"
      },
      "AvailabilityZoneList": {
        "description": "A list of availability zones.",
        "items": {
          "$ref": "#/components/schemas/AvailabilityZone"
        },
        "type": "array"
      },
      "AvailabilityZoneListResponse": {
        "description": "Availability Zone list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/AvailabilityZoneList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Backup": {
        "description": "Object that represents a backup.",
        "properties": {
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ],
            "readOnly": true
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "readOnly": true
          },
          "snapshotId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackupStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "BackupList": {
        "description": "A list containing backup objects.",
        "items": {
          "$ref": "#/components/schemas/Backup"
        },
        "type": "array"
      },
      "BackupListResponse": {
        "description": "Backup list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/BackupList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "BackupSource": {
        "description": "The source object of a backup.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "$ref": "#/components/schemas/BackupSourceTypes"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "BackupSourceTypes": {
        "description": "The source types of a backup.\nPossible values: `volume`, `snapshot`.",
        "type": "string"
      },
      "BackupStatus": {
        "description": "The status of a backup object.\nPossible values: `AVAILABLE`, `CREATING`, `DELETED`, `DELETING`, `ERROR`, `RESTORING`.",
        "example": "AVAILABLE",
        "type": "string"
      },
      "BaseSecurityGroupRule": {
        "description": "The base schema for a security group rule.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "direction": {
            "description": "The direction of the traffic which the rule should match.",
            "type": "string",
            "x-extensible-enum": [
              "ingress",
              "egress"
            ]
          },
          "ethertype": {
            "default": "IPv4",
            "description": "The ethertype which the rule should match.",
            "type": "string",
            "x-extensible-enum": [
              "IPv4",
              "IPv6"
            ]
          },
          "icmpParameters": {
            "$ref": "#/components/schemas/ICMPParameters"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CIDR"
              }
            ],
            "description": "The remote IP range which the rule should match."
          },
          "portRange": {
            "$ref": "#/components/schemas/PortRange"
          },
          "remoteSecurityGroupId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The remote security group which the rule should match."
          },
          "securityGroupId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "direction"
        ],
        "type": "object"
      },
      "BootVolume": {
        "description": "The boot device for the server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "performanceClass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "writeOnly": true
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "writeOnly": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BootVolumeSource"
              }
            ],
            "writeOnly": true
          }
        },
        "type": "object"
      },
      "BootVolumeSource": {
        "description": "The source object of a boot volume.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "$ref": "#/components/schemas/BootVolumeSourceTypes"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "BootVolumeSourceTypes": {
        "description": "The source types of a boot volume.\nPossible values: `image`, `volume`.",
        "type": "string"
      },
      "CIDR": {
        "description": "Classless Inter-Domain Routing (CIDR).",
        "example": "192.168.0.0/24",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(3[0-2]|2[0-9]|1[0-9]|[0-9]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "CIDRv6": {
        "description": "Classless Inter-Domain Routing (CIDR) for IPv6.",
        "example": "2001:0db8:85a3:0800::/56",
        "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "CreateAffinityGroupPayload": {
        "description": "Definition of an affinity group.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "members": {
            "description": "The servers that are part of the affinity group.",
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "policy": {
            "$ref": "#/components/schemas/AffinityGroupPolicy"
          }
        },
        "required": [
          "name",
          "policy"
        ],
        "type": "object"
      },
      "CreateAreaAddressFamily": {
        "description": "The addressFamily object for a area create request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/CreateAreaIPv4"
          }
        },
        "type": "object"
      },
      "CreateAreaIPv4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AreaConfig"
          },
          {
            "$ref": "#/components/schemas/AreaPrefixConfigIPv4"
          }
        ],
        "description": "The config object for a IPv4 network area."
      },
      "CreateBackupPayload": {
        "description": "Object that represents a backup create request body.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "source": {
            "$ref": "#/components/schemas/BackupSource"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "CreateImagePayload": {
        "description": "Object that represents an Image and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "checksum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageChecksum"
              }
            ],
            "readOnly": true
          },
          "config": {
            "$ref": "#/components/schemas/ImageConfig"
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "diskFormat": {
            "$ref": "#/components/schemas/DiskFormat"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "minDiskSize": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "minRam": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "protected": {
            "example": false,
            "type": "boolean"
          },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageScope"
              }
            ],
            "readOnly": true
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInBytes"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "name",
          "diskFormat"
        ],
        "type": "object"
      },
      "CreateKeyPairPayload": {
        "description": "Object that represents the public key of an SSH keypair and its name.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "fingerprint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyPairFingerprint"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/KeyPairName"
          },
          "publicKey": {
            "$ref": "#/components/schemas/SSHPublicKey"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "publicKey"
        ],
        "type": "object"
      },
      "CreateNetworkAddressFamily": {
        "description": "The addressFamily object for a network create request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/CreateNetworkIPv4Body"
          },
          "ipv6": {
            "$ref": "#/components/schemas/CreateNetworkIPv6Body"
          }
        },
        "type": "object"
      },
      "CreateNetworkAreaPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/CreateAreaAddressFamily"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "name",
          "addressFamily"
        ],
        "type": "object"
      },
      "CreateNetworkAreaRangePayload": {
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/NetworkRangeList"
          }
        },
        "type": "object"
      },
      "CreateNetworkAreaRoutePayload": {
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/RouteList"
          }
        },
        "type": "object"
      },
      "CreateNetworkIPv4Body": {
        "description": "The config object for an IPv4 network.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          },
          "prefixLength": {
            "example": 24,
            "maximum": 29,
            "minimum": 8,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateNetworkIPv6Body": {
        "description": "The config object for an IPv6 network.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserverv6"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDRv6"
          },
          "prefixLength": {
            "example": 64,
            "maximum": 128,
            "minimum": 56,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateNetworkPayload": {
        "description": "Object that represents the request body for a network create.",
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/CreateNetworkAddressFamily"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "routed": {
            "$ref": "#/components/schemas/Routed"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateNicPayload": {
        "description": "Object that represents a network interface.",
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "device": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "mac": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MAC"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "networkId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "nicSecurity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NICSecurity"
              }
            ],
            "default": true
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "status": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "ACTIVE",
              "DOWN"
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "server",
              "metadata",
              "gateway"
            ]
          }
        },
        "type": "object"
      },
      "CreateProtocol": {
        "description": "The schema for a protocol when creating a security group rule.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProtocolNumber"
          },
          {
            "$ref": "#/components/schemas/ProtocolName"
          }
        ]
      },
      "CreatePublicIPPayload": {
        "description": "Object that represents a public IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IP"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "networkInterface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "Associate the public IP with a network interface or a virtual IP (ID).",
            "nullable": true
          }
        },
        "type": "object"
      },
      "CreateSecurityGroupPayload": {
        "description": "Object that represents a security group.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "rules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityGroupRuleList"
              }
            ],
            "readOnly": true
          },
          "stateful": {
            "$ref": "#/components/schemas/Stateful"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CreateSecurityGroupRulePayload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSecurityGroupRule"
          },
          {
            "$ref": "#/components/schemas/CreateSecurityGroupRuleProtocol"
          }
        ],
        "description": "Object that represents a request body for security group rule creation."
      },
      "CreateSecurityGroupRuleProtocol": {
        "description": "The internet protocol which the rule should match.",
        "properties": {
          "protocol": {
            "$ref": "#/components/schemas/CreateProtocol"
          }
        },
        "type": "object"
      },
      "CreateServerNetworking": {
        "additionalProperties": false,
        "description": "The initial networking setup for the server creation with a network.",
        "properties": {
          "networkId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "type": "object"
      },
      "CreateServerNetworkingWithNics": {
        "additionalProperties": false,
        "description": "The initial networking setup for the server creation with a network interface.",
        "properties": {
          "nicIds": {
            "$ref": "#/components/schemas/UUIDList"
          }
        },
        "type": "object"
      },
      "CreateServerPayload": {
        "description": "Representation of a single server object.",
        "properties": {
          "affinityGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The affinity group the server is assigned to."
          },
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ],
            "description": "This is the availability zone requested during server creation. If none is provided during the creation request and an existing volume will be used as boot volume it will be set to the same availability zone as the volume. For requests with no volumes involved it will be set to the metro availability zone."
          },
          "bootVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BootVolume"
              }
            ]
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "errorMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorMessage"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "imageId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "keypairName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyPairName"
              }
            ],
            "description": "The SSH keypair used during the server creation."
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "launchedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LaunchedAt"
              }
            ],
            "readOnly": true
          },
          "machineType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "description": "Name of the machine type the server shall belong to.",
            "example": "t1.1"
          },
          "maintenanceWindow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerMaintenance"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          },
          "networking": {
            "description": "The initial networking setup for the server creation. A network, a nic or nothing can be given.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateServerNetworking"
              },
              {
                "$ref": "#/components/schemas/CreateServerNetworkingWithNics"
              }
            ]
          },
          "nics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerNICList"
              }
            ],
            "description": "The list of network interfaces (NICs) attached to the server. Only shown when detailed information is requested.",
            "readOnly": true
          },
          "powerStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerPowerStatus"
              }
            ],
            "readOnly": true
          },
          "securityGroups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericNameList"
              }
            ],
            "description": "The initial security groups for the server creation.",
            "writeOnly": true
          },
          "serviceAccountMails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceAccountMailList"
              }
            ],
            "description": "A list of service account mails. Only shown when detailed information is requested."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          },
          "userData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerUserData"
              }
            ],
            "description": "User Data that is provided to the server. Must be base64 encoded and is passed via cloud-init to the server. Only shown when detailed information is requested."
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUIDList"
              }
            ],
            "description": "The list of volumes attached to the server."
          }
        },
        "required": [
          "name",
          "machineType"
        ],
        "type": "object"
      },
      "CreateSnapshotPayload": {
        "description": "Object that represents a snapshot.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "volumeId"
        ],
        "type": "object"
      },
      "CreateVirtualIPPayload": {
        "description": "Object that represents a virtual IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceState"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "CreateVolumePayload": {
        "description": "Object that represents a volume and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "bootable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeBootable"
              }
            ]
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "imageConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageConfig"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "performanceClass": {
            "$ref": "#/components/schemas/GenericName"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "size": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "source": {
            "$ref": "#/components/schemas/VolumeSource"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "availabilityZone"
        ],
        "type": "object"
      },
      "CreatedAt": {
        "description": "Date-time when resource was created.",
        "example": "2017-07-21T17:32:28Z",
        "format": "date-time",
        "type": "string"
      },
      "DeleteOnTermination": {
        "description": "Delete the volume during the termination of the server. Defaults to false.",
        "type": "boolean"
      },
      "Description": {
        "description": "Description Object. Allows string up to 127 Characters.",
        "example": "cool description dude. Wanna play some Snakeybus?",
        "maxLength": 127,
        "type": "string"
      },
      "DiskFormat": {
        "description": "Object that represents a disk format.\nPossible values: `raw`, `qcow2`, `iso`.",
        "type": "string"
      },
      "Error": {
        "description": "Error with HTTP error code and an error message.",
        "properties": {
          "code": {
            "example": 404,
            "format": "int64",
            "type": "integer"
          },
          "msg": {
            "$ref": "#/components/schemas/errorMessage"
          }
        },
        "required": [
          "code",
          "msg"
        ],
        "type": "object"
      },
      "ExtraSpecs": {
        "description": "Properties to control certain aspects or scheduling behavior for an object.",
        "example": {
          "os_distro": "arch"
        },
        "format": "json",
        "type": "object"
      },
      "GenericName": {
        "description": "The name for a General Object. Matches Names and also UUIDs.",
        "example": "objectName26",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|_|\\s|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "GenericNameList": {
        "description": "A list of General Objects.",
        "items": {
          "$ref": "#/components/schemas/GenericName"
        },
        "type": "array"
      },
      "ICMPParameters": {
        "description": "Object that represents ICMP parameters.",
        "properties": {
          "code": {
            "description": "ICMP code. Can be set if the protocol is ICMP.",
            "example": 0,
            "format": "int64",
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "description": "ICMP type. Can be set if the protocol is ICMP.",
            "example": 8,
            "format": "int64",
            "maximum": 255,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "type",
          "code"
        ],
        "type": "object"
      },
      "IOPS": {
        "description": "Input/Output Operations per second.",
        "example": 5000,
        "format": "int64",
        "type": "integer"
      },
      "IP": {
        "description": "Object that represents an IP address.",
        "example": "10.1.2.10",
        "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
        "type": "string"
      },
      "IPv6": {
        "description": "Object that represents an IPv6 address.",
        "example": "2001:db8:0:8d3:0:8a2e:70:7344",
        "pattern": "^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$",
        "type": "string"
      },
      "Image": {
        "description": "Object that represents an Image and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "checksum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageChecksum"
              }
            ],
            "readOnly": true
          },
          "config": {
            "$ref": "#/components/schemas/ImageConfig"
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "diskFormat": {
            "$ref": "#/components/schemas/DiskFormat"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "minDiskSize": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "minRam": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "protected": {
            "example": false,
            "type": "boolean"
          },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageScope"
              }
            ],
            "readOnly": true
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInBytes"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "name",
          "diskFormat"
        ],
        "type": "object"
      },
      "ImageChecksum": {
        "description": "Representation of an image checksum.",
        "example": {
          "algorithm": "sha512",
          "digest": "48c4b0c65baac295e206adb6be455896374fb59812e009345b7e2693b706671c455a2ebd8cfa741f4be27deba37defad5c84cfe6f09d592bc03122422ed9349e"
        },
        "properties": {
          "algorithm": {
            "description": "Algorithm for the checksum of the image data.",
            "example": "sha512",
            "type": "string",
            "x-extensible-enum": [
              "md5",
              "sha512"
            ]
          },
          "digest": {
            "description": "Hexdigest of the checksum of the image data.",
            "example": "48c4b0c65baac295e206adb6be455896374fb59812e009345b7e2693b706671c455a2ebd8cfa741f4be27deba37defad5c84cfe6f09d592bc03122422ed9349e",
            "pattern": "^[0-9a-f]+$",
            "type": "string"
          }
        },
        "required": [
          "algorithm",
          "digest"
        ],
        "type": "object"
      },
      "ImageConfig": {
        "description": "Properties to set hardware and scheduling settings for an Image.",
        "properties": {
          "architecture": {
            "description": "Represents CPU architecture. The default for new images is x86.",
            "type": "string",
            "x-extensible-enum": [
              "arm64",
              "x86"
            ]
          },
          "bootMenu": {
            "description": "Enables the BIOS bootmenu. The default for new images is disabled.",
            "type": "boolean"
          },
          "cdromBus": {
            "description": "Sets CDROM bus controller type.",
            "nullable": true,
            "type": "string",
            "x-extensible-enum": [
              "scsi",
              "virtio",
              "ide",
              "usb"
            ]
          },
          "diskBus": {
            "description": "Sets Disk bus controller type.",
            "nullable": true,
            "type": "string",
            "x-extensible-enum": [
              "scsi",
              "virtio",
              "ide",
              "usb"
            ]
          },
          "nicModel": {
            "description": "Sets virtual nic model.",
            "nullable": true,
            "type": "string",
            "x-extensible-enum": [
              "e1000",
              "e1000e",
              "ne2k_pci",
              "pcnet",
              "rtl8139",
              "virtio",
              "vmxnet3"
            ]
          },
          "operatingSystem": {
            "description": "Enables OS specific optimizations.",
            "type": "string",
            "x-extensible-enum": [
              "windows",
              "linux"
            ]
          },
          "operatingSystemDistro": {
            "description": "Operating System Distribution.",
            "nullable": true,
            "type": "string"
          },
          "operatingSystemVersion": {
            "description": "Version of the OS.",
            "nullable": true,
            "type": "string"
          },
          "rescueBus": {
            "description": "Sets the device bus when the image is used as a rescue image.",
            "nullable": true,
            "type": "string",
            "x-extensible-enum": [
              "sata",
              "scsi",
              "virtio",
              "usb"
            ]
          },
          "rescueDevice": {
            "description": "Sets the device when the image is used as a rescue image.",
            "nullable": true,
            "type": "string",
            "x-extensible-enum": [
              "cdrom",
              "disk"
            ]
          },
          "secureBoot": {
            "description": "Enables Secure Boot. The default for new images is disabled.",
            "type": "boolean"
          },
          "uefi": {
            "description": "Configure UEFI boot. The default for new images is enabled.",
            "type": "boolean"
          },
          "videoModel": {
            "description": "Sets Graphic device model.",
            "nullable": true,
            "type": "string",
            "x-extensible-enum": [
              "vga",
              "cirrus",
              "vmvga",
              "qxl",
              "virtio",
              "none"
            ]
          },
          "virtioScsi": {
            "description": "Enables the use of VirtIO SCSI to provide block device access. By default servers use VirtIO Block.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ImageCreateResponse": {
        "description": "Image creation response.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "uploadUrl": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "uploadUrl",
          "id"
        ],
        "type": "object"
      },
      "ImageList": {
        "description": "A list containing image objects.",
        "items": {
          "$ref": "#/components/schemas/Image"
        },
        "type": "array"
      },
      "ImageListResponse": {
        "description": "Image list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ImageList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ImageScope": {
        "description": "Scope of an Image.\nPossible values: `public`, `local`, `projects`, `organization`.",
        "example": "local",
        "type": "string"
      },
      "ImageShare": {
        "description": "Share details of an Image. For requests ParentOrganization and Projects are mutually exclusive.",
        "properties": {
          "parentOrganization": {
            "description": "Image is shared with all projects inside the image owners organization.",
            "type": "boolean"
          },
          "projects": {
            "description": "List of all projects the Image is shared with.",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array"
          }
        }
      },
      "ImageShareConsumer": {
        "description": "The details of an Image share consumer.",
        "properties": {
          "consumerProjectId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "imageId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        }
      },
      "ImageStatus": {
        "description": "The status of an image object.\nPossible values: `AVAILABLE`, `CREATING`, `DEACTIVATED`, `DELETED`, `DELETING`, `ERROR`.",
        "example": "AVAILABLE",
        "type": "string"
      },
      "KeyPairFingerprint": {
        "description": "Object that represents an SSH keypair MD5 fingerprint.",
        "example": "de:ad:be:ef:de:ad:be:ef:de:ad:be:ef:de:ad:be:ef",
        "maxLength": 47,
        "minLength": 47,
        "pattern": "^([0-9A-Fa-f]{2}[:-]){15}([0-9A-Fa-f]{2})$",
        "type": "string"
      },
      "KeyPairList": {
        "description": "A list of SSH keypairs.",
        "items": {
          "$ref": "#/components/schemas/Keypair"
        },
        "type": "array"
      },
      "KeyPairListResponse": {
        "description": "SSH keypair list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/KeyPairList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "KeyPairName": {
        "description": "The name of an SSH keypair. Allowed characters are letters [a-zA-Z], digits [0-9] and the following special characters: [@._-].",
        "example": "schluesselbaer26",
        "maxLength": 127,
        "pattern": "^[A-Za-z0-9@._-]*$",
        "type": "string"
      },
      "Keypair": {
        "description": "Object that represents the public key of an SSH keypair and its name.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "fingerprint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyPairFingerprint"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/KeyPairName"
          },
          "publicKey": {
            "$ref": "#/components/schemas/SSHPublicKey"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "publicKey"
        ],
        "type": "object"
      },
      "Labels": {
        "description": "Object that represents the labels of an object. Regex for keys: `^[a-z]((-|_|[a-z0-9])){0,62}$`. Regex for values: `^(-|_|[a-z0-9]){0,63}$`.",
        "example": {
          "key": "value"
        },
        "format": "json",
        "type": "object"
      },
      "LaunchedAt": {
        "description": "Date-time when resource was launched.",
        "example": "2023-09-22T11:39:48Z",
        "format": "date-time",
        "type": "string"
      },
      "MAC": {
        "description": "Object that represents an MAC address.",
        "example": "00:80:41:ae:fd:7e",
        "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
        "type": "string"
      },
      "MachineType": {
        "description": "Machine Type. Filterable Fields: `disk`, `extraSpecs`, `name`, `ram`, `vcpus`.",
        "example": {
          "description": "small, specific servers with cpu-overcommit. Runs on various Intel CPUs.",
          "disk": 1,
          "extraSpecs": {
            "cpu": "intel-ivybridge-generic",
            "overcommit": "4"
          },
          "id": "25129382-dbe8-43eb-b71b-72253dd69452",
          "name": "t1.1",
          "ram": 512,
          "vcpus": 1
        },
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "disk": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "x-oapi-codegen-extra-tags": {
              "expr": "disk"
            }
          },
          "extraSpecs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraSpecs"
              }
            ],
            "x-oapi-codegen-extra-tags": {
              "expr": "extraSpecs"
            }
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "x-oapi-codegen-extra-tags": {
              "expr": "name"
            }
          },
          "ram": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInMB"
              }
            ],
            "x-oapi-codegen-extra-tags": {
              "expr": "ram"
            }
          },
          "vcpus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VCPUs"
              }
            ],
            "x-oapi-codegen-extra-tags": {
              "expr": "vcpus"
            }
          }
        },
        "required": [
          "name",
          "ram",
          "disk",
          "vcpus"
        ],
        "type": "object"
      },
      "MachineTypeList": {
        "description": "Machine type list.",
        "items": {
          "$ref": "#/components/schemas/MachineType"
        },
        "type": "array"
      },
      "MachineTypeListResponse": {
        "description": "Machine type list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/MachineTypeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NIC": {
        "description": "Object that represents a network interface.",
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "device": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "mac": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MAC"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "networkId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "nicSecurity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NICSecurity"
              }
            ],
            "default": true
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "status": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "ACTIVE",
              "DOWN"
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string",
            "x-extensible-enum": [
              "server",
              "metadata",
              "gateway"
            ]
          }
        },
        "type": "object"
      },
      "NICList": {
        "description": "A list of network interfaces.",
        "items": {
          "$ref": "#/components/schemas/NIC"
        },
        "type": "array"
      },
      "NICListResponse": {
        "description": "NIC list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NICList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NICSecurity": {
        "description": "If this is set to false, then no security groups will apply to this network interface.",
        "type": "boolean"
      },
      "Nameserver": {
        "description": "A list containing DNS Servers/Nameservers for IPv4.",
        "example": [
          "10.20.30.40",
          "50.60.70.80"
        ],
        "items": {
          "$ref": "#/components/schemas/IP"
        },
        "maxItems": 3,
        "type": "array"
      },
      "Nameserverv6": {
        "description": "A list containing DNS Servers/Nameservers for IPv6.",
        "example": [
          "2001:4860:4860::8888",
          "2001:4860:4860::8844"
        ],
        "items": {
          "$ref": "#/components/schemas/IPv6"
        },
        "maxItems": 3,
        "type": "array"
      },
      "Network": {
        "description": "Object that represents a network.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "gateway": {
            "$ref": "#/components/schemas/NetworkGateway"
          },
          "gatewayv6": {
            "$ref": "#/components/schemas/NetworkGateway"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "example": "My network",
            "type": "string"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "nameserversV6": {
            "$ref": "#/components/schemas/Nameserverv6"
          },
          "networkId": {
            "$ref": "#/components/schemas/UUID"
          },
          "prefixes": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/CIDR"
            },
            "type": "array"
          },
          "prefixesV6": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/CIDR"
            },
            "type": "array"
          },
          "publicIp": {
            "$ref": "#/components/schemas/IP"
          },
          "routed": {
            "$ref": "#/components/schemas/Routed"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "networkId",
          "name",
          "state"
        ],
        "type": "object"
      },
      "NetworkArea": {
        "description": "Object that represents a network area.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "ipv4": {
            "$ref": "#/components/schemas/NetworkAreaIPv4"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "example": "My network area",
            "type": "string"
          },
          "projectCount": {
            "$ref": "#/components/schemas/ProjectCount"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "areaId",
          "name",
          "projectCount",
          "state"
        ],
        "type": "object"
      },
      "NetworkAreaIPv4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Area"
          },
          {
            "$ref": "#/components/schemas/AreaPrefixConfigIPv4"
          }
        ],
        "description": "The IPv4 properties of a network area."
      },
      "NetworkAreaList": {
        "description": "A list of network areas.",
        "items": {
          "$ref": "#/components/schemas/NetworkArea"
        },
        "type": "array"
      },
      "NetworkAreaListResponse": {
        "description": "Network area list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkAreaList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NetworkGateway": {
        "description": "The gateway of a network. If not specified the first IP of the network will be assigned as the gateway. If 'null' is sent, then the network doesn't have a gateway.",
        "example": "10.1.2.1",
        "nullable": true,
        "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
        "type": "string"
      },
      "NetworkList": {
        "description": "A list of networks.",
        "items": {
          "$ref": "#/components/schemas/Network"
        },
        "type": "array"
      },
      "NetworkListResponse": {
        "description": "Network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NetworkRange": {
        "description": "Object that represents a network range.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "networkRangeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "prefix"
        ],
        "type": "object"
      },
      "NetworkRangeList": {
        "description": "A list of network ranges.",
        "items": {
          "$ref": "#/components/schemas/NetworkRange"
        },
        "maxItems": 64,
        "minItems": 1,
        "type": "array"
      },
      "NetworkRangeListResponse": {
        "description": "Network Range list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkRangeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "OpenStackProjectId": {
        "description": "The identifier (ID) of an OpenStack project.",
        "example": "d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 32,
        "minLength": 32,
        "pattern": "^[0-9a-f]{32}$",
        "type": "string"
      },
      "PartialUpdateNetworkAreaPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/UpdateAreaAddressFamily"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "PartialUpdateNetworkPayload": {
        "description": "Object that represents the request body for a network update.",
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/UpdateNetworkAddressFamily"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "routed": {
            "$ref": "#/components/schemas/Routed"
          }
        },
        "type": "object"
      },
      "PortRange": {
        "description": "Object that represents a range of ports.",
        "properties": {
          "max": {
            "description": "The maximum port number. Should be greater or equal to the minimum.",
            "example": 22,
            "format": "int64",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          },
          "min": {
            "description": "The minimum port number. Should be less or equal to the maximum.",
            "example": 22,
            "format": "int64",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "min",
          "max"
        ],
        "type": "object"
      },
      "Project": {
        "description": "Object that represents a STACKIT project.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/AreaId"
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "internetAccess": {
            "example": false,
            "type": "boolean"
          },
          "openstackProjectId": {
            "$ref": "#/components/schemas/OpenStackProjectId"
          },
          "projectId": {
            "$ref": "#/components/schemas/UUID"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "projectId",
          "areaId",
          "state"
        ],
        "type": "object"
      },
      "ProjectCount": {
        "description": "The amount of projects currently referencing a specific area.",
        "example": 10,
        "format": "int64",
        "minimum": 0,
        "type": "integer"
      },
      "ProjectList": {
        "description": "A list of STACKIT projects.",
        "items": {
          "$ref": "#/components/schemas/UUID"
        },
        "type": "array"
      },
      "ProjectListResponse": {
        "description": "Project list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ProjectList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Protocol": {
        "description": "The schema for a protocol of a security group rule.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ProtocolName"
          },
          "number": {
            "$ref": "#/components/schemas/ProtocolNumber"
          }
        },
        "type": "object"
      },
      "ProtocolName": {
        "description": "The protocol name which the rule should match.\nPossible values: `ah`, `dccp`, `egp`, `esp`, `gre`, `icmp`, `igmp`, `ipip`, `ipv6-encap`, `ipv6-frag`, `ipv6-icmp`, `ipv6-nonxt`, `ipv6-opts`, `ipv6-route`, `ospf`, `pgm`, `rsvp`, `sctp`, `tcp`, `udp`, `udplite`, `vrrp`.",
        "type": "string"
      },
      "ProtocolNumber": {
        "description": "The protocol number which the rule should match.",
        "example": 1,
        "format": "int64",
        "maximum": 255,
        "minimum": 0,
        "type": "integer"
      },
      "PublicIp": {
        "description": "Object that represents a public IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IP"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "networkInterface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "Associate the public IP with a network interface or a virtual IP (ID).",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PublicIpList": {
        "description": "A list of public IPs.",
        "items": {
          "$ref": "#/components/schemas/PublicIp"
        },
        "type": "array"
      },
      "PublicIpListResponse": {
        "description": "Public IP list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/PublicIpList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "PublicNetwork": {
        "description": "Public network.",
        "properties": {
          "cidr": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "cidr"
        ],
        "type": "object"
      },
      "PublicNetworkList": {
        "description": "A list of public networks.",
        "items": {
          "$ref": "#/components/schemas/PublicNetwork"
        },
        "type": "array"
      },
      "PublicNetworkListResponse": {
        "description": "Public network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/PublicNetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Quota": {
        "description": "Object that represents a single resource quota.",
        "properties": {
          "limit": {
            "example": 1338,
            "format": "int64",
            "type": "integer"
          },
          "usage": {
            "example": 17,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "usage"
        ],
        "type": "object"
      },
      "QuotaList": {
        "description": "Object that represents the quotas for a project.",
        "example": {
          "backupGigabytes": {
            "limit": 100000000,
            "usage": 0
          },
          "backups": {
            "limit": 1000,
            "usage": 0
          },
          "gigabytes": {
            "limit": 1000000000,
            "usage": 69
          },
          "networks": {
            "limit": 1000,
            "usage": 1
          },
          "nics": {
            "limit": 1000,
            "usage": 5
          },
          "publicIps": {
            "limit": 1000,
            "usage": 3
          },
          "ram": {
            "limit": 1000000000,
            "usage": 196608
          },
          "securityGroupRules": {
            "limit": 100,
            "usage": 10
          },
          "securityGroups": {
            "limit": 10,
            "usage": 5
          },
          "snapshots": {
            "limit": 1000,
            "usage": 0
          },
          "vcpu": {
            "limit": 10000,
            "usage": 48
          },
          "volumes": {
            "limit": 1000,
            "usage": 3
          }
        },
        "properties": {
          "backupGigabytes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Total size in GiB of backups."
          },
          "backups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of backups."
          },
          "gigabytes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Total size in GiB of volumes and snapshots."
          },
          "networks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of networks."
          },
          "nics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of network interfaces."
          },
          "publicIps": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of public IP addresses."
          },
          "ram": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Amount of server RAM in MiB."
          },
          "securityGroupRules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of security group rules."
          },
          "securityGroups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of security groups."
          },
          "snapshots": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of snapshots."
          },
          "vcpu": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of server cores."
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Quota"
              }
            ],
            "description": "Number of volumes."
          }
        },
        "required": [
          "vcpu",
          "ram",
          "volumes",
          "snapshots",
          "backups",
          "gigabytes",
          "backupGigabytes",
          "publicIps",
          "networks",
          "nics",
          "securityGroups",
          "securityGroupRules"
        ],
        "type": "object"
      },
      "QuotaListResponse": {
        "description": "Quotas list response.",
        "properties": {
          "quotas": {
            "$ref": "#/components/schemas/QuotaList"
          }
        },
        "required": [
          "quotas"
        ],
        "type": "object"
      },
      "RemoveMemberFromVirtualIPPayload": {
        "description": "Object that represents a virtual IP member.",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "member"
        ],
        "type": "object"
      },
      "ReqId": {
        "description": "Identifier (ID) representing a single API request.",
        "example": "req-d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^req-[0-9a-f]{32}$",
        "type": "string"
      },
      "Request": {
        "description": "Object that represents a request.",
        "properties": {
          "details": {
            "example": "This worked!",
            "type": "string"
          },
          "requestAction": {
            "$ref": "#/components/schemas/ResourceAction"
          },
          "requestId": {
            "$ref": "#/components/schemas/ReqId"
          },
          "requestType": {
            "$ref": "#/components/schemas/Resource"
          },
          "resources": {
            "example": [
              {
                "id": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "status": "CREATING",
                "type": "SERVER"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RequestResource"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "requestId",
          "requestType",
          "requestAction",
          "resources",
          "status"
        ],
        "type": "object"
      },
      "RequestResource": {
        "description": "Object that represents a resource as part of a request.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          },
          "type": {
            "$ref": "#/components/schemas/Resource"
          }
        },
        "required": [
          "type",
          "id",
          "status"
        ],
        "type": "object"
      },
      "RescueServerPayload": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "image"
        ],
        "type": "object"
      },
      "ResizeServerPayload": {
        "properties": {
          "machineType": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "machineType"
        ],
        "type": "object"
      },
      "ResizeVolumePayload": {
        "properties": {
          "size": {
            "$ref": "#/components/schemas/SizeInGB"
          }
        },
        "required": [
          "size"
        ],
        "type": "object"
      },
      "Resource": {
        "description": "Object that represents a resource type.\nPossible values: `BACKUP`, `IMAGE`, `NETWORK`, `NETWORKAREA`, `NIC`, `PROJECT`, `ROUTE`, `SERVER`, `SERVICEACCOUNT`, `SNAPSHOT`, `VIRTUALIP`, `VOLUME`.",
        "example": "SERVER",
        "type": "string"
      },
      "ResourceAction": {
        "description": "Object that represents a resource action.\nPossible values: `CREATE`, `DELETE`, `UPDATE`.",
        "example": "CREATE",
        "type": "string"
      },
      "ResourceState": {
        "description": "The state of a resource object.\nPossible values: `CREATING`, `CREATED`, `DELETING`, `DELETED`, `FAILED`, `UPDATED`, `UPDATING`.",
        "example": "CREATING",
        "type": "string"
      },
      "Route": {
        "description": "Object represents a network route.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "nexthop": {
            "$ref": "#/components/schemas/IP"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          },
          "routeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "prefix",
          "nexthop"
        ],
        "type": "object"
      },
      "RouteList": {
        "description": "A list of routes.",
        "items": {
          "$ref": "#/components/schemas/Route"
        },
        "type": "array"
      },
      "RouteListResponse": {
        "description": "Route list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/RouteList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Routed": {
        "description": "Shows if the network is routed and therefore accessible from other networks.",
        "example": true,
        "type": "boolean"
      },
      "SSHPublicKey": {
        "description": "Object that represents a public SSH key.",
        "example": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIDsPd27M449akqCtdFg2+AmRVJz6eWio0oMP9dVg7Xe",
        "pattern": "^(ssh-rsa|ssh-ed25519|ecdsa-sha2-nistp(256|384|521))\\s+[A-Za-z0-9+/]+[=]{0,3}(\\s+.+)?\\s*$",
        "type": "string"
      },
      "SecurityGroup": {
        "description": "Object that represents a security group.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "rules": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityGroupRuleList"
              }
            ],
            "readOnly": true
          },
          "stateful": {
            "$ref": "#/components/schemas/Stateful"
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SecurityGroupList": {
        "description": "A list containing security group objects.",
        "items": {
          "$ref": "#/components/schemas/SecurityGroup"
        },
        "type": "array"
      },
      "SecurityGroupListResponse": {
        "description": "Security group list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/SecurityGroupList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SecurityGroupRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSecurityGroupRule"
          },
          {
            "$ref": "#/components/schemas/SecurityGroupRuleProtocol"
          }
        ],
        "description": "Object that represents a security group rule."
      },
      "SecurityGroupRuleList": {
        "description": "A list containing security group rule objects.",
        "items": {
          "$ref": "#/components/schemas/SecurityGroupRule"
        },
        "type": "array"
      },
      "SecurityGroupRuleListResponse": {
        "description": "Security group rule list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/SecurityGroupRuleList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SecurityGroupRuleProtocol": {
        "description": "The internet protocol which the rule matches.",
        "properties": {
          "protocol": {
            "$ref": "#/components/schemas/Protocol"
          }
        },
        "type": "object"
      },
      "Server": {
        "description": "Representation of a single server object.",
        "properties": {
          "affinityGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "The affinity group the server is assigned to."
          },
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ],
            "description": "This is the availability zone requested during server creation. If none is provided during the creation request and an existing volume will be used as boot volume it will be set to the same availability zone as the volume. For requests with no volumes involved it will be set to the metro availability zone."
          },
          "bootVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BootVolume"
              }
            ]
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "errorMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorMessage"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "imageId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "keypairName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KeyPairName"
              }
            ],
            "description": "The SSH keypair used during the server creation."
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "launchedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LaunchedAt"
              }
            ],
            "readOnly": true
          },
          "machineType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericName"
              }
            ],
            "description": "Name of the machine type the server shall belong to.",
            "example": "t1.1"
          },
          "maintenanceWindow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerMaintenance"
              }
            ],
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          },
          "networking": {
            "description": "The initial networking setup for the server creation. A network, a nic or nothing can be given.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateServerNetworking"
              },
              {
                "$ref": "#/components/schemas/CreateServerNetworkingWithNics"
              }
            ]
          },
          "nics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerNICList"
              }
            ],
            "description": "The list of network interfaces (NICs) attached to the server. Only shown when detailed information is requested.",
            "readOnly": true
          },
          "powerStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerPowerStatus"
              }
            ],
            "readOnly": true
          },
          "securityGroups": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericNameList"
              }
            ],
            "description": "The initial security groups for the server creation.",
            "writeOnly": true
          },
          "serviceAccountMails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceAccountMailList"
              }
            ],
            "description": "A list of service account mails. Only shown when detailed information is requested."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          },
          "userData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerUserData"
              }
            ],
            "description": "User Data that is provided to the server. Must be base64 encoded and is passed via cloud-init to the server. Only shown when detailed information is requested."
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUIDList"
              }
            ],
            "description": "The list of volumes attached to the server."
          }
        },
        "required": [
          "name",
          "machineType"
        ],
        "type": "object"
      },
      "ServerConsoleUrl": {
        "description": "Object that represents a server console URL.",
        "example": {
          "url": "https://foo.bar"
        },
        "properties": {
          "url": {
            "example": "https://foo.bar",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "ServerList": {
        "description": "A list of servers.",
        "items": {
          "$ref": "#/components/schemas/Server"
        },
        "type": "array"
      },
      "ServerListResponse": {
        "description": "Response object for server list request.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ServerList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ServerMaintenance": {
        "description": "Object that represents the information about the next planned server maintenance window.",
        "properties": {
          "details": {
            "example": "cve-1234-0815",
            "type": "string"
          },
          "endsAt": {
            "description": "End of the maintenance window.",
            "example": "2023-09-23T11:39:48Z",
            "format": "date-time",
            "type": "string"
          },
          "startsAt": {
            "description": "Start of the maintenance window.",
            "example": "2023-09-22T11:39:48Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string",
            "x-extensible-enum": [
              "PLANNED",
              "ONGOING"
            ]
          }
        },
        "required": [
          "endsAt",
          "startsAt",
          "status"
        ],
        "type": "object"
      },
      "ServerNICList": {
        "description": "A list of networks attached to a server.",
        "items": {
          "$ref": "#/components/schemas/ServerNetwork"
        },
        "type": "array"
      },
      "ServerName": {
        "description": "The name for a Server.",
        "example": "server1",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "ServerNetwork": {
        "description": "Describes the object that matches servers to its networks.",
        "example": {
          "ipv4": "10.0.0.1",
          "mac": "f4:43:dd:5a:90:c0",
          "networkId": "997ee3ee-e17e-48dd-bf25-34fe5c0bff18",
          "networkName": "My network",
          "nicId": "0507bb7e-9612-40a5-9d5f-bb6aedbce880",
          "nicSecurity": true,
          "publicIp": "192.0.2.1"
        },
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "ipv4": {
            "$ref": "#/components/schemas/IP"
          },
          "ipv6": {
            "$ref": "#/components/schemas/IPv6"
          },
          "mac": {
            "$ref": "#/components/schemas/MAC"
          },
          "networkId": {
            "$ref": "#/components/schemas/UUID"
          },
          "networkName": {
            "$ref": "#/components/schemas/GenericName"
          },
          "nicId": {
            "$ref": "#/components/schemas/UUID"
          },
          "nicSecurity": {
            "description": "If this is set to false, then no security groups will apply to this server network interface.",
            "type": "boolean"
          },
          "publicIp": {
            "$ref": "#/components/schemas/IP"
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          }
        },
        "required": [
          "nicId",
          "networkId",
          "networkName",
          "mac",
          "nicSecurity"
        ],
        "type": "object"
      },
      "ServerPowerStatus": {
        "description": "The power status of a server.\nPossible values: `CRASHED`, `ERROR`, `RUNNING`, `STOPPED`.",
        "example": "RUNNING",
        "type": "string"
      },
      "ServerStatus": {
        "description": "The status of a server object.\nPossible values: `ACTIVE`, `BACKING-UP`, `CREATING`, `DEALLOCATED`, `DEALLOCATING`, `DELETED`, `DELETING`, `ERROR`, `INACTIVE`, `MIGRATING`, `REBOOT`, `REBOOTING`, `REBUILD`, `REBUILDING`, `RESCUE`, `RESCUING`, `RESIZING`, `RESTORING`, `SNAPSHOTTING`, `STARTING`, `STOPPING`, `UNRESCUING`, `UPDATING`.",
        "example": "ACTIVE",
        "type": "string"
      },
      "ServerUserData": {
        "description": "User Data that is provided to the server. Must be base64 encoded and is passed via cloud-init to the server.",
        "example": "IyEvYmluL2Jhc2gKL2Jpbi9zdQplY2hvICJJIGFtIGluIHlvdSEiCg==",
        "format": "byte",
        "type": "string"
      },
      "ServiceAccountMail": {
        "description": "Object that represents an e-mail address of a service account.",
        "example": "example@compute.sa.stackit.cloud",
        "format": "email",
        "maxLength": 255,
        "pattern": "[a-z0-9-]+(?:\\.[a-z0-9]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?",
        "type": "string"
      },
      "ServiceAccountMailList": {
        "description": "A list of service account mails.",
        "items": {
          "$ref": "#/components/schemas/ServiceAccountMail"
        },
        "maxItems": 1,
        "type": "array"
      },
      "ServiceAccountMailListResponse": {
        "description": "Service account mail list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ServiceAccountMailList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SetImageSharePayload": {
        "description": "Share details of an Image. For requests ParentOrganization and Projects are mutually exclusive.",
        "properties": {
          "parentOrganization": {
            "description": "Image is shared with all projects inside the image owners organization.",
            "type": "boolean"
          },
          "projects": {
            "description": "List of all projects the Image is shared with.",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array"
          }
        }
      },
      "SizeInBytes": {
        "description": "Size in bytes.",
        "example": 1401946112,
        "format": "int64",
        "type": "integer"
      },
      "SizeInGB": {
        "description": "Size in Gigabyte.",
        "example": 1337,
        "format": "int64",
        "type": "integer"
      },
      "SizeInMB": {
        "description": "Size in Megabyte.",
        "example": 1337,
        "format": "int64",
        "type": "integer"
      },
      "Snapshot": {
        "description": "Object that represents a snapshot.",
        "properties": {
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SnapshotStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "volumeId"
        ],
        "type": "object"
      },
      "SnapshotList": {
        "description": "A list containing snapshot objects.",
        "items": {
          "$ref": "#/components/schemas/Snapshot"
        },
        "type": "array"
      },
      "SnapshotListResponse": {
        "description": "Snapshot list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/SnapshotList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SnapshotStatus": {
        "description": "The status of a snapshot object.\nPossible values: `AVAILABLE`, `BACKING-UP`, `CREATING`, `DELETED`, `DELETING`, `ERROR`, `RESTORING`, `UNMANAGING`, `UPDATING`.",
        "example": "AVAILABLE",
        "type": "string"
      },
      "Stateful": {
        "default": true,
        "description": "Shows if a security group is stateful or stateless. You can only have one type of security groups per network interface/server.",
        "type": "boolean"
      },
      "StaticAreaID": {
        "description": "The identifier (ID) of a static area.",
        "enum": [
          "PUBLIC",
          "SCHWARZ"
        ],
        "example": "PUBLIC",
        "type": "string"
      },
      "ThroughputInMB": {
        "description": "Throughput in Megabyte per second.",
        "example": 200,
        "format": "int64",
        "type": "integer"
      },
      "UUID": {
        "description": "Universally Unique Identifier (UUID).",
        "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
        "format": "uuid",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      },
      "UUIDList": {
        "description": "A list of UUIDs.",
        "items": {
          "$ref": "#/components/schemas/UUID"
        },
        "type": "array"
      },
      "UpdateAreaAddressFamily": {
        "description": "The addressFamily object for a area update request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/UpdateAreaIPv4"
          }
        },
        "type": "object"
      },
      "UpdateAreaIPv4": {
        "description": "The update object for a IPv4 network area.",
        "properties": {
          "defaultNameservers": {
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "maxItems": 3,
            "type": "array"
          },
          "defaultPrefixLen": {
            "$ref": "#/components/schemas/AreaDefaultPrefixLengthIPv4"
          },
          "maxPrefixLen": {
            "$ref": "#/components/schemas/AreaMaxPrefixLengthIPv4"
          },
          "minPrefixLen": {
            "$ref": "#/components/schemas/AreaMinPrefixLengthIPv4"
          }
        },
        "type": "object"
      },
      "UpdateAttachedVolumePayload": {
        "description": "Object that represents a Volume attachment to a server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "UpdateBackupPayload": {
        "description": "Object that represents a backup.",
        "properties": {
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ],
            "readOnly": true
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SizeInGB"
              }
            ],
            "readOnly": true
          },
          "snapshotId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackupStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "UpdateImagePayload": {
        "description": "Object that represents an update request body of an Image.",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ImageConfig"
          },
          "diskFormat": {
            "$ref": "#/components/schemas/DiskFormat"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "minDiskSize": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "minRam": {
            "$ref": "#/components/schemas/SizeInMB"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "protected": {
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateImageSharePayload": {
        "description": "Share details of an Image. For requests ParentOrganization and Projects are mutually exclusive.",
        "properties": {
          "parentOrganization": {
            "description": "Image is shared with all projects inside the image owners organization.",
            "type": "boolean"
          },
          "projects": {
            "description": "List of all projects the Image is shared with.",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "type": "array"
          }
        }
      },
      "UpdateKeyPairPayload": {
        "description": "Object that represents an update request body of a public key of an SSH keypair.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          }
        },
        "type": "object"
      },
      "UpdateNetworkAddressFamily": {
        "description": "The addressFamily object for a network update request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/UpdateNetworkIPv4Body"
          },
          "ipv6": {
            "$ref": "#/components/schemas/UpdateNetworkIPv6Body"
          }
        },
        "type": "object"
      },
      "UpdateNetworkIPv4Body": {
        "description": "The config object for a IPv4 network update.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          }
        },
        "type": "object"
      },
      "UpdateNetworkIPv6Body": {
        "description": "The config object for a IPv6 network update.",
        "properties": {
          "gateway": {
            "$ref": "#/components/schemas/NetworkGateway"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserverv6"
          }
        },
        "type": "object"
      },
      "UpdateNicPayload": {
        "description": "Object that represents a network interface update.",
        "properties": {
          "allowedAddresses": {
            "$ref": "#/components/schemas/AllowedAddresses"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "nicSecurity": {
            "$ref": "#/components/schemas/NICSecurity"
          },
          "securityGroups": {
            "$ref": "#/components/schemas/UUIDList"
          }
        },
        "type": "object"
      },
      "UpdatePublicIPPayload": {
        "description": "Object that represents a public IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IP"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "networkInterface": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "description": "Associate the public IP with a network interface or a virtual IP (ID).",
            "nullable": true
          }
        },
        "type": "object"
      },
      "UpdateSecurityGroupPayload": {
        "description": "Object that represents an update request body of a security group.",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "UpdateServerPayload": {
        "description": "Object that represents an update request body of a server.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          }
        },
        "type": "object"
      },
      "UpdateSnapshotPayload": {
        "description": "Object that represents an update request body of a snapshot.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "UpdateVirtualIPPayload": {
        "description": "Object that represents a virtual IP update request body.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUIDList"
              }
            ],
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "UpdateVolumePayload": {
        "description": "Object that represents an update request body of a  volume.",
        "properties": {
          "bootable": {
            "$ref": "#/components/schemas/VolumeBootable"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "imageConfig": {
            "$ref": "#/components/schemas/ImageConfig"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "UpdatedAt": {
        "description": "Date-time when resource was last updated.",
        "example": "2017-07-21T17:32:28Z",
        "format": "date-time",
        "type": "string"
      },
      "VCPUs": {
        "description": "The number of virtual CPUs of a server.",
        "example": 4,
        "format": "int64",
        "minimum": 1,
        "type": "integer"
      },
      "VirtualIp": {
        "description": "Object that represents a virtual IP.",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "$ref": "#/components/schemas/UUIDList"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "network": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceState"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "VirtualIpList": {
        "description": "A list of virtual IPs.",
        "items": {
          "$ref": "#/components/schemas/VirtualIp"
        },
        "type": "array"
      },
      "VirtualIpListResponse": {
        "description": "Virtual IPs list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VirtualIpList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Volume": {
        "description": "Object that represents a volume and its parameters. Used for Creating and returning (get/list).",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "bootable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeBootable"
              }
            ]
          },
          "createdAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedAt"
              }
            ],
            "readOnly": true
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "imageConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageConfig"
              }
            ],
            "readOnly": true
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "performanceClass": {
            "$ref": "#/components/schemas/GenericName"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "size": {
            "$ref": "#/components/schemas/SizeInGB"
          },
          "source": {
            "$ref": "#/components/schemas/VolumeSource"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeStatus"
              }
            ],
            "readOnly": true
          },
          "updatedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdatedAt"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "availabilityZone"
        ],
        "type": "object"
      },
      "VolumeAttachment": {
        "description": "Object that represents a Volume attachment to a server.",
        "properties": {
          "deleteOnTermination": {
            "$ref": "#/components/schemas/DeleteOnTermination"
          },
          "serverId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "volumeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "VolumeAttachmentList": {
        "description": "A list containing Volume attachments of a server.",
        "items": {
          "$ref": "#/components/schemas/VolumeAttachment"
        },
        "type": "array"
      },
      "VolumeAttachmentListResponse": {
        "description": "Volume attachment list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VolumeAttachmentList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VolumeBootable": {
        "description": "Indicates if a volume is bootable.",
        "example": true,
        "type": "boolean"
      },
      "VolumeList": {
        "description": "A list containing volume objects.",
        "items": {
          "$ref": "#/components/schemas/Volume"
        },
        "type": "array"
      },
      "VolumeListResponse": {
        "description": "Volume list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VolumeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VolumePerformanceClass": {
        "description": "Object that represents a Volume performance class.",
        "example": {
          "description": "Performance Class 6 - 5000 IOPS; 200MB throughput.",
          "iops": 5000,
          "labels": {
            "vendor_name": "NetApp"
          },
          "name": "storage_premium_perf6",
          "throughput": 200
        },
        "properties": {
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "iops": {
            "$ref": "#/components/schemas/IOPS"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          },
          "throughput": {
            "$ref": "#/components/schemas/ThroughputInMB"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "VolumePerformanceClassList": {
        "description": "A list containing Volume performance classes.",
        "items": {
          "$ref": "#/components/schemas/VolumePerformanceClass"
        },
        "type": "array"
      },
      "VolumePerformanceClassListResponse": {
        "description": "Volume performance class list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/VolumePerformanceClassList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VolumeSource": {
        "description": "The source object of a volume.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "$ref": "#/components/schemas/VolumeSourceTypes"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "VolumeSourceTypes": {
        "description": "The source types of a volume.\nPossible values: `image`, `volume`, `snapshot`, `backup`.",
        "type": "string"
      },
      "VolumeStatus": {
        "description": "The status of a volume object.\nPossible values: `ATTACHED`, `ATTACHING`, `AVAILABLE`, `AWAITING-TRANSFER`, `BACKING-UP`, `CREATING`, `DELETED`, `DELETING`, `DETACHING`, `DOWNLOADING`, `ERROR`, `ERROR_BACKING-UP`, `ERROR_DELETING`, `ERROR_RESIZING`, `ERROR_RESTORING-BACKUP`, `MAINTENANCE`, `RESERVED`, `RESIZING`, `RESTORING-BACKUP`, `RETYPING`, `UPLOADING`.",
        "example": "ATTACHED",
        "type": "string"
      },
      "errorMessage": {
        "description": "An error message.",
        "example": "Project not found",
        "type": "string"
      },
      "v1alpha1UpdateRouteOfAreaPayload": {
        "description": "Object that represents the request body for a route update.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-iaas@mail.schwarz",
      "name": "STACKIT IaaS Teams",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "This API allows you to create and modify IaaS resources.",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "IaaS-API",
    "version": "1alpha1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1alpha1/availability-zones": {
      "get": {
        "description": "Get a list of all availability zones.",
        "operationId": "ListAvailabilityZones",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityZoneListResponse"
                }
              }
            },
            "description": "Get a list of availability zones."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all availability zones.",
        "x-stackit-authorization": {
          "disabled": true
        }
      }
    },
    "/v1alpha1/keypairs": {
      "get": {
        "description": "Get a list of all SSH keypairs assigned to the requesting user.",
        "operationId": "ListKeyPairs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyPairListResponse"
                }
              }
            },
            "description": "List SSH keypairs."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all SSH keypairs for the requesting user.",
        "x-stackit-authorization": {
          "disabled": true
        }
      },
      "post": {
        "description": "Import a new public key for the requesting user based on provided public key material. The creation will fail if an SSH keypair with the same name already exists. If a name is not provided it is autogenerated form the ssh-pubkey comment section. If that is also not present it will be the the MD5 fingerprint of the key. For autogenerated names invalid characters will be removed.",
        "operationId": "CreateKeyPair",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyPairPayload"
              }
            }
          },
          "description": "Request a public key import.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "Import of the public key was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Import a public key.",
        "x-stackit-authorization": {
          "disabled": true
        }
      }
    },
    "/v1alpha1/keypairs/{keypairName}": {
      "delete": {
        "description": "Delete an SSH keypair from a user.",
        "operationId": "DeleteKeyPair",
        "responses": {
          "204": {
            "description": "Delete request for an SSH keypair was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete an SSH keypair.",
        "x-stackit-authorization": {
          "disabled": true
        }
      },
      "get": {
        "description": "Get details about an SSH keypair.",
        "operationId": "GetKeyPair",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "Show SSH keypair details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get SSH keypair details.",
        "x-stackit-authorization": {
          "disabled": true
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1KeypairName"
        }
      ],
      "patch": {
        "description": "Update labels of the SSH keypair.",
        "operationId": "UpdateKeyPair",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeyPairPayload"
              }
            }
          },
          "description": "Request an update of an SSH keypair.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair"
                }
              }
            },
            "description": "SSH keypair has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of an SSH keypair.",
        "x-stackit-authorization": {
          "disabled": true
        }
      }
    },
    "/v1alpha1/networks/public-ip-ranges": {
      "get": {
        "description": "Get a list of all public IP ranges that STACKIT uses.",
        "operationId": "ListPublicIpRanges",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicNetworkListResponse"
                }
              }
            },
            "description": "List public IP ranges."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all public IP ranges.",
        "x-stackit-authorization": {
          "disabled": true
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas": {
      "get": {
        "description": "Get a list of all visible network areas defined in an organization.",
        "operationId": "ListNetworkAreas",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkAreaListResponse"
                }
              }
            },
            "description": "Get a list of all network areas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network areas in an organization.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        }
      ],
      "post": {
        "description": "Create a new network area in an organization.",
        "operationId": "CreateNetworkArea",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "defaultNameservers": [
                      "10.1.2.10"
                    ],
                    "defaultPrefixLen": 24,
                    "maxPrefixLen": 28,
                    "minPrefixLen": 22,
                    "networkRanges": [
                      {
                        "prefix": "10.0.0.0/16"
                      }
                    ],
                    "routes": [
                      {
                        "nexthop": "10.1.2.10",
                        "prefix": "192.168.0.0/24"
                      }
                    ],
                    "transferNetwork": "10.1.2.0/24"
                  }
                },
                "labels": {
                  "environment": "production"
                },
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaPayload"
              }
            }
          },
          "description": "Request an Area creation.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Area has been successfully created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network area in an organization.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.create"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}": {
      "delete": {
        "description": "Delete an existing network area in an organization. This is only possible if no projects are using the area anymore.",
        "operationId": "DeleteNetworkArea",
        "responses": {
          "202": {
            "description": "Delete request for area has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network area.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.delete"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "get": {
        "description": "Get details about a network area in an organization.",
        "operationId": "GetNetworkArea",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Show network area details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network area.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkAreaID"
        }
      ],
      "patch": {
        "description": "Update the settings of a network area in an organization.",
        "operationId": "PartialUpdateNetworkArea",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "defaultNameservers": [
                      "10.1.2.10"
                    ],
                    "defaultPrefixLen": 24,
                    "maxPrefixLen": 26,
                    "minPrefixLen": 22
                  }
                },
                "labels": {
                  "environment": "production"
                },
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateNetworkAreaPayload"
              }
            }
          },
          "description": "Request to update an Area.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Area has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network area settings.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.update"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/network-ranges": {
      "get": {
        "description": "Get a list of all network ranges in a network area.",
        "operationId": "ListNetworkAreaRanges",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRangeListResponse"
                }
              }
            },
            "description": "List all network ranges."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network ranges in a network area.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.range.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkAreaID"
        }
      ],
      "post": {
        "description": "Create a new network range in an existing network area.",
        "operationId": "CreateNetworkAreaRange",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ipv4": [
                  {
                    "prefix": "10.1.2.0/24"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaRangePayload"
              }
            }
          },
          "description": "Request an addition of network ranges to an area.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRangeListResponse"
                }
              }
            },
            "description": "Adding network ranges was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network range in a network area.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.range.create"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/network-ranges/{networkRangeId}": {
      "delete": {
        "description": "Delete a network range of a network area. The deletion will fail if the network range is still used.",
        "operationId": "DeleteNetworkAreaRange",
        "responses": {
          "202": {
            "description": "Delete request for network range accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network range.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.range.delete"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "get": {
        "description": "Get details about a network range in a network area.",
        "operationId": "GetNetworkAreaRange",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRange"
                }
              }
            },
            "description": "Show network range details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network range.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.range.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkAreaID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkRangeID"
        }
      ]
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/projects": {
      "get": {
        "description": "Get a list of all projects using a network area.",
        "operationId": "ListNetworkAreaProjects",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            },
            "description": "List projects for a network area."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all projects using a network area.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.project.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkAreaID"
        }
      ]
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/routes": {
      "get": {
        "description": "Get a list of all network routes defined in a network area.",
        "operationId": "ListNetworkAreaRoutes",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteListResponse"
                }
              }
            },
            "description": "List network routes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network routes in a network area.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.route.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkAreaID"
        }
      ],
      "post": {
        "description": "Create one or several new network routes in a network area.",
        "operationId": "CreateNetworkAreaRoute",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ipv4": [
                  {
                    "nexthop": "10.1.2.10",
                    "prefix": "192.168.0.0/24"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaRoutePayload"
              }
            }
          },
          "description": "Request an addition of routes to an area.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteListResponse"
                }
              }
            },
            "description": "Create request for network routes accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network routes.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.route.create"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}": {
      "delete": {
        "description": "Delete a network route of a network area.",
        "operationId": "DeleteNetworkAreaRoute",
        "responses": {
          "202": {
            "description": "Delete request for the network route has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network route.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.route.delete"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "get": {
        "description": "Get details about a network route defined in a network area.",
        "operationId": "GetNetworkAreaRoute",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Show route details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network route.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.route.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkAreaID"
        },
        {
          "$ref": "#/components/parameters/v1RouteID"
        }
      ],
      "patch": {
        "description": "Update a network route defined in a network area.",
        "operationId": "v1alpha1UpdateRouteOfArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1alpha1UpdateRouteOfAreaPayload"
              }
            }
          },
          "description": "Request an update of a network route.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Update request for network successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a network route.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network-area.route.update"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/requests/{requestId}": {
      "get": {
        "description": "Lookup an organization request ID from a previous request. This allows to find resource IDs of resources generated during a organization request.",
        "operationId": "GetOrganizationRequest",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "description": "Show organization request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup an organization request ID.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.request.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1OrganizationID"
        },
        {
          "$ref": "#/components/parameters/v1RequestID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}": {
      "get": {
        "description": "Get details about a STACKIT project.",
        "operationId": "GetProjectDetails",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Show project details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get project details.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.project.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/affinity-groups": {
      "get": {
        "description": "Get the affinity groups created in a project. Affinity groups are an indication of locality of a server relative to another group of servers. They can be either running on the same host (affinity) or on different ones (anti-affinity).",
        "operationId": "ListAffinityGroups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffinityGroupListResponse"
                }
              }
            },
            "description": "List affinity groups."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get the affinity groups setup for a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.affinity-group.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new server affinity group in the given project ID.",
        "operationId": "CreateAffinityGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "MyAffinityGroup",
                "policy": "anti-affinity"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateAffinityGroupPayload"
              }
            }
          },
          "description": "Request a affinity group creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffinityGroup"
                }
              }
            },
            "description": "Affinity group was created successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create a new affinity group in a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.affinity-group.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/affinity-groups/{affinityGroupId}": {
      "delete": {
        "description": "Delete a affinity group in the given project.",
        "operationId": "DeleteAffinityGroup",
        "responses": {
          "204": {
            "description": "Delete request for an server group was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a affinity group in a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.affinity-group.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get the affinity group created in a project.",
        "operationId": "GetAffinityGroup",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffinityGroup"
                }
              }
            },
            "description": "Show affinity group details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get the affinity group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.affinity-group.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1AffinityGroupID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/backups": {
      "get": {
        "description": "Get a list of all backups inside a project.",
        "operationId": "ListBackups",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupListResponse"
                }
              }
            },
            "description": "List project backups."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all backups inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.backup.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new Backup in a project. If a snapshot ID is provided create the backup from the snapshot.",
        "operationId": "CreateBackup",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "BackupFromSnapshot": {
                  "value": {
                    "name": "abfahrtMitSnap",
                    "source": {
                      "id": "09876543-1234-4ffb-bc15-143e7d0c85ed",
                      "type": "snapshot"
                    }
                  }
                },
                "BackupFromVolume": {
                  "value": {
                    "name": "abfahrt",
                    "source": {
                      "id": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                      "type": "volume"
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateBackupPayload"
              }
            }
          },
          "description": "Request a backup creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Create request for Backup accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Backup.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.backup.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/backups/{backupId}": {
      "delete": {
        "description": "Delete a backup that is part of the project.",
        "operationId": "DeleteBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1Force"
          }
        ],
        "responses": {
          "204": {
            "description": "Backup delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a backup.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.backup.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a block device backup.",
        "operationId": "GetBackup",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Show backup details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a backup.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.backup.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1BackupID"
        }
      ],
      "patch": {
        "description": "Update name or labels of the backup.",
        "operationId": "UpdateBackup",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "BackupLabel": {
                  "value": {
                    "labels": {
                      "foo": "foobar"
                    }
                  }
                },
                "BackupName": {
                  "value": {
                    "name": "abfahrt"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateBackupPayload"
              }
            }
          },
          "description": "Request an update of a backup.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Backup has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a backup.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.backup.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/backups/{backupId}/restore": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1BackupID"
        }
      ],
      "post": {
        "description": "Restores a Backup to the existing Volume it references to. The use of this endpoint is disruptive as the volume needs to be detached. If a new volume is to be created use the volumes endpoint with the option to create from backup.",
        "operationId": "RestoreBackup",
        "responses": {
          "202": {
            "description": "Backup restore request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Restore Backup to the referenced source Volume.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.backup.restore"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/images": {
      "get": {
        "description": "Get a list of all images inside a project.",
        "operationId": "ListImages",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ListAllImages"
          },
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageListResponse"
                }
              }
            },
            "description": "List project images."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all Images inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new Image in a project. This call, if successful, returns a pre-signed URL for the customer to upload the image.",
        "operationId": "CreateImage",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "allParams": {
                  "value": {
                    "active": true,
                    "diskFormat": "qcow2",
                    "labels": {
                      "key": "value"
                    },
                    "minDiskSize": 10,
                    "minRam": 1,
                    "name": "niceImage",
                    "protected": false
                  }
                },
                "minimumParams": {
                  "value": {
                    "diskFormat": "qcow2",
                    "name": "niceImage"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateImagePayload"
              }
            }
          },
          "description": "Request an image creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageCreateResponse"
                }
              }
            },
            "description": "Create request for an Image has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Image.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/images/{imageId}": {
      "delete": {
        "description": "Delete an image that is part of the project.",
        "operationId": "DeleteImage",
        "responses": {
          "204": {
            "description": "Image delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete an Image.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a specific Image inside a project.",
        "operationId": "GetImage",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "Show Image details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about an image.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ImageID"
        }
      ],
      "patch": {
        "description": "Update the properties of an existing Image inside a project.",
        "operationId": "UpdateImage",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "minimumParams": {
                  "value": {
                    "name": "fancyNewName"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateImagePayload"
              }
            }
          },
          "description": "Request an update of an Image.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "Response to update call. Provide the updated image object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update Image Parameters.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/images/{imageId}/publish": {
      "delete": {
        "description": "Update the scope property of an existing Image inside a project to local.",
        "operationId": "UpdateImageScopeLocal",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "Response to update image-scope to local. Provide the updated image object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update Image Scope to Local.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.publish.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ImageID"
        }
      ],
      "put": {
        "description": "Update the scope property of an existing Image inside a project to public.",
        "operationId": "UpdateImageScopePublic",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            },
            "description": "Response to update image-scope to public. Provide the updated image object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update Image Scope to Public.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.publish.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/images/{imageId}/share": {
      "delete": {
        "description": "Remove the image share. New scope will be local.",
        "operationId": "DeleteImageShare",
        "responses": {
          "204": {
            "description": "Image share removed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove image share.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.share.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get share details about an shared image.",
        "operationId": "GetImageShare",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "notShared": {
                    "value": {
                      "parentOrganization": false,
                      "projects": []
                    }
                  },
                  "sharedToOrganization": {
                    "value": {
                      "parentOrganization": true,
                      "projects": [
                        "b22caba6-be07-4a5e-83dc-0ad205534f45",
                        "81be2b3a-15eb-4fb3-8b44-cde184c947c2"
                      ]
                    }
                  },
                  "sharedToProject": {
                    "value": {
                      "parentOrganization": false,
                      "projects": [
                        "81be2b3a-15eb-4fb3-8b44-cde184c947c2"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ImageShare"
                }
              }
            },
            "description": "Show Image share details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get share details of an image.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.share.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ImageID"
        }
      ],
      "patch": {
        "description": "Update share of an Image. Projects will be appended to existing list.",
        "operationId": "UpdateImageShare",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "addProjectsToShare": {
                  "value": {
                    "projects": [
                      "b22caba6-be07-4a5e-83dc-0ad205534f45",
                      "81be2b3a-15eb-4fb3-8b44-cde184c947c2"
                    ]
                  }
                },
                "shareToParentOrganization": {
                  "value": {
                    "parentOrganization": true
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateImageSharePayload"
              }
            }
          },
          "description": "Update an Image Share.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageShare"
                }
              }
            },
            "description": "Updating Image share successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update image share.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.share.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "put": {
        "description": "Set share of an Image. New Options will replace existing settings.",
        "operationId": "SetImageShare",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "shareToParentOrganization": {
                  "value": {
                    "parentOrganization": true
                  }
                },
                "shareToProjects": {
                  "value": {
                    "projects": [
                      "b22caba6-be07-4a5e-83dc-0ad205534f45",
                      "81be2b3a-15eb-4fb3-8b44-cde184c947c2"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SetImageSharePayload"
              }
            }
          },
          "description": "Settings for an Image Share.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageShare"
                }
              }
            },
            "description": "Setting Image share successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Set image share.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.share.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/images/{imageId}/share/{consumerProjectId}": {
      "delete": {
        "description": "Remove consumer from a shared image.",
        "operationId": "DeleteImageShareConsumer",
        "responses": {
          "204": {
            "description": "Image share consumer removed."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove an image share consumer.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.share.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about an image share consumer.",
        "operationId": "GetImageShareConsumer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageShareConsumer"
                }
              }
            },
            "description": "Show Image share consumer details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get image share consumer.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.image.share.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ImageID"
        },
        {
          "$ref": "#/components/parameters/v1ConsumerProjectID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/machine-types": {
      "get": {
        "description": "Get a list of all machine type available in a project.",
        "operationId": "ListMachineTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1FieldFilter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineTypeListResponse"
                }
              }
            },
            "description": "List of machine types."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all machine types available for a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.machine-type.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/machine-types/{machineType}": {
      "get": {
        "description": "Get details about a specific machine type.",
        "operationId": "GetMachineType",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineType"
                }
              }
            },
            "description": "Show machine type details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a machine type.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.machine-type.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1MachineTypeName"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/networks": {
      "get": {
        "description": "Get a list of all networks inside a project.",
        "operationId": "ListNetworks",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkListResponse"
                }
              }
            },
            "description": "List all networks of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all networks inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new network in a project. `nameservers` will be filled from `defaultNameservers` of the respective area if not specified. If the project has `internetAccess` enabled and this is the first network in the project this might incur cost.",
        "operationId": "CreateNetwork",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "NetworkWithPrefix": {
                  "value": {
                    "addressFamily": {
                      "ipv4": {
                        "nameservers": [
                          "10.1.2.10"
                        ],
                        "prefix": "10.0.3.0/25"
                      }
                    },
                    "name": "My Network"
                  }
                },
                "NetworkWithPrefixLength": {
                  "value": {
                    "addressFamily": {
                      "ipv4": {
                        "nameservers": [
                          "10.1.2.10"
                        ],
                        "prefixLength": 24
                      }
                    },
                    "name": "My Network"
                  }
                },
                "NetworkWithoutPrefixOrPrefixLength": {
                  "value": {
                    "addressFamily": {
                      "ipv4": {
                        "nameservers": [
                          "10.1.2.10"
                        ]
                      }
                    },
                    "name": "My Network"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkPayload"
              }
            }
          },
          "description": "Request a network creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            },
            "description": "Network create has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}": {
      "delete": {
        "description": "Delete a network. If the network is still in use, the deletion will fail.",
        "operationId": "DeleteNetwork",
        "responses": {
          "202": {
            "description": "Delete request for network has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete network.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a network of a project.",
        "operationId": "GetNetwork",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            },
            "description": "Show network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get network details.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        }
      ],
      "patch": {
        "description": "Update the settings of a network inside a project.",
        "operationId": "PartialUpdateNetwork",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "nameservers": [
                      "10.1.2.10"
                    ]
                  }
                },
                "name": "My Network"
              },
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateNetworkPayload"
              }
            }
          },
          "description": "Request an update of a network.",
          "required": true
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/UpdateAccepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network settings.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.network.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/nics": {
      "get": {
        "description": "Get a list of all network interfaces inside a network.",
        "operationId": "ListNics",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NICListResponse"
                }
              }
            },
            "description": "List network interfaces of the network."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network interfaces inside a network.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        }
      ],
      "post": {
        "description": "Create a new network interface in a project.",
        "operationId": "CreateNic",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNicPayload"
              }
            }
          },
          "description": "Request a network interface creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Network interface was created successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network interface.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/nics/{nicId}": {
      "delete": {
        "description": "Delete a network interface that is part of the project.",
        "operationId": "DeleteNic",
        "responses": {
          "204": {
            "description": "Network interface delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network interface.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a network interface inside a network.",
        "operationId": "GetNic",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Show network interface details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network interface of a network.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        },
        {
          "$ref": "#/components/parameters/v1NICID"
        }
      ],
      "patch": {
        "description": "Update the properties of an existing network interface inside a network.",
        "operationId": "UpdateNic",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNicPayload"
              }
            }
          },
          "description": "Request an update of a network interface.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Network interface has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a network interface.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips": {
      "get": {
        "description": "Get a list of all virtual IPs inside a project.",
        "operationId": "ListVirtualIPs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIpListResponse"
                }
              }
            },
            "description": "List project virtual IPs."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all virtual IPs inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        }
      ],
      "post": {
        "description": "Create a new virtual IP in a project.",
        "operationId": "CreateVirtualIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualIPPayload"
              }
            }
          },
          "description": "Request a virtual IP creation.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Virtual IP create request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new virtual IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips/{virtualIpId}": {
      "delete": {
        "description": "Delete a virtual IP that is part of the project.",
        "operationId": "DeleteVirtualIP",
        "responses": {
          "204": {
            "description": "Virtual IP delete request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a virtual IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a virtual IP inside a project.",
        "operationId": "GetVirtualIP",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Show virtual IP details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a virtual IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        },
        {
          "$ref": "#/components/parameters/v1VirtualIPID"
        }
      ],
      "patch": {
        "description": "Update the properties of an existing virtual IP inside a project.",
        "operationId": "UpdateVirtualIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVirtualIPPayload"
              }
            }
          },
          "description": "Request an update of a virtual IP.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Virtual IP update request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a virtual IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips/{virtualIpId}/add-member": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        },
        {
          "$ref": "#/components/parameters/v1VirtualIPID"
        }
      ],
      "put": {
        "description": "Atomically add a member to the virtual IP.",
        "operationId": "AddMemberToVirtualIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberToVirtualIPPayload"
              }
            }
          },
          "description": "Request to add a member to a virtual IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Member has been added to the virtual IP."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add a member to the virtual IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.member.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}/virtual-ips/{virtualIpId}/remove-member": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        },
        {
          "$ref": "#/components/parameters/v1VirtualIPID"
        }
      ],
      "put": {
        "description": "Atomically remove a member from the virtual IP.",
        "operationId": "RemoveMemberFromVirtualIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberFromVirtualIPPayload"
              }
            }
          },
          "description": "Request to remove a member from a virtual IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualIp"
                }
              }
            },
            "description": "Member has been removed from the virtual IP."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove a member from the virtual IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.virtual-ip.member.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/nics": {
      "get": {
        "description": "Get a list of all network interfaces inside a project.",
        "operationId": "ListProjectNICs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NICListResponse"
                }
              }
            },
            "description": "List network interfaces of the project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network interfaces inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/nics/{nicId}": {
      "get": {
        "description": "Get details about a network interface inside a project.",
        "operationId": "GetProjectNIC",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NIC"
                }
              }
            },
            "description": "Show details of network interface."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network interface of a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.nic.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1NICID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/public-ips": {
      "get": {
        "description": "Get a list of all public IPs inside a project.",
        "operationId": "ListPublicIPs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpListResponse"
                }
              }
            },
            "description": "List project public IPs."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all public IPs inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.public-ip.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new public IP in a project.",
        "operationId": "CreatePublicIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicIPPayload"
              }
            }
          },
          "description": "Request a public IP creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIp"
                }
              }
            },
            "description": "The public IP has been created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new public IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.public-ip.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/public-ips/{publicIpId}": {
      "delete": {
        "description": "Delete a public IP that is part of the project.",
        "operationId": "DeletePublicIP",
        "responses": {
          "204": {
            "description": "The public IP has been deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a public IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.public-ip.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a public IP inside a project.",
        "operationId": "GetPublicIP",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIp"
                }
              }
            },
            "description": "Show public IP details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a public IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.public-ip.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1PublicIPID"
        }
      ],
      "patch": {
        "description": "Update the properties of an existing public IP inside a project.",
        "operationId": "UpdatePublicIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePublicIPPayload"
              }
            }
          },
          "description": "Request an update of a public IP.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIp"
                }
              }
            },
            "description": "Public IP has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update a public IP.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.public-ip.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/quotas": {
      "get": {
        "description": "List quota limits and usage for project resources.",
        "operationId": "ListQuotas",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotaListResponse"
                }
              }
            },
            "description": "List quotas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List project quotas.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.quota.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/requests/{requestId}": {
      "get": {
        "description": "Lookup a project request ID from a previous request. This allows to find resource IDs of resources generated during a projects request.",
        "operationId": "GetProjectRequest",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "description": "Show project request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup a project request ID.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.request.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1RequestID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/security-groups": {
      "get": {
        "description": "Get a list of all security groups inside a project.",
        "operationId": "ListSecurityGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupListResponse"
                }
              }
            },
            "description": "List all security groups of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all security groups inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new security group in a project.",
        "operationId": "CreateSecurityGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityGroupPayload"
              }
            }
          },
          "description": "Request a security group creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup"
                }
              }
            },
            "description": "Security group create has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new security group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups/{securityGroupId}": {
      "delete": {
        "description": "Delete a security group.",
        "operationId": "DeleteSecurityGroup",
        "responses": {
          "204": {
            "description": "Delete request for security group has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete security group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a security group of a project.",
        "operationId": "GetSecurityGroup",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup"
                }
              }
            },
            "description": "Show security group details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get security group details.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1SecurityGroupID"
        }
      ],
      "patch": {
        "description": "Update labels of the security group.",
        "operationId": "UpdateSecurityGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecurityGroupPayload"
              }
            }
          },
          "description": "Request an update of a security group.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup"
                }
              }
            },
            "description": "Updating security group successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a security group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups/{securityGroupId}/rules": {
      "get": {
        "description": "Get a list of all rules inside a security group.",
        "operationId": "ListSecurityGroupRules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRuleListResponse"
                }
              }
            },
            "description": "List all rules of a security group."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all rules for a security group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.rule.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1SecurityGroupID"
        }
      ],
      "post": {
        "description": "Create a new security group rule in a project.",
        "operationId": "CreateSecurityGroupRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityGroupRulePayload"
              }
            }
          },
          "description": "Request for a security group rule creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRule"
                }
              }
            },
            "description": "Security group rule create has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new security group rule.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.rule.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/security-groups/{securityGroupId}/rules/{securityGroupRuleId}": {
      "delete": {
        "description": "Delete a security group rule.",
        "operationId": "DeleteSecurityGroupRule",
        "responses": {
          "204": {
            "description": "Delete request for security group rule has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete security group rule.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.rule.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a security group rule of a project.",
        "operationId": "GetSecurityGroupRule",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupRule"
                }
              }
            },
            "description": "Show security group rule details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get security group rule details.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.security-group.rule.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1SecurityGroupID"
        },
        {
          "$ref": "#/components/parameters/v1SecurityGroupRuleID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/servers": {
      "get": {
        "description": "Get a list of all servers inside a project.",
        "operationId": "ListServers",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerDetail"
          },
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerListResponse"
                }
              }
            },
            "description": "List all servers of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all servers inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new server in a project.",
        "operationId": "CreateServer",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "BootFromExistingVolume": {
                  "value": {
                    "bootVolume": {
                      "source": {
                        "id": "70bb02f3-c11b-4321-bd78-8f8f4460f1b3",
                        "type": "volume"
                      }
                    },
                    "machineType": "t1.1",
                    "name": "bootFromExistingVolume",
                    "networking": "ef018b02-74e9-4f70-87bb-ce1a9742afb9"
                  }
                },
                "BootFromImage": {
                  "value": {
                    "image": "e24b1440-8d9c-431b-8da4-02916720fab5",
                    "machineType": "t1.1",
                    "name": "bootFromImage",
                    "networking": "ef018b02-74e9-4f70-87bb-ce1a9742afb9"
                  }
                },
                "BootImageFromVolume": {
                  "value": {
                    "bootVolume": {
                      "size": 10,
                      "source": {
                        "id": "e24b1440-8d9c-431b-8da4-02916720fab5",
                        "type": "image"
                      }
                    },
                    "machineType": "t1.1",
                    "name": "bootImageFromVolume",
                    "networking": "ef018b02-74e9-4f70-87bb-ce1a9742afb9"
                  }
                },
                "FullExample": {
                  "value": {
                    "affinityGroup": "6cccce46-8a28-4320-89e7-a7636ef03b75",
                    "availabilityZone": "eu01-1",
                    "bootVolume": {
                      "deleteOnTermination": false,
                      "performanceClass": "storage_premium_perf6",
                      "size": 40,
                      "source": {
                        "id": "e24b1440-8d9c-431b-8da4-02916720fab5",
                        "type": "image"
                      }
                    },
                    "keypair": "keypair-517e9448-1cf1-4b36-9f29-6e66d669a6d2",
                    "labels": {
                      "key": "value"
                    },
                    "machineType": "t1.1",
                    "name": "server1",
                    "networking": "ef018b02-74e9-4f70-87bb-ce1a9742afb9",
                    "securityGroups": [
                      "188de165-5767-4fc2-8710-a4d2017249e7"
                    ],
                    "serviceAccountMails": [
                      "example@compute.sa.stackit.cloud"
                    ],
                    "userData": "IyEvYmluL2Jhc2gKL2Jpbi9zdQplY2hvICJJIGFtIGluIHlvdSEiCg==",
                    "volumes": [
                      "70bb02f3-c11b-4321-bd78-8f8f4460f1b3"
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateServerPayload"
              }
            }
          },
          "description": "Request a server creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Create request for server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}": {
      "delete": {
        "description": "Delete a server. Volumes won't be deleted.",
        "operationId": "DeleteServer",
        "responses": {
          "204": {
            "description": "Delete request for server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a server by its ID.",
        "operationId": "GetServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerDetail"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Show server details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server details.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "patch": {
        "description": "Update name or labels of the server.",
        "operationId": "UpdateServer",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "ServerLabel": {
                  "value": {
                    "labels": {
                      "foo": "foobar"
                    }
                  }
                },
                "ServerName": {
                  "value": {
                    "name": "abfahrt"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateServerPayload"
              }
            }
          },
          "description": "Request an update of a server.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "Server has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/console": {
      "get": {
        "description": "Get a URL for server remote console.",
        "operationId": "GetServerConsole",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerConsoleUrl"
                }
              }
            },
            "description": "Show server console URL."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server console.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.console-url.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/deallocate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Deallocate an existing server. The server will be removed from the hypervisor so only the volume will be billed.",
        "operationId": "DeallocateServer",
        "responses": {
          "202": {
            "description": "Server deallocation request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Deallocate an existing server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.deallocate"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/log": {
      "get": {
        "description": "Get server console log.",
        "operationId": "GetServerLog",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LogLength"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "output": "Server Console log\nwith multiple lines"
                  },
                  "properties": {
                    "output": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Show server console log."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server log.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.console-log.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/networks/{networkId}": {
      "delete": {
        "description": "Detach and delete all network interfaces associated with the specified network from the server.",
        "operationId": "RemoveNetworkFromServer",
        "responses": {
          "204": {
            "description": "Detach and delete network interface was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach and delete all network interfaces associated with the specified network.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.network.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        },
        {
          "$ref": "#/components/parameters/v1NetworkID"
        }
      ],
      "post": {
        "description": "Create and attach a network interface from the specified network to the server.",
        "operationId": "AddNetworkToServer",
        "responses": {
          "202": {
            "description": "Create and attach network interface was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create and attach a network interface from the specified network.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.network.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/nics": {
      "get": {
        "description": "Get all network interfaces attached to the server.",
        "operationId": "ListServerNics",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NICListResponse"
                }
              }
            },
            "description": "List network interfaces."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get all network interfaces.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.nic.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/nics/{nicId}": {
      "delete": {
        "description": "Detach a network interface from a server.",
        "operationId": "RemoveNicFromServer",
        "responses": {
          "204": {
            "description": "Network interface detachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a network interface.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.nic.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        },
        {
          "$ref": "#/components/parameters/v1NICID"
        }
      ],
      "put": {
        "description": "Attach an existing network interface to a server.",
        "operationId": "AddNicToServer",
        "responses": {
          "202": {
            "description": "Network interface attachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach an existing network interface.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.nic.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/public-ips/{publicIpId}": {
      "delete": {
        "description": "Dissociate a public IP on an existing server.",
        "operationId": "RemovePublicIpFromServer",
        "responses": {
          "204": {
            "description": "Detach Public IP from server was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ServerOrPublicIPNotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Dissociate a public IP from a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.public-ip.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        },
        {
          "$ref": "#/components/parameters/v1PublicIPID"
        }
      ],
      "put": {
        "description": "Associate a public IP to a server.",
        "operationId": "AddPublicIpToServer",
        "responses": {
          "202": {
            "description": "Attach Public IP to server was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Associate a public IP to the server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.public-ip.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/reboot": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Reboot the server. A soft reboot will attempt to gracefully shut down the server by passing the command to the operating system. A hard reboot will power cycle the server without waiting for the operating system to shutdown properly.",
        "operationId": "RebootServer",
        "parameters": [
          {
            "description": "Defines if it is a soft or a hard reboot.",
            "example": "soft",
            "in": "query",
            "name": "action",
            "schema": {
              "default": "soft",
              "type": "string",
              "x-extensible-enum": [
                "soft",
                "hard"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Server reboot request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Reboot the server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.reboot"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/rescue": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Rescue an existing server. It is shutdown and the initial image is attached as the boot volume, while the boot volume is attached as secondary volume and the server is booted.",
        "operationId": "RescueServer",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "image": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "$ref": "#/components/schemas/RescueServerPayload"
              }
            }
          },
          "description": "Request a server rescue.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Server rescue request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Rescue an existing server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.rescue"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/resize": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Resize the server to the given machine type.",
        "operationId": "ResizeServer",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "machineType": "t1.1"
              },
              "schema": {
                "$ref": "#/components/schemas/ResizeServerPayload"
              }
            }
          },
          "description": "Request a resize of a server.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Server resize request is accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Resize a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.resize"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/security-groups/{securityGroupId}": {
      "delete": {
        "description": "Remove a server from a attached security group.",
        "operationId": "RemoveSecurityGroupFromServer",
        "responses": {
          "204": {
            "description": "Security group detachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove a server from a security group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.security-group.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        },
        {
          "$ref": "#/components/parameters/v1SecurityGroupID"
        }
      ],
      "put": {
        "description": "Add an existing server to an existing security group.",
        "operationId": "AddSecurityGroupToServer",
        "responses": {
          "202": {
            "description": "Security group attachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add a server to a security group.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.security-group.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/service-accounts": {
      "get": {
        "description": "Get the list of the service accounts of the server.",
        "operationId": "ListServerServiceAccounts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountMailListResponse"
                }
              }
            },
            "description": "List service accounts."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all service accounts of the Server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.service-account.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/service-accounts/{serviceAccountMail}": {
      "delete": {
        "description": "Detach an additional service account from the server.",
        "operationId": "RemoveServiceAccountFromServer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountMailListResponse"
                }
              }
            },
            "description": "Service account detached from the server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a service account from a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.service-account.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        },
        {
          "$ref": "#/components/parameters/v1ServiceAccountMail"
        }
      ],
      "put": {
        "description": "Attach an additional service account to the server.",
        "operationId": "AddServiceAccountToServer",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountMailListResponse"
                }
              }
            },
            "description": "Service account attached to the server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach service account to a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.service-account.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/start": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Start an existing server or allocates the server if deallocated.",
        "operationId": "StartServer",
        "responses": {
          "202": {
            "description": "Server start request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Boot up a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.start"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Stops an existing server. The server will remain on the Hypervisor and will be charged full price for all resources attached to it. The attached resources will remain reserved. Useful particularly for vGPU servers.",
        "operationId": "StopServer",
        "responses": {
          "202": {
            "description": "Server stop request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Stop an existing server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.stop"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/unrescue": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ],
      "post": {
        "description": "Unrescue an existing server. The original boot volume is attached as boot volume of the server and the server is booted up.",
        "operationId": "UnrescueServer",
        "responses": {
          "202": {
            "description": "Server unrescue request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Unrescue an existing server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.unrescue"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/volume-attachments": {
      "get": {
        "description": "Get a list of all volume attachments of a server.",
        "operationId": "ListAttachedVolumes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachmentListResponse"
                }
              }
            },
            "description": "List volume attachments."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volume attachments of a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/volume-attachments/{volumeId}": {
      "delete": {
        "description": "Detach an existing volume from an existing server.",
        "operationId": "RemoveVolumeFromServer",
        "responses": {
          "204": {
            "description": "Volume detachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a volume from a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get the details of an existing Volume Attachment.",
        "operationId": "GetAttachedVolume",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            },
            "description": "Get details about a volume attachment."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Volume Attachment details.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1ServerID"
        },
        {
          "$ref": "#/components/parameters/v1VolumeID"
        }
      ],
      "patch": {
        "description": "Update the properties of an existing Volume Attachment.",
        "operationId": "UpdateAttachedVolume",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "deleteOnTermination": true
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateAttachedVolumePayload"
              }
            }
          },
          "description": "Request a volume attachment update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            },
            "description": "Response to update call. Provide the updated volume attachment object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update Volume Attachment Parameters.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "put": {
        "description": "Attach an existing volume to an existing server.",
        "operationId": "AddVolumeToServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVolumeToServerPayload"
              }
            }
          },
          "description": "Request a volume attachment creation."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeAttachment"
                }
              }
            },
            "description": "Volume attachment request was accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach a volume to a server.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/snapshots": {
      "get": {
        "description": "Get a list of all snapshots inside a project.",
        "operationId": "ListSnapshots",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotListResponse"
                }
              }
            },
            "description": "List project snapshots."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all snapshots inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.snapshot.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new Snapshot from a Volume in a project.",
        "operationId": "CreateSnapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "abfahrt",
                "volumeId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateSnapshotPayload"
              }
            }
          },
          "description": "Request a snapshot creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Create request for Snapshot accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Snapshot.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.snapshot.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/snapshots/{snapshotId}": {
      "delete": {
        "description": "Delete a snapshot that is part of the project.",
        "operationId": "DeleteSnapshot",
        "responses": {
          "204": {
            "description": "Snapshot delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a snapshot.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.snapshot.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a block device snapshot.",
        "operationId": "GetSnapshot",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Show snapshot details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a snapshot.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.snapshot.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1SnapshotID"
        }
      ],
      "patch": {
        "description": "Update information like name or labels of the snapshot.",
        "operationId": "UpdateSnapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "SnapshotLabel": {
                  "value": {
                    "labels": {
                      "foo": "foobar"
                    }
                  }
                },
                "SnapshotName": {
                  "value": {
                    "name": "abfahrt"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateSnapshotPayload"
              }
            }
          },
          "description": "Request an update of a snapshot.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Snapshot has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of the snapshot.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.snapshot.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/volume-performance-classes": {
      "get": {
        "description": "Get a list of all volume performance classes available inside a project.",
        "operationId": "ListVolumePerformanceClasses",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumePerformanceClassListResponse"
                }
              }
            },
            "description": "List volume performance classes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volume performance classes available for a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume-performance-class.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/volume-performance-classes/{volumePerformanceClass}": {
      "get": {
        "description": "Get details about a specific volume performance class.",
        "operationId": "GetVolumePerformanceClass",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumePerformanceClass"
                }
              }
            },
            "description": "Show volume performance class details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a volume performance class.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume-performance-class.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1VolumePerformanceClassName"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/volumes": {
      "get": {
        "description": "Get a list of all volumes inside a project.",
        "operationId": "ListVolumes",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1LabelSelector"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeListResponse"
                }
              }
            },
            "description": "List project volumes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volumes inside a project.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        }
      ],
      "post": {
        "description": "Create a new volume in a project. If a volume source is not provided, an empty volume will be created. The size property is required if no source or an image source is provided.",
        "operationId": "CreateVolume",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "EmptyVolume": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "size": 10
                  }
                },
                "FullExample": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "description": "A cool Volume description.",
                    "name": "VolumeName",
                    "performanceClass": "storage_premium_perf6",
                    "size": 40,
                    "source": {
                      "id": "6e344916-d5d5-46dd-a00b-351cd7f293e6",
                      "type": "image"
                    }
                  }
                },
                "VolumeFromBackup": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "source": {
                      "id": "cebeebb7-b984-4f0c-bc25-5ff124fe333b",
                      "type": "backup"
                    }
                  }
                },
                "VolumeFromImage": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "size": 10,
                    "source": {
                      "id": "6e344916-d5d5-46dd-a00b-351cd7f293e6",
                      "type": "image"
                    }
                  }
                },
                "VolumeFromSnapshot": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "source": {
                      "id": "40644648-4c6a-464e-bded-2a44c5b63e4a",
                      "type": "snapshot"
                    }
                  }
                },
                "VolumeFromVolume": {
                  "value": {
                    "availabilityZone": "eu01-1",
                    "source": {
                      "id": "8e96409e-077e-4324-9866-251912738c0f",
                      "type": "volume"
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateVolumePayload"
              }
            }
          },
          "description": "Request a volume creation.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "Create request for volume accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new volume.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/volumes/{volumeId}": {
      "delete": {
        "description": "Delete a volume inside a project. The deletion will fail if the volume is still in use.",
        "operationId": "DeleteVolume",
        "responses": {
          "204": {
            "description": "Volume delete request has been accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a volume.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Get details about a block device volume.",
        "operationId": "GetVolume",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "Show volume details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a volume.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1VolumeID"
        }
      ],
      "patch": {
        "description": "Update name, description or labels of the volume.",
        "operationId": "UpdateVolume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVolumePayload"
              }
            }
          },
          "description": "Request an update of a volume.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Volume"
                }
              }
            },
            "description": "Volume has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update information of a volume.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    },
    "/v1alpha1/projects/{projectId}/volumes/{volumeId}/resize": {
      "parameters": [
        {
          "$ref": "#/components/parameters/v1ProjectID"
        },
        {
          "$ref": "#/components/parameters/v1VolumeID"
        }
      ],
      "post": {
        "description": "Update the size of a block device volume. The new volume size must be larger than the current size.",
        "operationId": "ResizeVolume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResizeVolumePayload"
              }
            }
          },
          "description": "Request a volume resize."
        },
        "responses": {
          "202": {
            "description": "Volume resize request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update the size of a volume.",
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.resize"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://iaas.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": "eu01.",
          "enum": [
            "eu01."
          ]
        }
      }
    }
  ]
}