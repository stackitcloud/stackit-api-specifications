{
  "components": {
    "parameters": {
      "v1NetworkAreaID": {
        "description": "STACKIT Network Area ID.",
        "in": "path",
        "name": "areaId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkID": {
        "description": "STACKIT Network ID.",
        "in": "path",
        "name": "networkId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1NetworkRangeID": {
        "description": "STACKIT Network Range ID.",
        "in": "path",
        "name": "networkRangeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1OrganizationID": {
        "description": "STACKIT Organization ID.",
        "in": "path",
        "name": "organizationId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1ProjectID": {
        "description": "STACKIT Project ID.",
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      },
      "v1RequestID": {
        "description": "STACKIT Request ID.",
        "in": "path",
        "name": "requestId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ReqId"
        }
      },
      "v1RouteID": {
        "description": "STACKI Route ID.",
        "in": "path",
        "name": "routeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "InvalidAffinityPolicy": {
                "value": {
                  "code": 400,
                  "msg": "The server group policy is not supported"
                }
              },
              "InvalidBootDeviceSize": {
                "value": {
                  "code": 400,
                  "msg": "boot device size is not valid or missing"
                }
              },
              "InvalidFlavor": {
                "value": {
                  "code": 400,
                  "msg": "flavor is not valid"
                }
              },
              "InvalidParameter": {
                "value": {
                  "code": 400,
                  "msg": "request body has an error: doesn't match schema: Error at \"/name\": value must be a string"
                }
              },
              "InvalidPublicKey": {
                "value": {
                  "code": 400,
                  "msg": "invalid pubkey"
                }
              },
              "InvalidUUID": {
                "value": {
                  "code": 400,
                  "msg": "invalid uuid"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad request."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "code": 403,
              "msg": "Forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Forbidden Request."
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "code": 500,
              "msg": "internal server error"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error, returns a 500 if something is broken on IaaS API Side."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "AreaNotFound": {
                "value": {
                  "code": 404,
                  "msg": "area not found"
                }
              },
              "KeyPairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "KeypairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "NetworkNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network not found"
                }
              },
              "NetworkRangeNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network range not found"
                }
              },
              "OrganizationNotFound": {
                "value": {
                  "code": 404,
                  "msg": "organization not found"
                }
              },
              "ProjectNotFound": {
                "value": {
                  "code": 404,
                  "msg": "project not found"
                }
              },
              "RequestNotFound": {
                "value": {
                  "code": 404,
                  "msg": "request not found"
                }
              },
              "RouteNotFound": {
                "value": {
                  "code": 404,
                  "msg": "route not found"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Object not found."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "code": 401,
              "msg": "Unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Unauthorized Request."
      },
      "UpdateAccepted": {
        "description": "Update accepted."
      }
    },
    "schemas": {
      "Area": {
        "description": "The basic properties of a network area.",
        "properties": {
          "defaultNameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/NetworkRangeList"
          },
          "routes": {
            "$ref": "#/components/schemas/RouteList"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "type": "object"
      },
      "AreaConfig": {
        "description": "The basic network area object.",
        "properties": {
          "defaultNameservers": {
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "maxItems": 3,
            "type": "array"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/NetworkRangeList"
          },
          "routes": {
            "$ref": "#/components/schemas/RouteList"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "transferNetwork",
          "networkRanges"
        ],
        "type": "object"
      },
      "AreaDefaultPrefixLengthIPv4": {
        "description": "The default prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "AreaMaxPrefixLengthIPv4": {
        "description": "The maximal prefix length for networks in the network area.",
        "example": 29,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "AreaMinPrefixLengthIPv4": {
        "description": "The minimal prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 22,
        "type": "integer"
      },
      "AreaPrefixConfigIPv4": {
        "description": "The IPv4 prefix config for a network area.",
        "properties": {
          "defaultPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaDefaultPrefixLengthIPv4"
              }
            ],
            "default": 25
          },
          "maxPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaMaxPrefixLengthIPv4"
              }
            ],
            "default": 29
          },
          "minPrefixLen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AreaMinPrefixLengthIPv4"
              }
            ],
            "default": 24
          }
        },
        "type": "object"
      },
      "CIDR": {
        "description": "Classless Inter-Domain Routing (CIDR).",
        "example": "192.168.0.0/24",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(3[0-2]|2[0-9]|1[0-9]|[0-9]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "CreateAreaAddressFamily": {
        "description": "The addressFamily object for a area create request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/CreateAreaIPv4"
          }
        },
        "type": "object"
      },
      "CreateAreaIPv4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AreaConfig"
          },
          {
            "$ref": "#/components/schemas/AreaPrefixConfigIPv4"
          }
        ],
        "description": "The config object for a IPv4 network area."
      },
      "CreateNetworkAddressFamily": {
        "description": "The addressFamily object for a network create request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/CreateNetworkIPv4"
          }
        },
        "type": "object"
      },
      "CreateNetworkAreaPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/CreateAreaAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "name",
          "addressFamily"
        ],
        "type": "object"
      },
      "CreateNetworkAreaRangePayload": {
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/NetworkRangeList"
          }
        },
        "type": "object"
      },
      "CreateNetworkAreaRoutePayload": {
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/RouteList"
          }
        },
        "type": "object"
      },
      "CreateNetworkIPv4": {
        "description": "The config object for a IPv4 network.",
        "properties": {
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "prefixLength": {
            "default": 25,
            "example": 24,
            "maximum": 29,
            "minimum": 22,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateNetworkPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/CreateNetworkAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Error": {
        "description": "Error with HTTP error code and an error message.",
        "properties": {
          "code": {
            "example": 404,
            "type": "integer"
          },
          "msg": {
            "example": "Project not found",
            "type": "string"
          }
        },
        "required": [
          "code",
          "msg"
        ],
        "type": "object"
      },
      "GenericName": {
        "description": "The name for a General Object. Matches Names and also UUIDs.",
        "example": "objectName26",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|_|\\s|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "IP": {
        "description": "An IP address.",
        "example": "10.1.2.10",
        "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
        "type": "string"
      },
      "Nameserver": {
        "description": "List of DNS Servers/Nameservers.",
        "example": [
          "10.20.30.40",
          "50.60.70.80"
        ],
        "items": {
          "$ref": "#/components/schemas/IP"
        },
        "maxItems": 3,
        "type": "array"
      },
      "Network": {
        "description": "Object represents a network.",
        "properties": {
          "name": {
            "example": "My network",
            "type": "string"
          },
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          },
          "networkId": {
            "$ref": "#/components/schemas/UUID"
          },
          "prefixes": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/CIDR"
            },
            "type": "array"
          },
          "publicIp": {
            "$ref": "#/components/schemas/IP"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "networkId",
          "name",
          "state"
        ],
        "type": "object"
      },
      "NetworkArea": {
        "description": "Object represents a network area.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/UUID"
          },
          "ipv4": {
            "$ref": "#/components/schemas/NetworkAreaIPv4"
          },
          "name": {
            "example": "My network area",
            "type": "string"
          },
          "projectCount": {
            "$ref": "#/components/schemas/ProjectCount"
          },
          "state": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "areaId",
          "name",
          "projectCount",
          "state"
        ],
        "type": "object"
      },
      "NetworkAreaIPv4": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Area"
          },
          {
            "$ref": "#/components/schemas/AreaPrefixConfigIPv4"
          }
        ],
        "description": "The IPv4 properties of a network area."
      },
      "NetworkAreaList": {
        "description": "A list of Network areas.",
        "items": {
          "$ref": "#/components/schemas/NetworkArea"
        },
        "type": "array"
      },
      "NetworkAreaListResponse": {
        "description": "Network area list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkAreaList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NetworkList": {
        "description": "List of Networks.",
        "items": {
          "$ref": "#/components/schemas/Network"
        },
        "type": "array"
      },
      "NetworkListResponse": {
        "description": "Network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "NetworkRange": {
        "description": "Object representate a network range.",
        "properties": {
          "networkRangeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          }
        },
        "required": [
          "prefix"
        ],
        "type": "object"
      },
      "NetworkRangeList": {
        "description": "A list of Network ranges.",
        "items": {
          "$ref": "#/components/schemas/NetworkRange"
        },
        "maxItems": 64,
        "minItems": 1,
        "type": "array"
      },
      "NetworkRangeListResponse": {
        "description": "Network Range list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/NetworkRangeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "PartialUpdateNetworkAreaPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/UpdateAreaAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "PartialUpdateNetworkPayload": {
        "properties": {
          "addressFamily": {
            "$ref": "#/components/schemas/UpdateNetworkAddressFamily"
          },
          "name": {
            "$ref": "#/components/schemas/GenericName"
          }
        },
        "type": "object"
      },
      "ProjectCount": {
        "description": "The amount of projects currently referencing this area.",
        "example": 10,
        "minimum": 0,
        "type": "integer"
      },
      "ProjectList": {
        "description": "List of STACKIT projects.",
        "items": {
          "$ref": "#/components/schemas/UUID"
        },
        "type": "array"
      },
      "ProjectListResponse": {
        "description": "Project list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ProjectList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ReqId": {
        "description": "ID representing a single API request.",
        "example": "req-d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^req-[0-9a-f]{32}$",
        "type": "string"
      },
      "Request": {
        "description": "Request.",
        "properties": {
          "details": {
            "example": "This worked!",
            "type": "string"
          },
          "requestAction": {
            "$ref": "#/components/schemas/ResourceAction"
          },
          "requestId": {
            "$ref": "#/components/schemas/ReqId"
          },
          "requestType": {
            "$ref": "#/components/schemas/Resource"
          },
          "resources": {
            "example": [
              {
                "id": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "status": "CREATING",
                "type": "SERVER"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RequestResource"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          }
        },
        "required": [
          "requestId",
          "requestType",
          "requestAction",
          "resources",
          "status"
        ],
        "type": "object"
      },
      "RequestResource": {
        "description": "A resource as part of a request.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID"
          },
          "status": {
            "$ref": "#/components/schemas/ResourceState"
          },
          "type": {
            "$ref": "#/components/schemas/Resource"
          }
        },
        "required": [
          "type",
          "id",
          "status"
        ],
        "type": "object"
      },
      "Resource": {
        "description": "Resource type.",
        "example": "SERVER",
        "type": "string"
      },
      "ResourceAction": {
        "description": "Resource action.",
        "example": "CREATE",
        "type": "string"
      },
      "ResourceState": {
        "description": "The state of a resource object.",
        "example": "CREATING",
        "type": "string"
      },
      "Route": {
        "description": "Object represents a network route.",
        "properties": {
          "nexthop": {
            "$ref": "#/components/schemas/IP"
          },
          "prefix": {
            "$ref": "#/components/schemas/CIDR"
          },
          "routeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "prefix",
          "nexthop"
        ],
        "type": "object"
      },
      "RouteList": {
        "description": "List of routes.",
        "items": {
          "$ref": "#/components/schemas/Route"
        },
        "type": "array"
      },
      "RouteListResponse": {
        "description": "Route list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/RouteList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "UUID": {
        "description": "Universally Unique Identifier (UUID).",
        "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
        "format": "uuid",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      },
      "UpdateAreaAddressFamily": {
        "description": "The addressFamily object for a area update request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/UpdateAreaIPv4"
          }
        },
        "type": "object"
      },
      "UpdateAreaIPv4": {
        "description": "The update object for a IPv4 network area.",
        "properties": {
          "defaultNameservers": {
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "maxItems": 3,
            "type": "array"
          },
          "defaultPrefixLen": {
            "$ref": "#/components/schemas/AreaDefaultPrefixLengthIPv4"
          },
          "maxPrefixLen": {
            "$ref": "#/components/schemas/AreaMaxPrefixLengthIPv4"
          },
          "minPrefixLen": {
            "$ref": "#/components/schemas/AreaMinPrefixLengthIPv4"
          }
        },
        "type": "object"
      },
      "UpdateNetworkAddressFamily": {
        "description": "The addressFamily object for a network update request.",
        "minProperties": 1,
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/UpdateNetworkIPv4"
          }
        },
        "type": "object"
      },
      "UpdateNetworkIPv4": {
        "description": "The config object for a IPv4 network update.",
        "properties": {
          "nameservers": {
            "$ref": "#/components/schemas/Nameserver"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-iaas@mail.schwarz",
      "name": "STACKIT IaaS Teams",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "This API allows you to create and modify IaaS resources.",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "IaaS-API",
    "version": "1beta1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1beta1/organizations/{organizationId}/network-areas": {
      "get": {
        "description": "Get a list of all visible network areas defined in an organization.",
        "operationId": "ListNetworkAreas",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkAreaListResponse"
                }
              }
            },
            "description": "Get a list of network areas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network areas in an organization."
      },
      "post": {
        "description": "Create a new network area in an organization.",
        "operationId": "CreateNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "defaultNameservers": [
                      "10.1.2.10"
                    ],
                    "defaultPrefixLen": 24,
                    "maxPrefixLen": 28,
                    "minPrefixLen": 22,
                    "networkRanges": [
                      {
                        "prefix": "10.0.0.0/16"
                      }
                    ],
                    "routes": [
                      {
                        "nexthop": "10.1.2.10",
                        "prefix": "192.168.0.0/24"
                      }
                    ],
                    "transferNetwork": "10.1.2.0/24"
                  }
                },
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaPayload"
              }
            }
          },
          "description": "Area creation request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Area has been created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network area in an organization."
      }
    },
    "/v1beta1/organizations/{organizationId}/network-areas/{areaId}": {
      "delete": {
        "description": "Delete an existing network area in an organization. This is only possible if no projects are using the area anymore.",
        "operationId": "DeleteNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for area accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Areas must no longer be referenced by any project to be deleted"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Tried to delete an area that was still in use by a project."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network area."
      },
      "get": {
        "description": "Get details about a network area in an organization.",
        "operationId": "GetNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Show network area details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network area."
      },
      "patch": {
        "description": "Update the settings of a network area in an organization.",
        "operationId": "PartialUpdateNetworkArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "defaultNameservers": [
                      "10.1.2.10"
                    ],
                    "defaultPrefixLen": 24,
                    "maxPrefixLen": 26,
                    "minPrefixLen": 22
                  }
                },
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateNetworkAreaPayload"
              }
            }
          },
          "description": "Area update request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkArea"
                }
              }
            },
            "description": "Area has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network area settings."
      }
    },
    "/v1beta1/organizations/{organizationId}/network-areas/{areaId}/network-ranges": {
      "get": {
        "description": "Get a list of all network ranges in a network area.",
        "operationId": "ListNetworkAreaRanges",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRangeListResponse"
                }
              }
            },
            "description": "List network ranges."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network ranges in a network area."
      },
      "post": {
        "description": "Create a new network range in an existing network area.",
        "operationId": "CreateNetworkAreaRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ipv4": [
                  {
                    "prefix": "10.1.2.0/24"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaRangePayload"
              }
            }
          },
          "description": "Add network ranges to an area request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRangeListResponse"
                }
              }
            },
            "description": "Adding network ranges was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Network ranges must not overlap with other network ranges or transfer networks"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Tried to add a network range that conflicts with an existing network range or transfer range."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network range in a network area."
      }
    },
    "/v1beta1/organizations/{organizationId}/network-areas/{areaId}/network-ranges/{networkRangeId}": {
      "delete": {
        "description": "Delete a network range of a network area.",
        "operationId": "DeleteNetworkAreaRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkRangeID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network range accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Network ranges must no longer be used to be deleted"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Tried to delete a network range that is still in use."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network range."
      },
      "get": {
        "description": "Get details about a network range in a network area.",
        "operationId": "GetNetworkAreaRange",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkRangeID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkRange"
                }
              }
            },
            "description": "Show network range details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network range."
      }
    },
    "/v1beta1/organizations/{organizationId}/network-areas/{areaId}/projects": {
      "get": {
        "description": "Get a list of all projects using a network area.",
        "operationId": "ListNetworkAreaProjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            },
            "description": "List projects for a network area."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all projects using a network area."
      }
    },
    "/v1beta1/organizations/{organizationId}/network-areas/{areaId}/routes": {
      "get": {
        "description": "Get a list of all network routes defined in a network area.",
        "operationId": "ListNetworkAreaRoutes",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteListResponse"
                }
              }
            },
            "description": "List network routes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network routes in a network area."
      },
      "post": {
        "description": "Create one or several new network routes in a network area.",
        "operationId": "CreateNetworkAreaRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ipv4": [
                  {
                    "nexthop": "10.1.2.10",
                    "prefix": "192.168.0.0/24"
                  }
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkAreaRoutePayload"
              }
            }
          },
          "description": "Add routes to an area request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteListResponse"
                }
              }
            },
            "description": "Create request for network routes accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "routes must not overlap with other network ranges or transfer networks"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Tried to add a route that conflicts with an existing network range or transfer range."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network routes."
      }
    },
    "/v1beta1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}": {
      "delete": {
        "description": "Delete a network route of a network area.",
        "operationId": "DeleteNetworkAreaRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1RouteID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network route accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network route."
      },
      "get": {
        "description": "Get details about a network route defined in a network area.",
        "operationId": "GetNetworkAreaRoute",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1RouteID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Route"
                }
              }
            },
            "description": "Show route details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network route."
      }
    },
    "/v1beta1/organizations/{organizationId}/requests/{requestId}": {
      "get": {
        "description": "Lookup an organization request ID from a previous request. This allows to find resource IDs of resources generated during a organization request.",
        "operationId": "GetOrganizationRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1RequestID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "description": "Show organization request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup an organization request ID."
      }
    },
    "/v1beta1/projects/{projectId}/networks": {
      "get": {
        "description": "Get a list of all networks inside a project.",
        "operationId": "ListNetworks",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkListResponse"
                }
              }
            },
            "description": "List all networks of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all networks inside a project."
      },
      "post": {
        "description": "Create a new network in a project. `nameservers` will be filled from `defaultNameservers` of the respective area if not specified. If the project has `internetAccess` enabled and this is the first network in the project this might incur cost.",
        "operationId": "CreateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "nameservers": [
                      "10.1.2.10"
                    ],
                    "prefixLength": 24
                  }
                },
                "name": "My Network"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkPayload"
              }
            }
          },
          "description": "Create network request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            },
            "description": "Create accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Can not allocate prefixes for network. Ensure the area has sufficient space in the configured network ranges"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Can not allocate prefixes for network."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network."
      }
    },
    "/v1beta1/projects/{projectId}/networks/{networkId}": {
      "delete": {
        "description": "Delete a network.",
        "operationId": "DeleteNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Can not delete network. It is still has systems connected to it."
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Can not delete network that is still in use."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete network."
      },
      "get": {
        "description": "Get details about a network.",
        "operationId": "GetNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            },
            "description": "Show network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get network details."
      },
      "patch": {
        "description": "Update the settings of a network.",
        "operationId": "PartialUpdateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressFamily": {
                  "ipv4": {
                    "nameservers": [
                      "10.1.2.10"
                    ]
                  }
                },
                "name": "My Network"
              },
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateNetworkPayload"
              }
            }
          },
          "description": "Update network request.",
          "required": true
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/UpdateAccepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network settings."
      }
    },
    "/v1beta1/projects/{projectId}/requests/{requestId}": {
      "get": {
        "description": "Lookup a project request ID from a previous request. This allows to find resource IDs of resources generated during a projects request.",
        "operationId": "GetProjectRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1RequestID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Request"
                }
              }
            },
            "description": "Show project request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup a project request ID."
      }
    }
  },
  "servers": [
    {
      "url": "https://iaas.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": "eu01.",
          "enum": [
            "eu01."
          ]
        }
      }
    }
  ]
}