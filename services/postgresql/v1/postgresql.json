{
  "components": {
    "parameters": {
      "instanceId": {
        "description": "Instance id",
        "in": "path",
        "name": "instanceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "projectId": {
        "description": "Project id on which user has permissions",
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad Request"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Not Found"
      },
      "ServerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error"
      }
    },
    "schemas": {
      "Credentials": {
        "properties": {
          "host": {
            "type": "string"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "uri": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "host",
          "username",
          "password"
        ],
        "type": "object"
      },
      "CredentialsListItem": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "CredentialsResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "raw": {
            "$ref": "#/components/schemas/RawCredentials"
          },
          "uri": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "uri"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "description": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "description"
        ],
        "type": "object"
      },
      "Instance": {
        "properties": {
          "cfGuid": {
            "type": "string"
          },
          "cfOrganizationGuid": {
            "type": "string"
          },
          "cfSpaceGuid": {
            "type": "string"
          },
          "dashboardUrl": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "instanceId": {
            "type": "string"
          },
          "lastOperation": {
            "$ref": "#/components/schemas/InstanceLastOperation"
          },
          "name": {
            "type": "string"
          },
          "offeringName": {
            "deprecated": true,
            "type": "string"
          },
          "offeringVersion": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/Object"
          },
          "planId": {
            "type": "string"
          },
          "planName": {
            "type": "string"
          },
          "status": {
            "enum": [
              "active",
              "failed",
              "stopped",
              "creating",
              "deleting",
              "updating"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "planId",
          "planName",
          "offeringName",
          "offeringVersion",
          "dashboardUrl",
          "cfGuid",
          "cfSpaceGuid",
          "cfOrganizationGuid",
          "imageUrl",
          "parameters",
          "lastOperation"
        ],
        "type": "object"
      },
      "InstanceParameters": {
        "properties": {
          "archive_timeout": {
            "default": 3600,
            "description": "The units of the property are seconds.",
            "minimum": 60,
            "type": "integer"
          },
          "client_min_messages": {
            "default": "NOTICE",
            "enum": [
              "DEBUG5",
              "DEBUG4",
              "DEBUG3",
              "DEBUG2",
              "DEBUG1",
              "LOG",
              "NOTICE",
              "WARNING",
              "ERROR",
              "FATAL",
              "PANIC"
            ],
            "type": "string"
          },
          "continuous_archiving": {
            "default": "disabled",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "data_checksums": {
            "default": "enabled",
            "description": "This option can only be set during creation of the service instance, and cannot be changed later.",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "delete_plugins": {
            "items": {
              "enum": [
                "postgis",
                "uuid-ossp",
                "ltree",
                "pgcrypto",
                "citext",
                "pg_stat_statements",
                "fuzzystrmatch",
                "pg_trgm",
                "hstore",
                "vector"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "effective_cache_size": {
            "description": "The units of the property are MB. Please note, that our BOSH release includes an algorithm which calculates a usable value for this property on the fly based on the resources of the VM running.",
            "minimum": 1,
            "type": "integer"
          },
          "enable_monitoring": {
            "default": false,
            "type": "boolean"
          },
          "graphite": {
            "description": "If you want to monitor your service with Graphite, you can set the custom parameter graphite. It expects the host and port where the Graphite metrics should be sent to.",
            "example": "yourspace.your-graphite-endpoint.com:12345",
            "type": "string"
          },
          "idle_in_transaction_session_timeout": {
            "default": 0,
            "description": "The units of the property are milliseconds.",
            "type": "integer"
          },
          "install_plugins": {
            "description": "The plugins pgcrypto and citext are enabled by default.",
            "items": {
              "enum": [
                "postgis",
                "uuid-ossp",
                "ltree",
                "pgcrypto",
                "citext",
                "pg_stat_statements",
                "fuzzystrmatch",
                "pg_trgm",
                "hstore",
                "vector"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "log_error_verbosity": {
            "default": "TERSE",
            "enum": [
              "TERSE",
              "DEFAULT",
              "VERBOSE"
            ],
            "type": "string"
          },
          "log_min_duration_statement": {
            "default": -1,
            "minimum": -1,
            "type": "integer"
          },
          "log_statement": {
            "default": "none",
            "enum": [
              "none",
              "ddl",
              "mod",
              "all"
            ],
            "type": "string"
          },
          "loglevel": {
            "default": "DEBUG",
            "enum": [
              "DEBUG",
              "INFO"
            ],
            "type": "string"
          },
          "maintenance_work_mem": {
            "description": "The units of the property are kilobytes.",
            "type": "integer"
          },
          "max_connections": {
            "description": "You cannot decrease max_connections as this will break clustering. The default value increases with instance size.",
            "type": "integer"
          },
          "max_disk_threshold": {
            "default": 80,
            "description": "This component monitors ephemeral and persistent disk usage. If one of these disk usages reaches the default configured threshold of 80%, the a9s Parachute stops all processes on that node.",
            "example": 90,
            "type": "integer"
          },
          "max_replication_slots": {
            "default": 0,
            "minimum": 0,
            "type": "integer"
          },
          "max_wal_senders": {
            "default": 0,
            "minimum": 0,
            "type": "integer"
          },
          "metric_databases": {
            "description": "Expects an array of database names. If the parameter is not set or the array is set to empty, then metrics will be collected for all databases.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metric_pg_database_size": {
            "default": 300,
            "type": "integer"
          },
          "metric_pg_replication": {
            "default": 10,
            "type": "integer"
          },
          "metric_pg_stat_all_indexes": {
            "default": 0,
            "type": "integer"
          },
          "metric_pg_stat_all_tables": {
            "default": 0,
            "type": "integer"
          },
          "metric_pg_stat_archiver_table": {
            "default": 0,
            "type": "integer"
          },
          "metric_pg_stat_database": {
            "default": 0,
            "type": "integer"
          },
          "metric_pg_stat_database_conflicts": {
            "default": 0,
            "type": "integer"
          },
          "metric_pg_statio_all_indexes": {
            "default": 0,
            "type": "integer"
          },
          "metric_pg_statio_all_tables": {
            "default": 0,
            "type": "integer"
          },
          "metrics_frequency": {
            "default": 10,
            "description": "Frequency of metrics being emitted in seconds",
            "type": "integer"
          },
          "metrics_prefix": {
            "description": "Depending on your graphite provider, you might need to prefix the metrics with a certain value, like an API key for example.",
            "example": "my-prefix",
            "type": "string"
          },
          "monitoring_instance_id": {
            "type": "string"
          },
          "pg_log_min_error_statement": {
            "default": "ERROR",
            "enum": [
              "DEBUG5",
              "DEBUG4",
              "DEBUG3",
              "DEBUG2",
              "DEBUG1",
              "LOG",
              "NOTICE",
              "WARNING",
              "ERROR",
              "FATAL",
              "PANIC"
            ],
            "type": "string"
          },
          "pg_log_min_messages": {
            "default": "WARNING",
            "enum": [
              "DEBUG5",
              "DEBUG4",
              "DEBUG3",
              "DEBUG2",
              "DEBUG1",
              "LOG",
              "NOTICE",
              "WARNING",
              "ERROR",
              "FATAL",
              "PANIC"
            ],
            "type": "string"
          },
          "repmgr_loglevel": {
            "default": "NOTICE",
            "enum": [
              "DEBUG",
              "INFO",
              "NOTICE",
              "WARNING",
              "ERR",
              "ALERT",
              "CRIT",
              "EMERG"
            ],
            "type": "string"
          },
          "role_privileges": {
            "items": {
              "enum": [
                "CREATEDB",
                "CREATEROLE",
                "REPLICATION"
              ],
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sgw_acl": {
            "description": "Comma separated list of IP networks in CIDR notation which are allowed to access this instance.",
            "example": "0.0.0.0/0",
            "type": "string"
          },
          "shared_buffers": {
            "description": "The units of the property are MB.",
            "minimum": 1,
            "type": "integer"
          },
          "ssl_ciphers": {
            "default": "HIGH:MEDIUM:+3DES:!aNULL",
            "type": "string"
          },
          "ssl_min_protocol_version": {
            "default": "TLSv1",
            "enum": [
              "TLSv1",
              "TLSv1.1",
              "TLSv1.2",
              "TLSv1.3"
            ],
            "type": "string"
          },
          "statement_timeout": {
            "default": 0,
            "description": "The units of the property are milliseconds.",
            "type": "integer"
          },
          "synchronous_commit": {
            "default": "on",
            "enum": [
              "on",
              "remote_write",
              "remote_apply",
              "local",
              "off"
            ],
            "type": "string"
          },
          "syslog": {
            "example": [
              "logs4.your-syslog-endpoint.com:54321"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temp_file_limit": {
            "default": -1,
            "description": "An integer value greater than 0 kilobytes is expected. Alternatively -1 means no limit.",
            "type": "integer"
          },
          "temp_files": {
            "default": -1,
            "description": "The units of the property are kilobytes.",
            "minimum": -1,
            "type": "integer"
          },
          "track_io_timing": {
            "default": "off",
            "enum": [
              "on",
              "off"
            ],
            "type": "string"
          },
          "wal_level_logical": {
            "default": false,
            "type": "boolean"
          },
          "wal_writer_delay": {
            "default": 200,
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "work_mem": {
            "description": "The units of the property are kilobytes. Specifies the amount of memory to be used by internal sort operations and hash tables before writing to temporary disk files.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InstanceSchema": {
        "properties": {
          "create": {
            "$ref": "#/components/schemas/Schema"
          },
          "update": {
            "$ref": "#/components/schemas/Schema"
          }
        },
        "required": [
          "create",
          "update"
        ],
        "type": "object"
      },
      "Metrics": {
        "properties": {
          "metrics": {
            "items": {
              "$ref": "#/components/schemas/ListMetricsResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "metrics"
        ],
        "type": "object"
      },
      "Object": {
        "type": "object"
      },
      "Offering": {
        "properties": {
          "description": {
            "type": "string"
          },
          "documentationUrl": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "latest": {
            "type": "boolean"
          },
          "lifecycle": {
            "example": "deprecated",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plans": {
            "items": {
              "$ref": "#/components/schemas/Plan"
            },
            "type": "array"
          },
          "quotaCount": {
            "type": "integer"
          },
          "schema": {
            "$ref": "#/components/schemas/InstanceSchema"
          },
          "version": {
            "example": "11",
            "type": "string"
          }
        },
        "required": [
          "name",
          "version",
          "latest",
          "description",
          "displayName",
          "documentationUrl",
          "quotaCount",
          "imageUrl",
          "plans"
        ],
        "type": "object"
      },
      "Plan": {
        "properties": {
          "description": {
            "type": "string"
          },
          "free": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "skuName",
          "description",
          "free"
        ],
        "type": "object"
      },
      "RawCredentials": {
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/Credentials"
          }
        },
        "required": [
          "credentials"
        ],
        "type": "object"
      },
      "Schema": {
        "properties": {
          "parameters": {
            "type": "object"
          }
        },
        "required": [
          "parameters"
        ],
        "type": "object"
      },
      "CreateInstancePayload": {
        "properties": {
          "instanceName": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/InstanceParameters"
          },
          "planId": {
            "type": "string"
          }
        },
        "required": [
          "planId",
          "instanceName"
        ],
        "type": "object"
      },
      "PartialUpdateInstancePayload": {
        "properties": {
          "instanceName": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/InstanceParameters"
          },
          "planId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListCredentialsResponse": {
        "properties": {
          "credentialsList": {
            "items": {
              "$ref": "#/components/schemas/CredentialsListItem"
            },
            "type": "array"
          }
        },
        "required": [
          "credentialsList"
        ],
        "type": "object"
      },
      "Backup": {
        "properties": {
          "downloadable": {
            "type": "boolean"
          },
          "finished_at": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "triggered_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "finished_at"
        ],
        "type": "object"
      },
      "ListBackupsResponse": {
        "properties": {
          "instanceBackups": {
            "items": {
              "$ref": "#/components/schemas/Backup"
            },
            "type": "array"
          }
        },
        "required": [
          "instanceBackups"
        ],
        "type": "object"
      },
      "CreateInstanceResponse": {
        "properties": {
          "instanceId": {
            "type": "string"
          }
        },
        "required": [
          "instanceId"
        ],
        "type": "object"
      },
      "ListInstancesResponse": {
        "properties": {
          "instances": {
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "type": "array"
          }
        },
        "required": [
          "instances"
        ],
        "type": "object"
      },
      "ListMetricsResponse": {
        "properties": {
          "cpuIdleTime": {
            "type": "integer"
          },
          "cpuLoadPercent": {
            "type": "integer"
          },
          "cpuSystemTime": {
            "type": "integer"
          },
          "cpuUserTime": {
            "type": "integer"
          },
          "diskEphemeralTotal": {
            "type": "integer"
          },
          "diskEphemeralUsed": {
            "type": "integer"
          },
          "diskPersistentTotal": {
            "type": "integer"
          },
          "diskPersistentUsed": {
            "type": "integer"
          },
          "memoryTotal": {
            "type": "integer"
          },
          "memoryUsed": {
            "type": "integer"
          },
          "parachuteDiskEphemeralActivated": {
            "type": "integer"
          },
          "parachuteDiskEphemeralTotal": {
            "type": "integer"
          },
          "parachuteDiskEphemeralUsed": {
            "type": "integer"
          },
          "parachuteDiskEphemeralUsedPercent": {
            "type": "integer"
          },
          "parachuteDiskEphemeralUsedThreshold": {
            "type": "integer"
          },
          "parachuteDiskPersistentActivated": {
            "type": "integer"
          },
          "parachuteDiskPersistentTotal": {
            "type": "integer"
          },
          "parachuteDiskPersistentUsed": {
            "type": "integer"
          },
          "parachuteDiskPersistentUsedPercent": {
            "type": "integer"
          },
          "parachuteDiskPersistentUsedThreshold": {
            "type": "integer"
          }
        },
        "required": [
          "memoryTotal",
          "memoryUsed",
          "diskPersistentTotal",
          "diskPersistentUsed",
          "parachuteDiskPersistentTotal",
          "parachuteDiskPersistentUsed",
          "parachuteDiskPersistentUsedPercent",
          "parachuteDiskPersistentUsedThreshold",
          "parachuteDiskPersistentActivated",
          "diskEphemeralTotal",
          "diskEphemeralUsed",
          "parachuteDiskEphemeralTotal",
          "parachuteDiskEphemeralUsed",
          "parachuteDiskEphemeralUsedPercent",
          "parachuteDiskEphemeralUsedThreshold",
          "parachuteDiskEphemeralActivated",
          "cpuLoadPercent"
        ],
        "type": "object"
      },
      "ListOfferingsResponse": {
        "properties": {
          "offerings": {
            "items": {
              "$ref": "#/components/schemas/Offering"
            },
            "type": "array"
          }
        },
        "required": [
          "offerings"
        ],
        "type": "object"
      },
      "InstanceLastOperation": {
        "properties": {
          "description": {
            "type": "string"
          },
          "state": {
            "enum": [
              "in progress",
              "succeeded",
              "failed"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "create",
              "update",
              "delete"
            ],
            "type": "string"
          }
        },
        "required": [
          "state",
          "type",
          "description"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "url": "https://docs.stackit.cloud/stackit/en/support-area-72063304.html"
    },
    "description": "The STACKIT PostgreSQL API provides endpoints to list service offerings, manage service instances and service credentials within STACKIT portal projects.",
    "termsOfService": "https://www.stackit.de/en/general-terms-and-conditions/terms-of-use/",
    "title": "STACKIT PostgreSQL API",
    "version": "1.1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v1/projects/{projectId}/instances": {
      "get": {
        "description": "Get a list of available instances",
        "operationId": "ListInstances",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInstancesResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "get service instances list"
      },
      "post": {
        "description": "Provision a service instance.",
        "operationId": "CreateInstance",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstancePayload"
              }
            }
          },
          "description": "Parameters for the requested service instance provision",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateInstanceResponse"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "provision"
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}": {
      "delete": {
        "description": "Deprovision a service instance.",
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of instance being deleted",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Instance deletion is started"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "delete service instance"
      },
      "get": {
        "description": "get a service instance",
        "operationId": "GetInstance",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "410": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "get a service instance"
      },
      "patch": {
        "description": "Update a service instance. This could be a sgw acl update or a plan upgrade.",
        "operationId": "PartialUpdateInstance",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the instance being updated",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateInstancePayload"
              }
            }
          },
          "description": "Parameters for the requested update operation on service instance - sgw acl update, plan upgrade\n",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Instance update is started"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "update a service instance"
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/credentials": {
      "get": {
        "description": "get list all credentials ids for instance",
        "operationId": "ListCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCredentialsResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "get list of credentials ids"
      },
      "post": {
        "description": "Create new service credentials",
        "operationId": "CreateCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "summary": "create new credentials"
      }
    },
    "/v1/projects/{projectId}/instances/{instanceId}/credentials/{credentialsId}": {
      "delete": {
        "description": "Delete a service credentials.",
        "operationId": "DeleteCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "description": "Id of the credentials being deleted",
            "in": "path",
            "name": "credentialsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "delete credentials by id"
      },
      "get": {
        "description": "get a service credentials by credentials id",
        "operationId": "GetCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "description": "Credentials id of credentials to fetch",
            "in": "path",
            "name": "credentialsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "get credentials by id"
      }
    },
    "/v1/projects/{projectId}/offerings": {
      "get": {
        "description": "Get the service offerings that the service broker offers.",
        "operationId": "ListOfferings",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfferingsResponse"
                }
              }
            },
            "description": "Service plans response"
          }
        },
        "summary": "get the service offerings"
      }
    }
  },
  "servers": [
    {
      "url": "https://postgresql.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": "eu01.",
          "enum": [
            "eu01."
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Represents the request to use a Service Instance. Service Credentials contain the credentials that can then be used to communicate with the Service Instance.",
      "name": "Credentials"
    },
    {
      "description": "An instantiation of a Service Plan.",
      "name": "Instances"
    },
    {
      "description": "A list of all Offerings",
      "name": "Offerings"
    }
  ]
}