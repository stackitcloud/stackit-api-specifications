{
  "components": {
    "examples": {
      "BadRequest": {
        "value": {
          "error": "Bad Request",
          "message": "Validation of {param-one} failed.",
          "path": "/path/where/error/occurred",
          "status": 400,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "Forbidden": {
        "value": {
          "error": "Forbidden",
          "message": "Access to this resource is forbidden.",
          "path": "/path/where/error/occurred",
          "status": 403,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "NotFound": {
        "value": {
          "error": "Not Found",
          "message": "{resource} not found.",
          "path": "/path/where/error/occurred",
          "status": 404,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "PolicyConflict": {
        "value": {
          "error": "Conflict",
          "message": "Request aborted due conflict.",
          "path": "/path/where/error/occurred",
          "status": 409,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      }
    },
    "parameters": {
      "creation-time-start": {
        "description": "A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.",
        "in": "query",
        "name": "creation-time-start",
        "schema": {
          "example": "2021-01-20T00:00:00Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "cursor": {
        "description": "A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.",
        "in": "query",
        "name": "cursor",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "description": "The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 50,
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        }
      },
      "member": {
        "description": "E-Mail address of the user for whom the visible resource containers should be filtered.",
        "in": "query",
        "name": "member",
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "description": "The offset of the first item in the collection to return.",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        }
      },
      "recursive": {
        "description": "If true, list all children. If false, list only the next direct children.",
        "in": "query",
        "name": "recursive",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      },
      "showAll": {
        "description": "This query parameter is only used when the member parameter is set.\nIf the user has inherited permissions on a resource container, showAll=true takes them into account.\nWhereas showAll=false ignores inherited permissions.",
        "in": "query",
        "name": "showAll",
        "schema": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "schemas": {
      "AllFoldersResponse": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "containerId": {
                  "description": "Globally unique, user-friendly identifier.",
                  "example": "first-folder-158955",
                  "type": "string"
                },
                "creationTime": {
                  "description": "Timestamp at which the folder was created.",
                  "example": "2020-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                },
                "folderId": {
                  "description": "Globally unique, legacy folder identifier (for backward compatibility)",
                  "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
                  "format": "uuid",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/ResourceLabels"
                },
                "name": {
                  "description": "Name of the folder.",
                  "example": "My Folder",
                  "type": "string"
                },
                "parent": {
                  "$ref": "#/components/schemas/Parent"
                },
                "updateTime": {
                  "description": "Timestamp at which the folder was created.",
                  "example": "2020-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "parent",
                "containerId",
                "folderId",
                "creationTime",
                "updateTime"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ],
        "title": "AllFoldersResponse",
        "type": "object"
      },
      "AllOrgResponse": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "containerId": {
                  "description": "Globally unique, user-friendly identifier.",
                  "example": "my-organization-156846",
                  "type": "string"
                },
                "creationTime": {
                  "description": "Timestamp at which the organization was created.",
                  "example": "2021-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/ResourceLabels"
                },
                "lifecycleState": {
                  "$ref": "#/components/schemas/LifecycleState"
                },
                "name": {
                  "description": "Name of the organization.",
                  "example": "My Organization",
                  "type": "string"
                },
                "organizationId": {
                  "description": "Globally unique, legacy organization identifier (for backward compatibility)",
                  "example": "54066bf4-2bff-4f7b-9f83-fb23c348fee3",
                  "format": "uuid",
                  "type": "string"
                },
                "updateTime": {
                  "description": "Timestamp at which the organization was last modified.",
                  "example": "2021-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "containerId",
                "organizationId",
                "lifecycleState",
                "creationTime",
                "updateTime"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ],
        "title": "AllOrgResponse",
        "type": "object"
      },
      "AllProjectsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ProjectResponse"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ],
        "title": "AllProjectResponse",
        "type": "object"
      },
      "ContainerResponse": {
        "properties": {
          "cursor": {
            "$ref": "#/components/schemas/Cursor"
          },
          "items": {
            "items": {
              "anyOf": [
                {
                  "properties": {
                    "item": {
                      "$ref": "#/components/schemas/FolderResponse"
                    },
                    "type": {
                      "description": "Resource container type.",
                      "enum": [
                        "FOLDER"
                      ],
                      "example": "FOLDER",
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                },
                {
                  "properties": {
                    "item": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    },
                    "type": {
                      "description": "Resource container type.",
                      "enum": [
                        "PROJECT"
                      ],
                      "example": "PROJECT",
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                }
              ],
              "type": "object"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          }
        },
        "required": [
          "limit",
          "cursor",
          "items"
        ],
        "title": "Children",
        "type": "object"
      },
      "Cursor": {
        "description": "A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.",
        "example": "string",
        "title": "cursor",
        "type": "string"
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "description": "The reason phrase of the status code.",
            "example": "Bad Request",
            "type": "string"
          },
          "message": {
            "description": "Description of the error.",
            "example": "Validation of {param} failed.",
            "type": "string"
          },
          "path": {
            "description": "Path which was called.",
            "example": "/path/where/error/occurred",
            "type": "string"
          },
          "status": {
            "description": "Http Status Code.",
            "example": 400,
            "type": "number"
          },
          "timeStamp": {
            "description": "Timestamp at which the error occurred.",
            "example": "2019-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timeStamp",
          "path",
          "status",
          "error",
          "message"
        ],
        "type": "object"
      },
      "ExivityProject": {
        "properties": {
          "billingReferenceCode": {
            "description": "Billing reference of the project (if present)",
            "example": "T-0012535B",
            "type": "string"
          },
          "customerAccountId": {
            "description": "Globally unique, legacy organization identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "format": "uuid",
            "type": "string"
          },
          "deletedAt": {
            "description": "Timestamp at which the project was deleted",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "portalProjectId": {
            "description": "Globally unique, legacy project identifier",
            "example": "5fa85f64-5717-4762-b3fc-2c963f99dd99",
            "format": "uuid",
            "type": "string"
          },
          "portalProjectName": {
            "description": "Name of the project",
            "example": "MyProject",
            "type": "string"
          }
        },
        "required": [
          "customerAccountId",
          "portalProjectId",
          "portalProjectName"
        ],
        "title": "ExivityProject",
        "type": "object"
      },
      "ExivityResponse": {
        "items": {
          "$ref": "#/components/schemas/ExivityProject"
        },
        "title": "ExivityResponse",
        "type": "array"
      },
      "FolderMember": {
        "properties": {
          "role": {
            "description": "Unique name of the role.",
            "enum": [
              "owner",
              "member",
              "auditor"
            ],
            "example": "owner",
            "type": "string"
          },
          "subject": {
            "description": "Unique identifier of the user, service account, or client.",
            "example": "max.mustermann@mail.schwarz",
            "type": "string"
          }
        },
        "title": "FolderMember",
        "type": "object"
      },
      "FolderRequestBody": {
        "properties": {
          "containerParentId": {
            "description": "Identifier of the parent resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "members": {
            "description": "The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.",
            "items": {
              "$ref": "#/components/schemas/FolderMember"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "The name of the folder matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My Folder",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerParentId"
        ],
        "title": "FolderRequestBody",
        "type": "object"
      },
      "FolderResponse": {
        "description": "A Folder can have another folder as parent. 5 levels of nested folders are permitted.",
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "first-folder-158955",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the folder was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "folderId": {
            "description": "Globally unique, legacy folder identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
            "format": "uuid",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "name": {
            "description": "Folder name.",
            "example": "First Folder",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "updateTime": {
            "description": "Timestamp at which the folder was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerId",
          "folderId",
          "creationTime",
          "updateTime",
          "parent"
        ],
        "title": "FolderResponse",
        "type": "object"
      },
      "FolderResponseWithParents": {
        "description": "A Folder can have another folder as parent. 5 levels of nested folders are permitted.",
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "first-folder-158955",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the folder was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "folderId": {
            "description": "Globally unique, legacy folder identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
            "format": "uuid",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "name": {
            "description": "Folder name.",
            "example": "First Folder",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "parents": {
            "$ref": "#/components/schemas/ParentList"
          },
          "updateTime": {
            "description": "Timestamp at which the folder was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerId",
          "folderId",
          "creationTime",
          "updateTime",
          "parent"
        ],
        "title": "FolderResponse",
        "type": "object"
      },
      "LifecycleState": {
        "description": "Lifecycle state of the resource container.\n\n| LIFECYCLE STATE | DESCRIPTION |\n|----------|--------------------|\n| CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |\n| ACTIVE   | Resource container can be fully used. |\n| INACTIVE | Resource container usage has been disabled. |\n| DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |",
        "enum": [
          "CREATING",
          "ACTIVE",
          "DELETING",
          "INACTIVE"
        ],
        "example": "CREATING",
        "title": "LifecycleState",
        "type": "string"
      },
      "Limit": {
        "default": 50,
        "description": "The maximum number of projects to return in the response. If not present, an appropriate default will be used.",
        "maximum": 100,
        "minimum": 0,
        "title": "Limit",
        "type": "number"
      },
      "Offset": {
        "default": 0,
        "description": "The offset of the first item in the collection to return.",
        "minimum": 0,
        "title": "Offset",
        "type": "number"
      },
      "OrganizationMember": {
        "properties": {
          "role": {
            "description": "Unique name of the role.",
            "enum": [
              "owner",
              "organization.member",
              "organization.auditor"
            ],
            "type": "string"
          },
          "subject": {
            "description": "Unique identifier of the user, service account, or client.",
            "example": "max.musterman@mail.schwarz",
            "type": "string"
          }
        },
        "required": [
          "subject",
          "role"
        ],
        "type": "object"
      },
      "OrganizationRequestBody": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "members": {
            "description": "The initial members that are assigned to the organization. At least one subject needs to be a user and not a client or service account. ",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            },
            "type": "array"
          },
          "name": {
            "description": "The name for the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My Organization",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "required": [
          "name",
          "members"
        ],
        "title": "OrganizationRequestBody",
        "type": "object"
      },
      "OrganizationResponse": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "my-organization-184629",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the organization was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Organization name.",
            "example": "My Organization",
            "type": "string"
          },
          "organizationId": {
            "description": "Globally unique, legacy organization identifier (for backward compatibility)",
            "example": "54066bf4-2bff-4f7b-9f83-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp at which the organization was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerId",
          "organizationId",
          "lifecycleState",
          "creationTime",
          "updateTime"
        ],
        "type": "object"
      },
      "Parent": {
        "description": "Parent container.",
        "properties": {
          "containerId": {
            "description": "User-friendly identifier of either organization or folder (will replace id).",
            "example": "container-name-Rq86WY1",
            "type": "string"
          },
          "id": {
            "description": "Legacy identifier of either organization or folder (for backward compatibility). Field name according to parent object of v1.",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Container type of parent container.",
            "enum": [
              "ORGANIZATION",
              "FOLDER"
            ],
            "example": "ORGANIZATION",
            "type": "string"
          }
        },
        "required": [
          "containerId",
          "id",
          "type"
        ],
        "type": "object"
      },
      "ParentList": {
        "items": {
          "properties": {
            "containerId": {
              "description": "User-friendly identifier of either organization or folder (will replace id).",
              "example": "container-name-Rq86WY1",
              "type": "string"
            },
            "containerParentId": {
              "description": "User-friendly parent identifier of either organization or folder (will replace parentId).",
              "example": "parent-name-VuUfqh1",
              "type": "string"
            },
            "id": {
              "description": "Legacy identifier (for backward compatibility).",
              "example": "910a3330-8fad-42a7-ab2d-f214633cf047",
              "format": "uuid",
              "type": "string"
            },
            "name": {
              "description": "Parent container name.",
              "example": "My Organization",
              "type": "string"
            },
            "parentId": {
              "description": "Legacy identifier of the parent resource container (for backward compatibility).",
              "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
              "format": "uuid",
              "type": "string"
            },
            "type": {
              "description": "Parent container type.",
              "enum": [
                "FOLDER",
                "ORGANIZATION"
              ],
              "example": "ORGANIZATION",
              "type": "string"
            }
          },
          "required": [
            "name",
            "type",
            "id",
            "parentId",
            "containerId",
            "containerParentId"
          ],
          "type": "object"
        },
        "title": "ParentList",
        "type": "array"
      },
      "PatchFolderOrProject": {
        "properties": {
          "containerParentId": {
            "description": "New parent identifier for the resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "name": {
            "description": "New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "title": "PatchFolderOrProject",
        "type": "object"
      },
      "PatchOrganizationRequestBody": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "name": {
            "description": "The new name of the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My Organization",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "title": "PatchOrganizationRequestBody",
        "type": "object"
      },
      "ProjectMember": {
        "properties": {
          "role": {
            "description": "Unique name of the role.",
            "enum": [
              "owner",
              "member",
              "auditor"
            ],
            "example": "owner",
            "type": "string"
          },
          "subject": {
            "description": "Unique identifier of the user, service account, or client.",
            "example": "max.mustermann@mail.schwarz",
            "type": "string"
          }
        },
        "title": "ProjectMember",
        "type": "object"
      },
      "ProjectRequestBody": {
        "properties": {
          "containerParentId": {
            "description": "Identifier of the parent resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "members": {
            "description": "The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.",
            "items": {
              "$ref": "#/components/schemas/ProjectMember"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "Project name matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My first project",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerParentId",
          "members"
        ],
        "type": "object"
      },
      "ProjectResponse": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "my-first-project-45789",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the project was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Project name. ",
            "example": "My first project",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "projectId": {
            "description": "Globally unique, legacy project identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp at which the project was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parent",
          "containerId",
          "projectId",
          "lifecycleState",
          "updateTime",
          "creationTime"
        ],
        "title": "ProjectResponse",
        "type": "object"
      },
      "ProjectResponseWithParents": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "my-first-project-45789",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the project was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Project name. ",
            "example": "My first project",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "parents": {
            "$ref": "#/components/schemas/ParentList"
          },
          "projectId": {
            "description": "Globally unique, legacy project identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f66-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp at which the project was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parent",
          "containerId",
          "projectId",
          "lifecycleState",
          "updateTime",
          "creationTime"
        ],
        "title": "ProjectResponse",
        "type": "object"
      },
      "ResourceContainerSearchResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ResourceContainerSearchResult"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ResourceContainerSearchResult": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "my-container-N7jXQY1",
            "type": "string"
          },
          "containerType": {
            "description": "Resource container type.",
            "enum": [
              "PROJECT",
              "FOLDER"
            ],
            "type": "string"
          },
          "id": {
            "description": "Globally unique, legacy identifier (for backward compatibility)",
            "example": "4d8c80b4-ded9-44cf-81ac-4fc5a2f7fc87",
            "format": "uuid",
            "type": "string"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Resource container name.",
            "example": "My Container",
            "type": "string"
          }
        },
        "required": [
          "containerId",
          "id",
          "name",
          "containerType"
        ],
        "type": "object"
      },
      "ResourceLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies. \n- A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.\n- A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.",
        "maxProperties": 100,
        "title": "Labels",
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "SIT-STACKIT-Core-Platform-Security@mail.schwarz",
      "name": "SIT-STACKIT-Core-Platform-Security",
      "url": "https://developers.stackit.schwarz/"
    },
    "description": "API v2 to manage resource containers - organizations, folders, projects incl. labels\n\n### Resource Management\nSTACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations, \nfolders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.\n\n### Resource Hierarchy\nSTACKIT resource hierarchy defines the relationship of resource containers as tree structure with organizations as the root node. Folders and projects are optional \nchild elements referencing the organization as parent. STACKIT resource hierarchy allows to structure cloud-resources clearly providing flexibility and individuality \nfor fine grained access control, access inheritance, and policies.\n\nThe STACKIT resource hierarchy model can be compared to the folder concept of a Unix file system. A folder can have exactly one parent. Folder nesting allows to organize and to structure content while defining \nfine grained access permissions per folder. Within STACKIT resource hierarchy access is inherited, meaning if you have access to a resource container, you also have access to its child containers.\n- Users are assigned to resource containers as members by role\n- A user inherits permissions to all child containers\n\n### Organizations\nSTACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle.\n- Organizations are always the root node in resource hierarchy and do not have a parent\n\n### Folders\nSTACKIT folders allow to organize cloud-resources and to define fine-grained access control. A folder might represent departments, teams, user groups, components etc. \nFolders do not have a lifecycle as they act as structural element only.\n- Folders are optional\n- A folder can be created having either an organization, or a folder as parent\n- Folder names under the same parent must be unique (case insensitive)\n- Root organization cannot be changed\n\n### Projects\nSTACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies.\n- Projects are optional, but mandatory for cloud-resource usage\n- A project can be created having either an organization, or a folder as parent\n- A project must not have a project as parent\n- Project names under the same parent must not be unique\n- Root organization cannot be changed\n\n### Label\nSTACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried.\n- Policy-based, immutable labels may exists\n\n### Current Limits\n- Vertically - Maximum folder nesting level: 5\n- Horizontally - Maximum number of folders under one parent: 150\n- Maximum number of projects under one organization: 2.500\n- Maximum number of labels attached to one container: 100",
    "title": "Resource Manager API",
    "version": "2.0"
  },
  "openapi": "3.1.0",
  "paths": {},
  "servers": [
    {
      "url": "https://resource-manager.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": ""
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Organizations"
    },
    {
      "name": "Folders"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Private"
    }
  ]
}