{
  "components": {
    "examples": {
      "BadRequest": {
        "value": {
          "error": "Bad Request",
          "message": "Validation of {param-one} failed.",
          "path": "/path/where/error/occurred",
          "status": 400,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "Forbidden": {
        "value": {
          "error": "Forbidden",
          "message": "Access to this resource is forbidden.",
          "path": "/path/where/error/occurred",
          "status": 403,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "NotFound": {
        "value": {
          "error": "Not Found",
          "message": "{resource} not found.",
          "path": "/path/where/error/occurred",
          "status": 404,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      },
      "PolicyConflict": {
        "value": {
          "error": "Conflict",
          "message": "Request aborted due conflict.",
          "path": "/path/where/error/occurred",
          "status": 409,
          "timeStamp": "2019-08-24T14:15:22Z"
        }
      }
    },
    "parameters": {
      "creation-time-start": {
        "description": "A timestamp to specify the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.",
        "in": "query",
        "name": "creation-time-start",
        "schema": {
          "example": "2021-01-20T00:00:00Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "limit": {
        "description": "The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.",
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 50,
          "maximum": 100,
          "minimum": 0,
          "type": "number"
        }
      },
      "member": {
        "description": "E-Mail address of the user for whom the visible resource containers should be filtered.",
        "in": "query",
        "name": "member",
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "description": "The offset of the first item in the collection to return.",
        "in": "query",
        "name": "offset",
        "schema": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        }
      }
    },
    "schemas": {
      "ContainerSearchResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ContainerSearchResult"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "title": "ContainerSearchResponse",
        "type": "object"
      },
      "CreateFolderPayload": {
        "properties": {
          "containerParentId": {
            "description": "Identifier of the parent resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "description": "The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "The name of the folder matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My Folder",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerParentId"
        ],
        "title": "CreateFolderRequest",
        "type": "object"
      },
      "CreateProjectPayload": {
        "properties": {
          "containerParentId": {
            "description": "Identifier of the parent resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "members": {
            "description": "The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "Project name matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My first project",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerParentId",
          "members"
        ],
        "title": "CreateProjectRequest",
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "description": "The reason phrase of the status code.",
            "example": "Bad Request",
            "type": "string"
          },
          "message": {
            "description": "Description of the error.",
            "example": "Validation of {param} failed.",
            "type": "string"
          },
          "path": {
            "description": "Path which was called.",
            "example": "/path/where/error/occurred",
            "type": "string"
          },
          "status": {
            "description": "Http Status Code.",
            "example": 400,
            "type": "number"
          },
          "timeStamp": {
            "description": "Timestamp at which the error occurred.",
            "example": "2019-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timeStamp",
          "path",
          "status",
          "error",
          "message"
        ],
        "title": "ErrorResponse",
        "type": "object"
      },
      "FolderResponse": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "first-folder-158955",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the folder was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "folderId": {
            "description": "Globally unique folder identifier.",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
            "format": "uuid",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "description": "Folder name.",
            "example": "First Folder",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "updateTime": {
            "description": "Timestamp at which the folder was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerId",
          "folderId",
          "creationTime",
          "updateTime",
          "parent"
        ],
        "title": "FolderResponse",
        "type": "object"
      },
      "GetFolderDetailsResponse": {
        "properties": {
          "containerId": {
            "description": "Globally unique user-friendly identifier.",
            "example": "first-folder-158955",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the folder was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "folderId": {
            "description": "Globally unique folder identifier.",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
            "format": "uuid",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "description": "Folder name.",
            "example": "First Folder",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "parents": {
            "$ref": "#/components/schemas/ParentList"
          },
          "updateTime": {
            "description": "Timestamp at which the folder was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerId",
          "folderId",
          "creationTime",
          "updateTime",
          "parent"
        ],
        "title": "GetFolderDetailsResponse",
        "type": "object"
      },
      "GetProjectResponse": {
        "properties": {
          "containerId": {
            "description": "Globally unique identifier.",
            "example": "my-first-project-45789",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the project was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Project name.",
            "example": "My first project",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "parents": {
            "$ref": "#/components/schemas/ParentList"
          },
          "projectId": {
            "description": "Globally unique identifier.",
            "example": "54066bf4-1aff-4f7b-9f66-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp at which the project was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parent",
          "containerId",
          "projectId",
          "lifecycleState",
          "updateTime",
          "creationTime"
        ],
        "title": "GetProjectDetailsResponse",
        "type": "object"
      },
      "Labels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Labels are key-value string pairs that can be attached to a resource container. Some labels may be enforced via policies. \n- A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.\n- A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.",
        "maxProperties": 100,
        "title": "Labels",
        "type": "object"
      },
      "LifecycleState": {
        "description": "Lifecycle state of the resource container.\n\n| LIFECYCLE STATE | DESCRIPTION |\n|----------|--------------------|\n| CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |\n| ACTIVE   | Resource container can be fully used. |\n| INACTIVE | Resource container usage has been disabled. |\n| DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |",
        "enum": [
          "CREATING",
          "ACTIVE",
          "DELETING",
          "INACTIVE"
        ],
        "example": "CREATING",
        "title": "LifecycleState",
        "type": "string"
      },
      "Limit": {
        "default": 50,
        "description": "The maximum number of projects to return in the response. If not present, an appropriate default will be used.",
        "maximum": 100,
        "minimum": 0,
        "title": "Limit",
        "type": "number"
      },
      "ListFoldersResponse": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "containerId": {
                  "description": "Globally unique folder identifier.",
                  "example": "first-folder-158955",
                  "type": "string"
                },
                "creationTime": {
                  "description": "Timestamp at which the folder was created.",
                  "example": "2020-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                },
                "folderId": {
                  "description": "Globally unique folder identifier.",
                  "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
                  "format": "uuid",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/Labels"
                },
                "name": {
                  "description": "Name of the folder.",
                  "example": "My Folder",
                  "type": "string"
                },
                "parent": {
                  "$ref": "#/components/schemas/Parent"
                },
                "updateTime": {
                  "description": "Timestamp at which the folder was created.",
                  "example": "2020-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "parent",
                "containerId",
                "folderId",
                "creationTime",
                "updateTime"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ],
        "title": "ListFoldersResponse",
        "type": "object"
      },
      "ListOrganizationsResponse": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "containerId": {
                  "description": "Globally unique, user-friendly identifier.",
                  "example": "my-organization-156846",
                  "type": "string"
                },
                "creationTime": {
                  "description": "Timestamp at which the organization was created.",
                  "example": "2021-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                },
                "labels": {
                  "$ref": "#/components/schemas/Labels"
                },
                "lifecycleState": {
                  "$ref": "#/components/schemas/LifecycleState"
                },
                "name": {
                  "description": "Name of the organization.",
                  "example": "My Organization",
                  "type": "string"
                },
                "organizationId": {
                  "description": "Globally unique, organization identifier.",
                  "example": "54066bf4-2bff-4f7b-9f83-fb23c348fee3",
                  "format": "uuid",
                  "type": "string"
                },
                "updateTime": {
                  "description": "Timestamp at which the organization was last modified.",
                  "example": "2021-08-24T14:15:22Z",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "containerId",
                "organizationId",
                "lifecycleState",
                "creationTime",
                "updateTime"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ],
        "title": "ListOrganizationsResponse",
        "type": "object"
      },
      "ListProjectsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "type": "array"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "offset": {
            "$ref": "#/components/schemas/Offset"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ],
        "title": "ListProjectsResponse",
        "type": "object"
      },
      "Member": {
        "properties": {
          "role": {
            "description": "A valid role defined for the resource.",
            "type": "string"
          },
          "subject": {
            "description": "Unique identifier of the user, service account or client.",
            "example": "max.musterman@mail.schwarz",
            "type": "string"
          }
        },
        "required": [
          "subject",
          "role"
        ],
        "title": "Member",
        "type": "object"
      },
      "Offset": {
        "default": 0,
        "description": "The offset of the first item in the collection to return.",
        "minimum": 0,
        "title": "Offset",
        "type": "number"
      },
      "OrganizationResponse": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "my-organization-184629",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the organization was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Organization name.",
            "example": "My Organization",
            "type": "string"
          },
          "organizationId": {
            "description": "Globally unique, organization identifier.",
            "example": "54066bf4-2bff-4f7b-9f83-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp at which the organization was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "containerId",
          "organizationId",
          "lifecycleState",
          "creationTime",
          "updateTime"
        ],
        "title": "OrganizationResponse",
        "type": "object"
      },
      "Parent": {
        "description": "Parent container.",
        "properties": {
          "containerId": {
            "description": "User-friendly identifier of either organization or folder (will replace id).",
            "example": "container-name-Rq86WY1",
            "type": "string"
          },
          "id": {
            "description": "Identifier of either organization or folder.",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Container type of parent container.",
            "enum": [
              "ORGANIZATION",
              "FOLDER"
            ],
            "example": "ORGANIZATION",
            "type": "string"
          }
        },
        "required": [
          "containerId",
          "id",
          "type"
        ],
        "title": "Parent",
        "type": "object"
      },
      "ParentList": {
        "items": {
          "properties": {
            "containerId": {
              "description": "User-friendly identifier of either organization or folder (will replace id).",
              "example": "container-name-Rq86WY1",
              "type": "string"
            },
            "containerParentId": {
              "description": "User-friendly parent identifier of either organization or folder (will replace parentId).",
              "example": "parent-name-VuUfqh1",
              "type": "string"
            },
            "id": {
              "description": "Identifier.",
              "example": "910a3330-8fad-42a7-ab2d-f214633cf047",
              "format": "uuid",
              "type": "string"
            },
            "name": {
              "description": "Parent container name.",
              "example": "My Organization",
              "type": "string"
            },
            "parentId": {
              "description": "Identifier of the parent resource container.",
              "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
              "format": "uuid",
              "type": "string"
            },
            "type": {
              "description": "Parent container type.",
              "enum": [
                "FOLDER",
                "ORGANIZATION"
              ],
              "example": "ORGANIZATION",
              "type": "string"
            }
          },
          "required": [
            "name",
            "type",
            "id",
            "containerId"
          ],
          "type": "object"
        },
        "title": "ParentList",
        "type": "array"
      },
      "PartialUpdateFolderPayload": {
        "properties": {
          "containerParentId": {
            "description": "New parent identifier for the resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "description": "New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "title": "UpdateFolderRequest",
        "type": "object"
      },
      "PartialUpdateOrganizationPayload": {
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "description": "The new name of the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "example": "My Organization",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "title": "UpdateOrganizationRequest",
        "type": "object"
      },
      "PartialUpdateProjectPayload": {
        "properties": {
          "containerParentId": {
            "description": "New parent identifier for the resource container - containerId as well as UUID identifier is supported.",
            "example": "name-of-parent-173523",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "name": {
            "description": "New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9]( ?[a-zA-ZäüöÄÜÖß0-9_+\u0026-]){0,39}$",
            "type": "string"
          }
        },
        "title": "UpdateProjectRequest",
        "type": "object"
      },
      "Project": {
        "properties": {
          "containerId": {
            "description": "Globally unique, user-friendly identifier.",
            "example": "my-first-project-45789",
            "type": "string"
          },
          "creationTime": {
            "description": "Timestamp at which the project was created.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          },
          "labels": {
            "$ref": "#/components/schemas/Labels"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "name": {
            "description": "Project name.",
            "example": "My first project",
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "projectId": {
            "description": "Globally unique, project identifier.",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
            "format": "uuid",
            "type": "string"
          },
          "updateTime": {
            "description": "Timestamp at which the project was last modified.",
            "example": "2021-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parent",
          "containerId",
          "projectId",
          "lifecycleState",
          "updateTime",
          "creationTime"
        ],
        "title": "ProjectResponse",
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "name": "STACKIT Core Platform",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "API v2 to manage resource containers - organizations, folders, projects incl. labels\n\n### Resource Management\nSTACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations, \nfolders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.\n\n### Organizations\nSTACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle.\n- Organizations are always the root node in resource hierarchy and do not have a parent\n\n### Projects\nSTACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies.\n- Projects are optional, but mandatory for cloud-resource usage\n- A project can be created having either an organization, or a folder as parent\n- A project must not have a project as parent\n- Project names under the same parent must not be unique\n- Root organization cannot be changed\n\n### Label\nSTACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried.\n- Policy-based, immutable labels may exists",
    "termsOfService": "https://www.stackit.de/en/general-terms-and-conditions/terms-of-use/",
    "title": "Resource Manager API",
    "version": "2.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v2/folders": {
      "get": {
        "description": "Returns all folders and their metadata that: \n- Are children of the specific containerParentId\n- Match the given containerIds\n- User is member of \u003cbr /\u003e\n\nFilter:\n- Either containerParentId OR containerIds OR member must be passed\n- If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent\n- If member and containerParentId are given, both are used for filtering\n- If member is given, containers must not point to the same container parent\n",
        "operationId": "ListFolders",
        "parameters": [
          {
            "description": "Identifier of the parent resource container - containerId as well as UUID identifier is supported.",
            "in": "query",
            "name": "containerParentId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List of container identifiers - containerId as well as UUID identifier is supported.",
            "in": "query",
            "name": "containerIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFoldersResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Get All Folders",
        "x-stackit-authorization": {
          "disabled": true,
          "implicit-actions": [
            "resource-manager.folder.get"
          ]
        }
      },
      "post": {
        "description": "Create a new folder.",
        "operationId": "CreateFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create Folder",
        "x-stackit-authorization": {
          "disabled": true,
          "implicit-actions": [
            "resource-manager.folder.create"
          ]
        }
      }
    },
    "/v2/folders/{containerId}": {
      "delete": {
        "description": "Delete a folder and its metadata.\n- Folder must not be parent of any other container\n- A force flag may be set, deleting all underlying folders recursively - if no project is attached!",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "description": "If true, all nested, empty folders are deleted recursively - if no project is attached!",
            "in": "query",
            "name": "force",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion process triggered"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Delete Folder",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.folder.delete"
          ],
          "resource-id": "containerId",
          "resource-id-type": "dynamic",
          "resource-type": "folder"
        }
      },
      "get": {
        "description": "Returns all metadata for a specific folder.",
        "operationId": "GetFolderDetails",
        "parameters": [
          {
            "in": "query",
            "name": "includeParents",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFolderDetailsResponse"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get Folder Details",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.folder.get"
          ],
          "resource-id": "containerId",
          "resource-id-type": "dynamic",
          "resource-type": "folder"
        }
      },
      "parameters": [
        {
          "description": "Folder identifier - containerId as well as UUID identifier is supported.",
          "in": "path",
          "name": "containerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update the folder and its metadata.\n- Update folder name\n- Update folder labels\n- Update folder parent (folder or organization)",
        "operationId": "PartialUpdateFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateFolderPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Update Folder",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.folder.edit"
          ],
          "resource-id": "containerId",
          "resource-id-type": "dynamic",
          "resource-type": "folder"
        }
      }
    },
    "/v2/folders/{containerId}/labels": {
      "delete": {
        "description": "Deletes all folder labels by given keys.\n- Specific labels may be deleted by key(s)\n- If no key is specified, all labels will be deleted!",
        "operationId": "DeleteFolderLabels",
        "parameters": [
          {
            "description": "Label name.",
            "in": "query",
            "name": "keys",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Labels removed"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Delete Folder Labels",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.folder.edit"
          ],
          "resource-id": "containerId",
          "resource-id-type": "dynamic",
          "resource-type": "folder"
        }
      },
      "parameters": [
        {
          "description": "Folder identifier - containerId as well as UUID identifier is supported.",
          "in": "path",
          "name": "containerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/organizations": {
      "get": {
        "description": "Returns all organizations and their metadata.\n- If no containerIds are specified, all organizations are returned, if permitted\n- ContainerIds may be set to filter\n- Member may be set to filter\n- If member and containerIds are given, both are used for filtering\n",
        "operationId": "ListOrganizations",
        "parameters": [
          {
            "description": "Organization identifiers - containerId as well as UUID identifier is supported. A combination of both is not allowed.",
            "in": "query",
            "name": "containerIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrganizationsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get All Organizations",
        "x-stackit-authorization": {
          "disabled": true,
          "implicit-actions": [
            "resource-manager.organization.list"
          ]
        }
      }
    },
    "/v2/organizations/{containerId}/labels": {
      "delete": {
        "description": "Deletes all organization labels by given keys.\n- Specific labels may be deleted by key(s)\n- If no key is specified, all labels will be deleted!",
        "operationId": "DeleteOrganizationLabels",
        "parameters": [
          {
            "description": "Label name.",
            "in": "query",
            "name": "keys",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Labels removed"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Delete Organization Labels",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.organization.edit"
          ],
          "resource-id": "containerId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "description": "Organization identifier - containerId as well as UUID identifier is supported.",
          "in": "path",
          "name": "containerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/organizations/{id}": {
      "get": {
        "description": "Returns the organization and its metadata.",
        "operationId": "GetOrganization",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get Organization Details",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.organization.get"
          ],
          "resource-id": "id",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      },
      "parameters": [
        {
          "description": "Organization identifier - containerId as well as UUID identifier is supported.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update the organization and its metadata.\n- Update organization name\n- Update organization labels",
        "operationId": "PartialUpdateOrganization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateOrganizationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Update Organization",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.organization.edit"
          ],
          "resource-id": "id",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        }
      }
    },
    "/v2/projects": {
      "get": {
        "description": "Returns all projects and their metadata that: \n- Are children of the specific containerParentId\n- Match the given containerIds\n- User is member of\n\nFilter:\n- Either containerParentId OR containerIds OR member must be passed\n- If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent\n- If member and containerParentId are given, both are used for filtering\n- If member is given, containers must not point to the same container parent",
        "operationId": "ListProjects",
        "parameters": [
          {
            "description": "Identifier of the parent resource container - containerId as well as UUID identifier is supported.",
            "in": "query",
            "name": "containerParentId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List of container identifiers - containerId as well as UUID identifier is supported.",
            "in": "query",
            "name": "containerIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get All Projects",
        "x-stackit-authorization": {
          "disabled": true,
          "implicit-actions": [
            "resource-manager.project.get"
          ]
        }
      },
      "post": {
        "description": "Create a new project. \n- The request is synchronous, but the workflow-based creation is asynchronous.\n- Lifecycle state remains in CREATING, until workflow completes",
        "operationId": "CreateProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Project created"
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Create Project",
        "x-stackit-authorization": {
          "disabled": true,
          "implicit-actions": [
            "resource-manager.project.create"
          ]
        }
      }
    },
    "/v2/projects/{containerId}/labels": {
      "delete": {
        "description": "Deletes all project labels by given keys.\n- Specific labels may be deleted by key(s)\n- If no key is specified, all labels will be deleted!",
        "operationId": "DeleteProjectLabels",
        "parameters": [
          {
            "description": "Label name.",
            "in": "query",
            "name": "keys",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Labels removed"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Delete Project Labels",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.project.edit"
          ],
          "resource-id": "containerId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "description": "Project identifier - containerId as well as UUID identifier is supported.",
          "in": "path",
          "name": "containerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/projects/{id}": {
      "delete": {
        "description": "Triggers the deletion of a project. \n- The request is synchronous, but the workflow-based deletion is asynchronous\n- Lifecycle state remains in DELETING, until workflow completes",
        "operationId": "DeleteProject",
        "responses": {
          "202": {
            "description": "Deletion process triggered"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Delete Project",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.project.delete"
          ],
          "resource-id": "id",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "get": {
        "description": "Returns the project and its metadata.",
        "operationId": "GetProject",
        "parameters": [
          {
            "in": "query",
            "name": "includeParents",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectResponse"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get Project Details",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.project.get"
          ],
          "resource-id": "id",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      },
      "parameters": [
        {
          "description": "Project identifier - containerId as well as UUID identifier is supported.",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update the project and its metadata.\n- Update project name \n- Update project labels \n- Update project parent (folder or organization)",
        "operationId": "PartialUpdateProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialUpdateProjectPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "summary": "Update Project",
        "x-stackit-authorization": {
          "actions": [
            "resource-manager.project.edit"
          ],
          "resource-id": "id",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://resource-manager.api.stackit.cloud",
      "variables": {
        "region": {
          "default": "global"
        }
      }
    }
  ]
}