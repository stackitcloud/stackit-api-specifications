{
  "components": {
    "parameters": {
      "cursor": {
        "description": "A pagination cursor that represents a position in the dataset. If given, results will be returned from the item after the cursor. If not given, results will be returned from the beginning.",
        "in": "query",
        "name": "cursor",
        "schema": {
          "$ref": "#/components/schemas/cursor"
        }
      },
      "limit": {
        "description": "The maximum number of items to return in the response. If maximum is exceeded, maximum is used.",
        "in": "query",
        "name": "limit",
        "schema": {
          "$ref": "#/components/schemas/limit"
        }
      },
      "offset": {
        "description": "The offset of the first item in the collection to return.",
        "example": 2,
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "number"
        }
      },
      "pathParamProjectId": {
        "description": "The project ID.",
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "pathParamSubscriptionId": {
        "description": "The subscription ID.",
        "in": "path",
        "name": "subscriptionId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "queryParamProductId": {
        "description": "The product ID.",
        "in": "query",
        "name": "productId",
        "schema": {
          "$ref": "#/components/schemas/productId"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "Bad Request": {
                "value": {
                  "error": "Bad Request",
                  "message": "Validation of {param-one} failed.",
                  "path": "/path/where/error/occurred",
                  "status": 400,
                  "timeStamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Malformed input"
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "examples": {
              "Forbidden": {
                "value": {
                  "error": "Forbidden",
                  "message": "Access to this resource is forbidden.",
                  "path": "/path/where/error/occurred",
                  "status": 403,
                  "timeStamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Forbidden"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "Not Found": {
                "value": {
                  "error": "Not Found",
                  "message": "{resource} not found.",
                  "path": "/path/where/error/occurred",
                  "status": 404,
                  "timeStamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Not Found"
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "examples": {
              "Unauthorized": {
                "value": {
                  "error": "Unauthorized",
                  "message": "Access to this resource requires authentication.",
                  "path": "/path/where/error/occurred",
                  "status": 401,
                  "timeStamp": "2019-08-24T14:15:22Z"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Unauthorized"
      }
    },
    "schemas": {
      "ApproveSubscriptionPayload": {
        "properties": {
          "instanceTarget": {
            "allOf": [
              {
                "$ref": "#/components/schemas/url"
              }
            ],
            "description": "The target URL of the user instance, used to redirect the user to the instance after the subscription is active.",
            "example": "https://marketplace-application.com/register?x-stackitâ€“marketplace-token=eC1zdGFja2l0LW1hcmtldHBsYWNlLXRva2Vu"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "description": "Reason phrase of the status code.",
            "example": "status code phrase",
            "type": "string"
          },
          "message": {
            "description": "Description of the error.",
            "example": "error message example",
            "type": "string"
          },
          "path": {
            "description": "Path which was called.",
            "example": "/path/where/error/occurred",
            "type": "string"
          },
          "status": {
            "description": "HTTP response status code.",
            "example": 500,
            "format": "int32",
            "type": "integer"
          },
          "timeStamp": {
            "description": "Timestamp at which the error occurred.",
            "example": "2019-08-24T14:15:22Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "error",
          "message",
          "path",
          "status",
          "timeStamp"
        ],
        "type": "object"
      },
      "ListVendorSubscriptionsResponse": {
        "properties": {
          "cursor": {
            "$ref": "#/components/schemas/cursor"
          },
          "items": {
            "description": "List of subscriptions.",
            "items": {
              "$ref": "#/components/schemas/VendorSubscription"
            },
            "type": "array"
          },
          "limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/limit"
              }
            ],
            "default": 50
          }
        },
        "required": [
          "items",
          "cursor",
          "limit"
        ],
        "type": "object"
      },
      "ResolveCustomerPayload": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/customerToken"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "SubscriptionProduct": {
        "description": "The product of a subscription",
        "properties": {
          "assets": {
            "$ref": "#/components/schemas/assets"
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/deliveryMethod"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/productLifecycleState"
          },
          "planId": {
            "$ref": "#/components/schemas/planId"
          },
          "priceType": {
            "$ref": "#/components/schemas/priceType"
          },
          "pricingPlan": {
            "$ref": "#/components/schemas/pricingPlan"
          },
          "productId": {
            "$ref": "#/components/schemas/productId"
          },
          "productName": {
            "$ref": "#/components/schemas/productName"
          },
          "vendorName": {
            "$ref": "#/components/schemas/vendorName"
          },
          "vendorPlanId": {
            "$ref": "#/components/schemas/vendorPlanId"
          },
          "vendorProductId": {
            "$ref": "#/components/schemas/vendorProductId"
          },
          "vendorWebsiteUrl": {
            "allOf": [
              {
                "$ref": "#/components/schemas/url"
              }
            ],
            "description": "The vendor's website."
          }
        },
        "required": [
          "productId",
          "productName",
          "priceType",
          "deliveryMethod",
          "planId",
          "pricingPlan",
          "vendorName",
          "vendorWebsiteUrl",
          "lifecycleState"
        ],
        "type": "object"
      },
      "UUID": {
        "description": "Universally Unique Identifier (UUID).",
        "example": "14fef715-4ef3-4b10-8789-cd7f9bd09421",
        "format": "uuid",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      },
      "VendorSubscription": {
        "properties": {
          "lifecycleState": {
            "$ref": "#/components/schemas/subscriptionLifecycleState"
          },
          "organizationId": {
            "$ref": "#/components/schemas/UUID"
          },
          "product": {
            "$ref": "#/components/schemas/SubscriptionProduct"
          },
          "projectId": {
            "$ref": "#/components/schemas/UUID"
          },
          "subscriptionId": {
            "$ref": "#/components/schemas/UUID"
          }
        },
        "required": [
          "subscriptionId",
          "organizationId",
          "projectId",
          "lifecycleState",
          "product"
        ],
        "type": "object"
      },
      "assets": {
        "description": "The assets associated with the product.",
        "properties": {
          "serviceCertificate": {
            "$ref": "#/components/schemas/serviceCertificate"
          }
        },
        "type": "object"
      },
      "cursor": {
        "description": "A pagination cursor that represents a position in the dataset. If given, results will be returned from the item after the cursor. If not given, results will be returned from the beginning.",
        "example": "eyJrZXkiOiJ2YWx1ZSJ9",
        "type": "string"
      },
      "customerToken": {
        "description": "Opaque token exchangeable for subscription details.",
        "example": "VGhpcyBpcyBhIHRva2VuIGJ5IGRvbW15IHRva2VuIGFuZCBiYXNlNjQgZW5jb2RlZA==",
        "type": "string"
      },
      "deliveryMethod": {
        "description": "The product delivery method/type. For reference: SAAS - Software as a Service, SAI - STACKIT Application Image",
        "enum": [
          "SAAS",
          "KUBERNETES",
          "SAI",
          "PROFESSIONAL_SERVICE"
        ],
        "example": "SAAS",
        "format": "enum",
        "type": "string"
      },
      "fileName": {
        "description": "The file version matching the file name (localized).",
        "example": "2025_06_02_01_file-name_DE.pdf",
        "pattern": "^\\d{4}_\\d{2}_\\d{2}_\\d{3}_[a-zA-Z0-9_-]+_(DE|EN)\\.$",
        "type": "string"
      },
      "limit": {
        "description": "Limit for returned Objects.",
        "example": 50,
        "maximum": 100,
        "minimum": 0,
        "type": "number"
      },
      "localizedVersion": {
        "description": "The localized version (file name) of a file.",
        "properties": {
          "de": {
            "$ref": "#/components/schemas/fileName"
          },
          "en": {
            "$ref": "#/components/schemas/fileName"
          }
        },
        "type": "object"
      },
      "planId": {
        "description": "The user-readable plan ID of a pricing option.",
        "example": "marketplace-plan-c4f9d2fc",
        "maxLength": 29,
        "minLength": 10,
        "pattern": "^[a-z0-9-]{1,20}-[0-9a-f]{8}$",
        "type": "string"
      },
      "priceType": {
        "description": "The product's price type.",
        "enum": [
          "CONTRACT",
          "FREE",
          "FREE_TRIAL",
          "BYOL",
          "PAYG"
        ],
        "example": "CONTRACT",
        "format": "enum",
        "type": "string"
      },
      "pricingPlan": {
        "description": "Additional price type information.",
        "example": "Monthly subscription",
        "type": "string"
      },
      "productId": {
        "description": "The user-readable product ID.",
        "example": "marketplace-product-4c531ae5",
        "maxLength": 29,
        "minLength": 10,
        "pattern": "^[a-z0-9-]{1,20}-[0-9a-f]{8}$",
        "type": "string"
      },
      "productLifecycleState": {
        "description": "The lifecycle state of the product.",
        "enum": [
          "PRODUCT_LIVE",
          "PRODUCT_PREVIEW"
        ],
        "example": "PRODUCT_LIVE",
        "format": "enum",
        "type": "string"
      },
      "productName": {
        "description": "The name of the product.",
        "example": "Cool Product Name",
        "maxLength": 512,
        "pattern": "^[a-zA-ZÃ¤Ã¼Ã¶Ã„ÃœÃ–0-9,.!?()@\\/:=\\n\\t -]+$",
        "type": "string"
      },
      "serviceCertificate": {
        "description": "The related service certificate of the (subscription) product.",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/localizedVersion"
          }
        },
        "type": "object"
      },
      "subscriptionId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UUID"
          }
        ],
        "description": "The subscription ID."
      },
      "subscriptionLifecycleState": {
        "description": "Lifecycle state of the subscription.",
        "enum": [
          "SUBSCRIPTION_PENDING",
          "SUBSCRIPTION_ACTIVE",
          "SUBSCRIPTION_INACTIVE",
          "SUBSCRIPTION_CANCELLING",
          "SUBSCRIPTION_CANCELLED",
          "SUBSCRIPTION_REJECTED"
        ],
        "example": "SUBSCRIPTION_ACTIVE",
        "format": "enum",
        "type": "string"
      },
      "url": {
        "description": "Uniform Resource Locator.",
        "example": "https://example.com",
        "maxLength": 512,
        "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
        "type": "string"
      },
      "vendorId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UUID"
          }
        ],
        "description": "The vendor ID."
      },
      "vendorName": {
        "description": "The product's vendor name.",
        "example": "STACKIT",
        "maxLength": 512,
        "pattern": "^[a-zA-ZÃ¤Ã¼Ã¶Ã„ÃœÃ–0-9,.!?()@\\/:=\\n\\t -]+$",
        "type": "string"
      },
      "vendorPlanId": {
        "description": "The vendor provided plan ID.",
        "example": "custom-plan-id-123",
        "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9_+\u0026-]){0,39}$",
        "type": "string"
      },
      "vendorProductId": {
        "description": "The vendor provided product ID.",
        "example": "custom-vendor-id-123",
        "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9_+\u0026-]){0,39}$",
        "type": "string"
      }
    }
  },
  "info": {
    "contact": {
      "email": "marketplace@stackit.cloud",
      "name": "STACKIT Marketplace"
    },
    "description": "API to manage STACKIT Marketplace.",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "STACKIT Marketplace API",
    "version": "1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v1/vendors/projects/{projectId}/resolve-customer": {
      "post": {
        "description": "Get details about the requested subscription.",
        "operationId": "ResolveCustomer",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParamProjectId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveCustomerPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorSubscription"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Resolve customer",
        "x-stackit-authorization": {
          "actions": [
            "marketplace.subscription.approve"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.marketplace"
            ]
          }
        }
      }
    },
    "/v1/vendors/projects/{projectId}/subscriptions": {
      "get": {
        "description": "List all subscriptions of a project.",
        "operationId": "ListVendorSubscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParamProjectId"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/queryParamProductId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVendorSubscriptionsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "summary": "List all subscriptions of a project.",
        "x-stackit-authorization": {
          "actions": [
            "marketplace.subscription.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.marketplace"
            ]
          }
        }
      }
    },
    "/v1/vendors/projects/{projectId}/subscriptions/{subscriptionId}": {
      "get": {
        "description": "Get a subscription.",
        "operationId": "GetVendorSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParamProjectId"
          },
          {
            "$ref": "#/components/parameters/pathParamSubscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorSubscription"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Get a subscription",
        "x-stackit-authorization": {
          "actions": [
            "marketplace.subscription.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.marketplace"
            ]
          }
        }
      }
    },
    "/v1/vendors/projects/{projectId}/subscriptions/{subscriptionId}/approve": {
      "post": {
        "description": "Approve a pending subscription.",
        "operationId": "ApproveSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParamProjectId"
          },
          {
            "$ref": "#/components/parameters/pathParamSubscriptionId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveSubscriptionPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Approve a subscription",
        "x-stackit-authorization": {
          "actions": [
            "marketplace.subscription.approve"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.marketplace"
            ]
          }
        }
      }
    },
    "/v1/vendors/projects/{projectId}/subscriptions/{subscriptionId}/reject": {
      "post": {
        "description": "Reject a subscription (in any lifecycle state). Only available for subscriptions to products with lifecycle state `PRODUCT_PREVIEW`.",
        "operationId": "vendors-subscriptions-reject",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathParamProjectId"
          },
          {
            "$ref": "#/components/parameters/pathParamSubscriptionId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "summary": "Reject a subscription",
        "x-stackit-authorization": {
          "actions": [
            "marketplace.subscription.reject"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.marketplace"
            ]
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://stackit-marketplace.api.stackit.cloud",
      "variables": {
        "region": {
          "default": "global"
        }
      }
    }
  ]
}